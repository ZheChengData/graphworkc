{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GraphWorkC\u7b80\u4ecb","text":""},{"location":"#_1","title":"\u9879\u76ee\u6982\u8ff0","text":"<p>GraphWorkC\u7531\u676d\u5dde\u6d59\u8bda\u6570\u636e\u79d1\u6280\u6709\u9650\u516c\u53f8-\u6570\u636e\u5206\u6790\u56e2\u961f\u5f00\u53d1\uff0c \u662f\u4e00\u4e2a\u57fa\u4e8ec++\u5f00\u53d1\u7684\u9ad8\u6548\u56fe\u8bba\u5206\u6790\u5de5\u5177\uff0c\u4f5c\u4e3a\u5f00\u6e90\u7684python\u5e93\uff0c\u91c7\u7528\u6df7\u5408\u7f16\u7a0b\u65b9\u5f0f\uff0c\u5bf9\u5e38\u7528\u7684\u56fe\u8bba\u7b97\u6cd5\u8fdb\u884c\u4e86\u9ad8\u6548\u7684\u5b9e\u73b0\u3002</p> <p>graphworkc\u652f\u6301\u5e38\u7528\u7684\u6700\u77ed\u8def\u641c\u7d22\u7b97\u6cd5(\u6301\u7eed\u66f4\u65b0)\uff0c\u65e8\u5728\u63d0\u4f9b\u4e00\u79cd\u9ad8\u6548\u7684\u65b9\u5f0f\u6765\u5904\u7406\u548c\u5206\u6790\u5927\u89c4\u6a21\u56fe\u6570\u636e\u3002</p> <p>Note</p> <p>\u8fd9\u4e2a\u9879\u76ee\u6b63\u5904\u5728\u9891\u7e41\u7684\u5347\u7ea7\u8fed\u4ee3\u671f\uff0c \u5f53\u524d\u7248\u672cv1.1.9\uff0c \u8bf7\u7528\u6237\u53ca\u65f6\u66f4\u65b0.</p> <p>\ud83d\udcac\u4e0b\u4e00\u7248\u672cv1.2.0\u9884\u8ba1\u66f4\u65b0\u5185\u5bb9</p> <ul> <li>\u652f\u6301linux\u64cd\u4f5c\u7cfb\u7edf</li> <li>\u5355\u4e2aOD\u8d77\u7ec8\u70b9\u7684\u8def\u5f84\u641c\u7d22</li> </ul>"},{"location":"#_2","title":"\u6027\u80fd\u5bf9\u6bd4","text":"<p>\u4f7f\u7528networkxv3.4.2\u7248\u672c\u4e0egraphworkc\u5728\u540c\u4e00\u8def\u7f51\u4e0b\u8fdb\u884c\u6700\u77ed\u8def\u641c\u7d22\u6d4b\u8bd5\uff0c\u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\uff1a</p> <p>\u6d4b\u8bd5\u4ee3\u7801\u89c1\u6d4b\u8bd5\u6570\u636e\u4e0e\u4ee3\u7801</p>"},{"location":"#_3","title":"\u5982\u4f55\u4f7f\u7528","text":"<p>\u6b64\u5f00\u6e90\u5e93\u5df2\u4e0a\u4f20\u81f3pypi\u5b98\u7f51\uff0c\u4f7f\u7528pip\u5b89\u88c5\u540e\u5373\u53ef\u4f7f\u7528\uff0c\u76ee\u524d\u8981\u6c42python\u7248\u672c&gt;=3.9</p>"},{"location":"#_4","title":"\u5982\u4f55\u5b89\u88c5","text":"<pre><code>pip install graphworkc\n</code></pre>"},{"location":"#_5","title":"\u5982\u4f55\u66f4\u65b0","text":"<pre><code>pip install --upgrade  graphworkc\n</code></pre>"},{"location":"#_6","title":"\u7528\u6237\u53cd\u9988","text":"<ul> <li>\u5982\u679c\u60a8\u53d1\u73b0\u4e86graphworkc\u7684BUG\uff0c\u8bf7\u5728issue\u754c\u9762\u63d0\u4ea4</li> <li>\u5982\u679c\u60a8\u6709\u4efb\u4f55\u5173\u4e8egraphworkc\u7684\u4f7f\u7528\u95ee\u9898\u4e14\u5728\u67e5\u9605\u7528\u6237\u6587\u6863\u540e\u4ecd\u7136\u65e0\u6cd5\u89e3\u51b3\uff0c\u53ef\u4ee5\u5728\u8ba8\u8bba\u533a\u63d0\u95ee</li> </ul> <p>\u6b22\u8fce\u52a0\u5165\u6d59\u8bda\u6570\u636e\u5f00\u6e90\u793e\u7fa4\u83b7\u53d6\u66f4\u591a\u54a8\u8be2\uff0c\u7531\u4e8e\u76ee\u524d\u4e24\u4e2a\u5fae\u4fe1\u7fa4\u7684\u4eba\u6570\u5747\u5df2\u8d85\u8fc7200\u4eba\uff0c\u8bf7\u60a8\u6dfb\u52a0\u5c0f\u52a9\u624b\u540e\u518d\u5165\u7fa4\uff1a</p>"},{"location":"#graphworkc_1","title":"graphworkc\u76f8\u5173\u7279\u6027","text":"<ul> <li>\u5f00\u6e90\uff1a\u9879\u76ee\u5b8c\u5168\u5f00\u6e90\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u81ea\u7531\u67e5\u770b\u548c\u8d21\u732e\u4ee3\u7801</li> <li>\u8de8\u5e73\u53f0\uff1a\u652f\u6301\u591a\u79cd\u64cd\u4f5c\u7cfb\u7edf\uff0c\u65b9\u4fbf\u7528\u6237\u5728\u4e0d\u540c\u73af\u5883\u4e0b\u4f7f\u7528</li> <li>\u9ad8\u6027\u80fd\uff1a\u5e95\u5c42\u4e3ac++\u9a71\u52a8\uff0c\u4e0d\u53d7python\u5168\u5c40\u89e3\u91ca\u5668\u9501GIL\u7684\u9650\u5236</li> <li>\u6613\u4e8e\u96c6\u6210\uff1a\u63d0\u4f9b\u7b80\u5355\u6613\u7528\u7684 API \u63a5\u53e3\uff0c\u4fbf\u4e8e\u4e0e\u5176\u4ed6\u7cfb\u7edf\u96c6\u6210</li> </ul>"},{"location":"#graphworkc_2","title":"graphworkc\u4e3b\u8981\u529f\u80fd","text":"<ul> <li>\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff1a\u57fa\u4e8e\u7ed9\u5b9a\u7684 OD\uff08Origin-Destination\uff09\u5bf9\uff0c\u8ba1\u7b97\u5e76\u8fd4\u56de\u6700\u77ed\u8def\u5f84</li> <li>\u6700\u5c11\u82b1\u8d39\u8ba1\u7b97\uff1a\u8003\u8651\u8def\u7f51\u4e2d\u7684\u82b1\u8d39\u4fe1\u606f\uff0c\u8ba1\u7b97\u4ece\u6e90\u70b9\u5230\u76ee\u7684\u70b9\u7684\u6700\u5c11\u82b1\u8d39\u8def\u5f84</li> <li>\u9ad8\u6548\u7b97\u6cd5\uff1a\u4f7f\u7528\u9ad8\u6548\u7684\u56fe\u8bba\u7b97\u6cd5\uff0c\u786e\u4fdd\u5373\u4f7f\u5728\u5927\u89c4\u6a21\u8def\u7f51\u6570\u636e\u4e0b\u4e5f\u80fd\u5feb\u901f\u8ba1\u7b97\u7ed3\u679c</li> <li>\u7075\u6d3b\u7684\u914d\u7f6e\uff1a\u652f\u6301\u7528\u6237\u6839\u636e\u5b9e\u9645\u9700\u6c42\u81ea\u5b9a\u4e49\u8def\u7f51\u7ed3\u6784\u548c\u8ba1\u7b97\u6a21\u578b\uff0c\u4fbf\u4e8e\u9002\u5e94\u5404\u79cd\u5e94\u7528\u573a\u666f</li> </ul>"},{"location":"#graphworkc_3","title":"graphworkc\u4f7f\u7528\u573a\u666f","text":"<ul> <li>\u4ea4\u901a\u8fd0\u8f93\uff1a\u9002\u7528\u4e8e\u57ce\u5e02\u4ea4\u901a\u7ba1\u7406\u3001\u9053\u8def\u89c4\u5212\u7b49\u9886\u57df\uff0c\u5e2e\u52a9\u8ba1\u7b97\u6700\u4f18\u7684\u884c\u9a76\u8def\u7ebf\uff0c\u4f18\u5316\u4ea4\u901a\u6d41\u91cf</li> <li>\u7f51\u7edc\u4f18\u5316\uff1a\u53ef\u4ee5\u7528\u4e8e\u8ba1\u7b97\u4fe1\u606f\u4f20\u8f93\u7684\u6700\u77ed\u8def\u5f84\u6216\u6700\u4f4e\u6210\u672c\u8def\u5f84\uff0c\u63d0\u5347\u7f51\u7edc\u6548\u7387</li> <li>\u667a\u80fd\u7269\u6d41\uff1a\u4e3a\u7269\u6d41\u516c\u53f8\u63d0\u4f9b\u8def\u5f84\u4f18\u5316\u65b9\u6848\uff0c\u964d\u4f4e\u8fd0\u8f93\u6210\u672c\u548c\u65f6\u95f4</li> </ul>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/","title":"\u5feb\u901f\u5f00\u59cb","text":"<p>\u6b64\u6587\u6863\u5c06\u5e2e\u52a9\u60a8\u5f00\u59cb\u4f7f\u7528graphworkc</p>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_2","title":"\u521b\u5efa\u4e00\u4e2a\u56fe","text":"<p>\u521b\u5efa\u4e00\u4e2a\u6ca1\u6709\u8282\u70b9\u548c\u8fb9\u7684\u7a7a\u56fe\uff1a</p> <pre><code>import graphworkc as gw\ng = gw.CGraph()\n</code></pre>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_3","title":"\u6dfb\u52a0\u8fb9","text":"<p>add_edge\u51fd\u6570\u7528\u4e8e\u6dfb\u52a0\u6709\u5411\u8fb9\u3002\u4f8b\u5982\uff1a\u6dfb\u52a0\u4ece\u8282\u70b91\u6307\u5411\u8282\u70b92\u7684\u6709\u5411\u8fb9<code>(1, 2)</code>\uff0c\u540c\u65f6\u652f\u6301\u6307\u5b9a\u8be5\u6709\u5411\u8fb9\u7684\u5c5e\u6027\u503c</p> <pre><code>for i in range(100):\n    # \u5411\u56feg\u4e2d\u6dfb\u52a0\u6709\u5411\u8fb9(i, i + 1)\uff0c\u540c\u65f6\u6307\u5b9a\u4e24\u4e2a\u5c5e\u6027\u503c\uff1aweight\u548clength\n    g.add_edge(i, i + 1, {\"weight\": 2, \"length\":3})\n</code></pre> <p>add_edges\u51fd\u6570\u53ef\u4ee5\u4e00\u6b21\u6027\u6dfb\u52a0\u591a\u6761\u6709\u5411\u8fb9\uff1a</p> <pre><code>g.add_edges([(200, 201, {\"weight\": 2}),\n             (201, 202, {\"weight\": 2}),\n             (202, 203, {\"weight\": 2})])\n</code></pre>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_4","title":"\u5220\u9664\u8fb9","text":"<p>remove_edge\u51fd\u6570\u53ef\u4ee5\u5220\u9664\u6307\u5b9a\u7684\u6709\u5411\u8fb9\uff1a</p> <pre><code>g.remove_edge(1,2)\n</code></pre> <p>remove_edges\u51fd\u6570\u53ef\u4ee5\u4e00\u6b21\u6027\u5220\u9664\u591a\u6761\u6709\u5411\u8fb9:</p> <pre><code>g.remove_edges([(3, 4),\n                (4, 5),\n                (5, 6)])\n</code></pre>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_5","title":"\u8bbe\u7f6e\u5f62\u5fc3\u70b9","text":"<p>set_centroid\u51fd\u6570\u53ef\u4ee5\u5c06\u56fe\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9\u8bbe\u7f6e\u4e3a\u5f62\u5fc3\u70b9\uff1bset_centroids\u51fd\u6570\u53ef\u4ee5\u4e00\u6b21\u6027\u5c06\u591a\u4e2a\u70b9\u8bbe\u7f6e\u4e3a\u5f62\u5fc3\u70b9\u3002</p> <pre><code>g.set_centroid(1)\ng.set_centroids([2, 3, 4])\n</code></pre>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_6","title":"\u83b7\u53d6\u57fa\u672c\u4fe1\u606f","text":"<ul> <li>get_graph_info\uff1a\u7528\u4e8e\u83b7\u53d6\u56fe\u7684\u57fa\u672c\u4fe1\u606f</li> <li>get_node_info\uff1a\u7528\u4e8e\u83b7\u53d6\u70b9\u7684\u57fa\u672c\u4fe1\u606f</li> <li>get_link_info\uff1a\u7528\u4e8e\u83b7\u53d6\u8fb9\u7684\u57fa\u672c\u4fe1\u606f</li> </ul> <pre><code>info_g = g.get_graph_info()\nprint(info_g)\n\ninfo_n = g.get_node_info(1)\nprint(info_n)\n\ninfo_l = g.get_link_info(1, 2)\nprint(info_l)\n</code></pre> <p>\u5728\u4e0b\u9762\u7684\u6700\u77ed\u8def\u7b97\u6cd5\u63a5\u53e3\u6f14\u793a\u4e2d\uff0c\u5747\u91c7\u7528\u4e0b\u56fe\u7684graph\u4e3a\u6837\u4f8b\uff1a</p> edge_list\u6240\u6784\u9020\u7684\u793a\u4f8bgraph <pre><code>import graphworkc as gw\ng = gw.CGraph()\nedge_list = [(1, 2, {'l': 1.23}), (2, 1, {'l': 1.23}), \n             (8, 1, {'l': 3.13}), (1, 8, {'l': 3.13}), \n             (4, 1, {'l': 1.66}), (1, 4, {'l': 1.66}),\n             (8, 2, {'l': 2.77}), (2, 8, {'l': 2.77}),\n             (2, 5, {'l': 2.79}), (5, 2, {'l': 2.79}),\n             (2, 3, {'l': 2.01}), (3, 2, {'l': 2.01}),\n             (8, 9, {'l': 2.66}), (9, 8, {'l': 2.66}),\n             (3, 9, {'l': 2.56}), (9, 3, {'l': 2.56}),\n             (7, 9, {'l': 2.79}), (9, 7, {'l': 2.79}), \n             (7, 3, {'l': 0.99}), (3, 7, {'l': 0.99}),\n             (7, 6, {'l': 1.29}), (6, 7, {'l': 1.29}),\n             (5, 6, {'l': 0.89}), (6, 5, {'l': 0.89}),\n             (4, 5, {'l': 0.79}), (5, 4, {'l': 0.79})]\ng.add_edges(edge_list)\n</code></pre>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_7","title":"\u5355\u6e90\u6700\u77ed\u8def\u8ba1\u7b97","text":"\u793a\u4f8b\uff1a\u4ee51\u4e3a\u5355\u6e90\u8d77\u70b9"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#-","title":"\u5355\u6e90\u6700\u77ed\u8def-\u4ec5\u8fd4\u56de\u5f00\u9500","text":"<p>single_source_cost\u51fd\u6570\u53ef\u4ee5\u83b7\u53d6\u5355\u6e90\u8282\u70b9\u5230\u5404\u4e2a\u8282\u70b9\u7684\u6700\u77ed\u8def\u82b1\u8d39\uff1a</p> <pre><code>s_cost = g.single_source_cost(1, weight_name=\"l\")\nprint(s_cost)\n# {9: 5.79, 1: 0.0, 2: 1.23, 8: 3.13, 4: 1.66, 5: 2.45, 3: 3.2399999999999998, 6: 3.3400000000000003, 7: 4.2299999999999995}\n</code></pre>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#-_1","title":"\u5355\u6e90\u6700\u77ed\u8def-\u4ec5\u8fd4\u56de\u8def\u5f84","text":"<p>single_source_path\u51fd\u6570\u53ef\u4ee5\u83b7\u53d6\u5355\u6e90\u8282\u70b9\u5230\u5404\u4e2a\u8282\u70b9\u7684\u6700\u77ed\u8def\u8def\u5f84\uff1a</p> <pre><code>s_path = g.single_source_path(1, weight_name=\"l\")\nprint(s_path)\n# {9: [1, 8, 9], 1: [1], 2: [1, 2], 8: [1, 8], 4: [1, 4], 5: [1, 4, 5], 3: [1, 2, 3], 6: [1, 4, 5, 6], 7: [1, 2, 3, 7],}\n</code></pre>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#-_2","title":"\u5355\u6e90\u6700\u77ed\u8def-\u8fd4\u56de\u8def\u5f84\u548c\u5f00\u9500","text":"<p>single_source_all\u51fd\u6570\u53ef\u4ee5\u83b7\u53d6\u5355\u6e90\u8282\u70b9\u5230\u5404\u4e2a\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u548c\u82b1\u8d39\uff1a</p> <pre><code>s_all = g.single_source_all(1, weight_name=\"l\")\nprint(s_all.paths)\nprint(s_all.cost)\n</code></pre>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_8","title":"\u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u8ba1\u7b97","text":"<p>\u8be5\u4e9b\u51fd\u6570\u5e2e\u52a9\u60a8\u4e00\u6b21\u6027\u5b8c\u6210\u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u7684\u8ba1\u7b97\uff1a</p> <ul> <li>multi_single_source_cost\uff1a\u7528\u4e8e\u8ba1\u7b97\u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def(\u4ec5\u8fd4\u56de\u5f00\u9500)</li> <li>multi_single_source_path\uff1a\u7528\u4e8e\u8ba1\u7b97\u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def(\u4ec5\u8fd4\u56de\u8def\u5f84)</li> <li>multi_single_source_all\uff1a\u7528\u4e8e\u8ba1\u7b97\u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def(\u8fd4\u56de\u8def\u5f84\u5f00\u9500)</li> </ul> <pre><code>ms_cost = g.multi_single_source_path([1, 7], weight_name=\"l\")\nprint(ms_cost[0]) # {9: [1, 8, 9], 1: [1], 2: [1, 2], 8: [1, 8], 4: [1, 4], 5: [1, 4, 5], 3: [1, 2, 3], 6: [1, 4, 5, 6], 7: [1, 2, 3, 7],}\nprint(ms_cost[1]) # {7: [7], 1: [7, 3, 2, 1], 9: [7, 9], 3: [7, 3], 6: [7, 6], 2: [7, 3, 2], 5: [7, 6, 5], 4: [7, 6, 5, 4], 8: [7, 9, 8],}\n</code></pre>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_9","title":"\u591a\u6e90\u6700\u77ed\u8def\u8ba1\u7b97","text":"\u793a\u4f8b\uff1a\u4ee51\u30017\u4e3a\u591a\u6e90\u8d77\u70b9"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#-_3","title":"\u591a\u6e90\u6700\u77ed\u8def-\u4ec5\u8fd4\u56de\u5f00\u9500","text":"<p>multi_source_path\u51fd\u6570\u53ef\u4ee5\u83b7\u53d6\u591a\u6e90\u8282\u70b9\u5230\u5404\u4e2a\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u5f00\u9500\uff1a</p> <pre><code># \u4e0d\u9650\u5236\u641c\u7d22\u622a\u65ad\nm_path = g.multi_source_path([1, 7], weight_name=\"l\")\nprint(m_path)\n# {9: 2.79, 1: 0.0, 7: 0.0, 2: 1.23, 8: 3.13, 4: 1.66, 3: 0.99, 6: 1.29, 5: 2.18}\n</code></pre> <pre><code># \u9650\u5236\u641c\u7d22\u622a\u65ad\u4e3a2.5\nm_path = g.multi_source_path([1, 7], cut_off=2.50, weight_name=\"l\")\nprint(m_path)\n# {1: 0.0, 7: 0.0, 2: 1.23 4: 1.66, 3: 0.99, 6: 1.29, 5: 2.18}\n</code></pre>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#-_4","title":"\u591a\u6e90\u6700\u77ed\u8def-\u4ec5\u8fd4\u56de\u8def\u5f84","text":"<p>multi_source_cost\u51fd\u6570\u53ef\u4ee5\u83b7\u53d6\u591a\u6e90\u8282\u70b9\u5230\u5404\u4e2a\u8282\u70b9\u7684\u6700\u77ed\u8def\u82b1\u8d39</p> <pre><code>m_path = g.multi_source_path([1, 7], weight_name=\"l\")\nprint(m_path)\n# {9: [7, 9], 1: [1], 7: [7], 2: [1, 2], 8: [1, 8], 4: [1, 4], 3: [7, 3], 6: [7, 6], 5: [7, 6, 5]}\n</code></pre>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#-_5","title":"\u591a\u6e90\u6700\u77ed\u8def-\u8fd4\u56de\u8def\u5f84\u548c\u5f00\u9500","text":"<p>multi_source_all\u51fd\u6570\u53ef\u4ee5\u83b7\u53d6\u591a\u6e90\u8282\u70b9\u5230\u5404\u4e2a\u8282\u70b9\u7684\u6700\u77ed\u8def\u8def\u5f84\u548c\u82b1\u8d39\uff1a</p> <pre><code>m_all = g.multi_source_all([1, 7], weight_name=\"l\")\nprint(m_all.cost)\nprint(m_all.paths)\n</code></pre>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#od-","title":"\u591aOD-\u6700\u77ed\u8def\u82b1\u8d39\u77e9\u9635\u751f\u6210","text":"<p>cost_matrix\u51fd\u6570\u6839\u636e\u8f93\u5165\u7684\u8d77\u70b9\u5217\u8868\u548c\u7ec8\u70b9\u5217\u8868\uff0c\u8ba1\u7b97\u751f\u6210\u83b7\u5f97\u4e00\u4e2a\u5f00\u9500\u77e9\u9635</p> end_node_1 end_node_2 end_node_3 ... end_node_n start_node_1 v11 v12 v13 ... v1n start_node_2 v21 v22 v23 ... v2n start_node_3 v31 v32 v33 ... v3n ... ... ... ... ... ... start_node_m vm1 vm2 vm3 ... vmn <p>\u8be5\u7ed3\u679c\u77e9\u9635\uff1a</p> <ul> <li>\u884c\u7d22\u5f15\u987a\u5e8f\u4e0e<code>start_nodes_list</code>\u4e00\u81f4</li> <li>\u5217\u7d22\u5f15\u987a\u5e8f\u4e0e<code>end_nodes_list</code>\u4e00\u81f4</li> </ul> <pre><code>start_nodes_list = [1, 4]\nend_nodes_list = [3, 7]\ns_matrix = g.cost_matrix(start_nodes_list, end_nodes_list,\n                                  weight_name=\"l\", num_thread=10)\nprint(s_matrix)\n# [[3.24 4.23]\n# [3.96 2.97]]\n</code></pre>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#od-_1","title":"\u591aOD-\u6700\u77ed\u8def\u8def\u5f84\u5b57\u5178\u751f\u6210\uff08\u591a\u5bf9\u591a\u751f\u6210\uff09","text":"<p>path_dict\u51fd\u6570\u6839\u636e\u8f93\u5165\u7684\u8d77\u70b9\u5217\u8868\u548c\u7ec8\u70b9\u5217\u8868\uff0c\u8ba1\u7b97\u751f\u6210\u83b7\u5f97\u4e00\u4e2a\u8def\u5f84\u5b57\u5178\uff1a</p> <pre><code>start_nodes_list = [1, 4]\nend_nodes_list = [3, 7]\ns_list = g.path_list(start_nodes_list, end_nodes_list, \n                             weight_name=\"l\", num_thread=10)\nprint(s_list)\n# {(1, 3): [1, 2, 3], (1, 7): [1, 2, 3, 7], (4, 3): [4, 5, 6, 7, 3], (4, 7): [4, 5, 6, 7]}\n</code></pre>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#od-_2","title":"\u591aOD-\u6700\u77ed\u8def\u8def\u5f84\u5b57\u5178\u751f\u6210\uff08\u4e00\u5bf9\u4e00\u751f\u6210\uff09\uff1a","text":"<p>path_dict_pairwise\u51fd\u6570\u6839\u636e\u8f93\u5165\u7684\u8d77\u70b9\u5217\u8868\u548c\u7ec8\u70b9\u5217\u8868\uff0c\u8ba1\u7b97\u751f\u6210\u83b7\u5f97\u4e00\u4e2a\u4e00\u4e00\u5bf9\u5e94\u7684\u8def\u5f84\u5b57\u5178(\u8d77\u70b9\u5217\u8868\u7684\u7b2ci\u4e2a\u5e8f\u5217\u548c\u7ec8\u70b9\u5217\u8868\u7684\u7b2ci\u4e2a\u5e8f\u5217\u751f\u6210\u4e00\u4e2aOD\u5bf9)\uff1a</p> <pre><code>start_nodes_list = [1, 4]\nend_nodes_list = [3, 7]\ns_list = g.path_dict_pairwise(start_nodes_list, end_nodes_list, \n                             weight_name=\"l\", num_thread=10)\nprint(s_list)\n# {(1, 3): [1, 2, 3], (4, 7): [4, 5, 6, 7]}\n</code></pre>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#k","title":"\u5bfb\u627eK\u6761\u6700\u77ed\u8def","text":"<p>k_shortest_paths\u51fd\u6570\u6839\u636e\u8f93\u5165\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u8fd4\u56de\u4e24\u70b9\u4e4b\u95f4\u6700\u77ed\u7684\u524dK\u6761\u8def\u5f84\uff1a</p> <p>\u5047\u8bbe\u6709\u5982\u4e0b\u56fe\uff1a\u5219\u53ef\u901a\u8fc7\u6b64\u51fd\u6570\u83b7\u53d6\u8282\u70b91\u5230\u8282\u70b97\u7684\u6700\u77ed\u7684\u4e09\u6761\u8def\u5f84</p> \u6700\u77ed\u7b2c\u4e8c\u77ed\u7b2c\u4e09\u77ed <p> </p> <p> </p> <p> </p> <pre><code>res = g.k_shortest_paths(1, 7, 3, weight_name=\"l\")\nprint(res)\n# [[1, 2, 3, 7], [1, 4, 5, 6, 7], [1, 2, 5, 6, 7]]\n</code></pre>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#od-_3","title":"\u5355OD-\u6700\u77ed\u8def\u8def\u5f84\u8ba1\u7b97","text":"\u793a\u4f8b\uff1a\u4ee51\u4e3a\u8d77\u70b9\uff0c7\u4e3a\u7ec8\u70b9"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_10","title":"\u4ec5\u8fd4\u56de\u5f00\u9500","text":"<p>shortest_path_cost\u51fd\u6570\u6839\u636e\u8f93\u5165\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u8fd4\u56de\u4e24\u70b9\u4e4b\u95f4\u6700\u77ed\u8def\u5f84\u7684\u5f00\u9500\uff1a</p> <pre><code>res = g.shortest_path_cost(1, 7, weight_name=\"l\")\nprint(res)\n# 4.23\n</code></pre>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_11","title":"\u4ec5\u8fd4\u56de\u8def\u5f84","text":"<p>shortest_path_path\u51fd\u6570\u6839\u636e\u8f93\u5165\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u8fd4\u56de\u4e24\u70b9\u4e4b\u95f4\u6700\u77ed\u8def\u5f84\u7684\u8def\u5f84\uff1a</p> <pre><code>res = g.shortest_path_path(1, 7, weight_name=\"l\")\nprint(res)\n# [1, 2, 3, 7]\n</code></pre>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_12","title":"\u8fd4\u56de\u5f00\u9500\u548c\u8def\u5f84","text":"<p>shortest_path_all\u51fd\u6570\u6839\u636e\u8f93\u5165\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u8fd4\u56de\u4e24\u70b9\u4e4b\u95f4\u6700\u77ed\u8def\u5f84\u7684\u5f00\u9500\u548c\u8def\u5f84\uff1a</p> <pre><code>res = g.shortest_path_all(1, 7, weight_name=\"l\")\nprint(res)\n# (4.23, [1, 2, 3, 7])\n</code></pre>"},{"location":"%E6%A1%88%E4%BE%8B%E5%B1%95%E7%A4%BA/","title":"\u5feb\u901f\u5f00\u59cb","text":"<p>\u6570\u636e\u4e0b\u8f7d\uff1a</p> <p>graphworkc/test/data/zasy at main \u00b7 ZheChengData/graphworkc</p>"},{"location":"%E6%A1%88%E4%BE%8B%E5%B1%95%E7%A4%BA/#1-","title":"\u6848\u4f8b1 - \u5c0f\u6570\u636e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97","text":""},{"location":"%E6%A1%88%E4%BE%8B%E5%B1%95%E7%A4%BA/#_2","title":"\u6784\u5efa\u8def\u7f51\u5bf9\u8c61","text":"<pre><code>import graphworkc\n\nG = graphworkc.CGraph()\n\n# \u6784\u5efa\u4e00\u4e2a\u4ece1\u5230100\u7684\u6709\u5411\u56fe\nfor i in range(100):\n    G.add_edge(i, i+1, {\"weight\": 2})\n\n# \u589e\u5220\u6539\u67e5\nG.get_link_info(40, 41)  # \u67e5\u70b9\uff0c\u8fb9\uff0c\u56fe\nG.get_node_info(40)\nG.get_graph_info()\n\nG.add_edge(199, 200, {\"weight\": 2})  # \u65b0\u589e\u8fb9\nG.add_edges([(200, 201, {\"weight\": 2}),\n             (201, 202, {\"weight\": 2}),\n             (202, 203, {\"weight\": 2})])\n\nG.add_edge(40, 41, {\"weight\": 3})  # \u4fee\u6539\u5df2\u6709\u7684\u8fb9\nG.add_edge(41, 42, {\"weight\": 3})\n\nG.remove_edge(199, 200)  # \u5220\u9664\u8fb9\nG.remove_edges([(200, 201),\n             (201, 202),\n             (202, 203)])\n</code></pre>"},{"location":"%E6%A1%88%E4%BE%8B%E5%B1%95%E7%A4%BA/#_3","title":"\u8fdb\u884c\u6700\u77ed\u8def\u5f84\u8ba1\u7b97","text":"<pre><code># \u6700\u77ed\u8def\u8ba1\u7b97\n# \u591a\u6e90\u6700\u77ed\u8def\nmulti_result_path = G.multi_source_path([1, 10, 20],\n                                  cut_off=100,\n                                  weight_name=\"weight\")\nprint(f\"multi_result_path: {multi_result_path},\\n\"\n      f\"multi_result_path[50]: {multi_result_path[50]}\")\n\nsingle_result_cost = G.multi_source_cost([1, 10, 20],\n                                  cut_off=100,\n                                  weight_name=\"weight\")\nprint(f\"multi_result_cost: {single_result_cost},\\n\"\n      f\"multi_result_cost[50]: {single_result_cost[50]}\")\n\nsingle_result_all = G.multi_source_all([1, 10, 20],\n                                  cut_off=100,\n                                  weight_name=\"weight\")\ntest_path = single_result_all.paths\ntest_cost = single_result_all.cost\nprint(f\"multi_result_all_cost: {test_cost},\\n\"\n      f\"multi_result_all_paths: {test_path},\\n\"\n      f\"multi_result_all_cost[30]: {test_cost[30]},\\n\"\n      f\"multi_result_all_paths[30]: {test_path[30]}\")\n\n# \u5355\u6e90\u6700\u77ed\u8def\nmulti_result_path = G.single_source_path(1,\n                                  cut_off=100,\n                                  weight_name=\"weight\")\nprint(f\"single_result_path: {multi_result_path},\\n\"\n      f\"single_result_path[50]: {multi_result_path[50]}\")\n\n\nsingle_result_cost = G.single_source_cost(1,\n                                  cut_off=100,\n                                  weight_name=\"weight\")\nprint(f\"single_result_cost: {single_result_cost},\\n\"\n      f\"single_result_cost[10]: {single_result_cost[50]}\")\n\nsingle_result_all = G.single_source_all(1,\n                                  cut_off=100,\n                                  weight_name=\"weight\")\ntest_path = single_result_all.paths\ntest_cost = single_result_all.cost\nprint(f\"single_result_all_cost: {test_cost},\\n\"\n      f\"single_result_all_paths: {test_path},\\n\"\n      f\"single_result_all_cost[30]: {test_cost[30]},\\n\"\n      f\"single_result_all_paths[30]: {test_path[30]}\")\n\n# \u591a\u4e2a\u591a\u6e90\u6700\u77ed\u8def\nlist_o = [[1, 10], [10, 30], [20, 40]]\nmulti_single_result_paths = G.multi_multi_source_path(list_o, num_thread=16)\nprint(f\"multi_single_result_paths[0]: {multi_single_result_paths[0]}\")\n\nmulti_single_result_cost = G.multi_multi_source_cost(list_o, num_thread=16)\nprint(f\"multi_single_result_cost[0]: {multi_single_result_cost[0]}\")\n\nmulti_single_result_all = G.multi_multi_source_all(list_o, num_thread=16)\nprint(f\"multi_single_result_all[0]: {multi_single_result_all[0]}\")\n\n# \u82b1\u8d39\u77e9\u9635\u3001\u8def\u5f84\u5217\u8868 \nstarts = [1, 2]\nends = [10, 11, 12]\nresult = G.cost_matrix_to_numpy(starts, ends, num_thread=16)\nprint(f\"cost_matrix: \\n {result}\")\n\nresult1 = G.path_list_to_numpy(starts, ends, num_thread=16)\nprint(\"path_list: \\n\")\nfor pair in result1.items():\n    print(pair)\n</code></pre>"},{"location":"%E6%A1%88%E4%BE%8B%E5%B1%95%E7%A4%BA/#2-","title":"\u6848\u4f8b2 - \u5927\u6570\u636e\u901f\u5ea6\u5bf9\u6bd4","text":""},{"location":"%E6%A1%88%E4%BE%8B%E5%B1%95%E7%A4%BA/#_4","title":"\u51c6\u5907\u6570\u636e","text":"<pre><code>import time\nimport pandas as pd\nimport networkx as nx\nimport graphworkc as gw\n\n\nnet = pd.read_csv(\"zasy/link.csv\", encoding='gbk')\nneg_net = net[net['dir'] == 0].copy()\nneg_net[['from_node', 'to_node']] = neg_net[['to_node', 'from_node']]\nnet = pd.concat([neg_net, net]).reset_index(drop=True)\n</code></pre>"},{"location":"%E6%A1%88%E4%BE%8B%E5%B1%95%E7%A4%BA/#_5","title":"\u51fd\u6570\u51c6\u5907","text":"<p>\u51fd\u6570\u53ef\u4ee5\u53ea\u53d6\u60f3\u8981\u5bf9\u6bd4\u7684\u51fd\u6570\uff0c\u6bcf\u4e2a\u5bf9\u6bd4\u51fd\u6570\u90fd\u662f\u72ec\u7acb\u7684\u3002</p> <pre><code>def t_single_source_cost(link: pd.DataFrame = None):\n    g = gw.CGraph()\n    g.add_edges([(f, t, {'l': l}) for f, t, l in zip(link['from_node'],\n                                                     link['to_node'], link['length'])])\n\n    ng = nx.DiGraph()\n    ng.add_edges_from([(f, t, {'l': l}) for f, t, l in zip(link['from_node'],\n                                                           link['to_node'], link['length'])])\n\n    # \u65f6\u95f4\u5bf9\u6bd4\n    a = time.time()\n    gw_res = g.single_source_cost(start=355061, weight_name='l')  # -&gt; dict\n    b = time.time()\n    print(rf'single_source: graphworkc: {b - a}')\n    c = time.time()\n    nx_res = nx.single_source_dijkstra_path_length(ng, 355061, weight='l')\n    d = time.time()\n    print(rf'single_source: networkx: {d - c}')\n\n    print(f\"\u65f6\u95f4\u6bd4(c++/python): {(b-a)/(d-c)}\")\n\n    # \u7ed3\u679c\u5bf9\u6bd4\n    _ = 0\n    for k in gw_res.keys():\n        gap = gw_res[k] - nx_res[k]\n        _ += gap\n    print(_)\n\n\ndef t_single_source_path(link: pd.DataFrame = None):\n    g = gw.CGraph()\n    g.add_edges([(f, t, {'l': l}) for f, t, l in zip(link['from_node'],\n                                                     link['to_node'], link['length'])])\n\n    ng = nx.DiGraph()\n    ng.add_edges_from([(f, t, {'l': l}) for f, t, l in zip(link['from_node'],\n                                                           link['to_node'], link['length'])])\n\n    # \u65f6\u95f4\u5bf9\u6bd4\n    a = time.time()\n    gw_res = g.single_source_path(start=355061, weight_name='l')  # -&gt; dict\n    b = time.time()\n    print(rf'single_source: graphworkc: {b - a}')\n    c = time.time()\n    nx_res = nx.single_source_dijkstra_path(ng, 355061, weight='l')\n    d = time.time()\n    print(rf'single_source: networkx: {d - c}')\n\n    print(f\"\u65f6\u95f4\u6bd4(c++/python): {(b-a)/(d-c)}\")\n\n    # \u7ed3\u679c\u5bf9\u6bd4\n    total_difference_rate = 0  # \u521d\u59cb\u5316\u5dee\u5f02\u7387\u603b\u548c\n    total_paths = len(gw_res)  # \u8def\u5f84\u603b\u6570\uff0c\u7528\u4e8e\u8ba1\u7b97\u5e73\u5747\u5dee\u5f02\u7387\n\n    for k in gw_res.keys():\n        if k in nx_res:  # \u786e\u4fdd\u5728\u4e24\u4e2a\u7ed3\u679c\u5b57\u5178\u4e2d\u90fd\u6709\u8be5\u8282\u70b9\n            gw_path_length = len(gw_res[k])  # graphworkc\u7684\u8def\u5f84\u957f\u5ea6\n            nx_path_length = len(nx_res[k])  # networkx\u7684\u8def\u5f84\u957f\u5ea6\n\n            # \u8ba1\u7b97\u5dee\u5f02\n            difference = abs(gw_path_length - nx_path_length)\n\n            # \u8ba1\u7b97\u5dee\u5f02\u7387\uff1a\u76f8\u5bf9\u4e8enetworkx\u7684\u8def\u5f84\u957f\u5ea6\n            if nx_path_length != 0:  # \u9632\u6b62\u9664\u4ee50\u7684\u60c5\u51b5\n                difference_rate = (difference / nx_path_length) * 100\n                total_difference_rate += difference_rate  # \u7d2f\u52a0\u5dee\u5f02\u7387\n\n    # \u8f93\u51fa\u5e73\u5747\u5dee\u5f02\u7387\n    average_difference_rate = total_difference_rate / total_paths if total_paths &gt; 0 else 0\n    print(f\"\u5e73\u5747\u5dee\u5f02\u7387: {average_difference_rate}%\")\n\n\ndef t_single_source_all(link: pd.DataFrame = None):\n    g = gw.CGraph()\n    g.add_edges([(f, t, {'l': l}) for f, t, l in zip(link['from_node'],\n                                                     link['to_node'], link['length'])])\n\n    ng = nx.DiGraph()\n    ng.add_edges_from([(f, t, {'l': l}) for f, t, l in zip(link['from_node'],\n                                                           link['to_node'], link['length'])])\n\n    # \u65f6\u95f4\u5bf9\u6bd4\n    a = time.time()\n    gw_res = g.single_source_all(start=355061, weight_name='l')  # -&gt; dict\n    b = time.time()\n    print(rf'single_source: graphworkc: {b - a}')\n\n    c = time.time()\n    _, nx_res = nx.single_source_dijkstra(ng, 355061, weight='l')\n    d = time.time()\n    print(rf'single_source: networkx: {d - c}')\n\n    print(f\"\u65f6\u95f4\u6bd4(c++/python): {(b-a)/(d-c)}\")\n\n    # \u7ed3\u679c\u5bf9\u6bd4\n    total_difference_rate = 0  # \u521d\u59cb\u5316\u5dee\u5f02\u7387\u603b\u548c\n    total_paths = len(gw_res.paths)  # \u8def\u5f84\u603b\u6570\uff0c\u7528\u4e8e\u8ba1\u7b97\u5e73\u5747\u5dee\u5f02\u7387\n\n    for k in gw_res.paths.keys():\n        if k in nx_res:  # \u786e\u4fdd\u5728\u4e24\u4e2a\u7ed3\u679c\u5b57\u5178\u4e2d\u90fd\u6709\u8be5\u8282\u70b9\n            gw_path_length = len(gw_res.paths[k])  # graphworkc\u7684\u8def\u5f84\u957f\u5ea6\n            nx_path_length = len(nx_res[k])  # networkx\u7684\u8def\u5f84\u957f\u5ea6\n\n            # \u8ba1\u7b97\u5dee\u5f02\n            difference = abs(gw_path_length - nx_path_length)\n\n            # \u8ba1\u7b97\u5dee\u5f02\u7387\uff1a\u76f8\u5bf9\u4e8enetworkx\u7684\u8def\u5f84\u957f\u5ea6\n            if nx_path_length != 0:  # \u9632\u6b62\u9664\u4ee50\u7684\u60c5\u51b5\n                difference_rate = (difference / nx_path_length) * 100\n                total_difference_rate += difference_rate  # \u7d2f\u52a0\u5dee\u5f02\u7387\n\n    # \u8f93\u51fa\u5e73\u5747\u5dee\u5f02\u7387\n    average_difference_rate = total_difference_rate / total_paths if total_paths &gt; 0 else 0\n    print(f\"\u5e73\u5747\u5dee\u5f02\u7387: {average_difference_rate}%\")\n\n\ndef t_multi_source_cost(link: pd.DataFrame = None):\n    g = gw.CGraph()\n    g.add_edges([(f, t, {'l': l}) for f, t, l in zip(link['from_node'],\n                                                     link['to_node'], link['length'])])\n\n    ng = nx.DiGraph()\n    ng.add_edges_from([(f, t, {'l': l}) for f, t, l in zip(link['from_node'],\n                                                           link['to_node'], link['length'])])\n\n    # \u65f6\u95f4\u5bf9\u6bd4\n    a = time.time()\n    gw_res = g.multi_source_cost(start_nodes=[355061], weight_name='l')  # -&gt; dict\n    b = time.time()\n    print(rf'multi_source: graphworkc: {b - a}')\n\n    c = time.time()\n    nx_res = nx.multi_source_dijkstra_path_length(ng, [355061], weight='l')\n    d = time.time()\n    print(rf'multi_source: networkx: {d - c}')\n\n    print(f\"\u65f6\u95f4\u6bd4(c++/python): {(b-a)/(d-c)}\")\n\n    # \u7ed3\u679c\u5bf9\u6bd4\n    _ = 0\n    for k in gw_res.keys():\n        gap = gw_res[k] - nx_res[k]\n        _ += gap\n    print(_)\n\n\ndef t_multi_source_path(link: pd.DataFrame = None):\n    g = gw.CGraph()\n    g.add_edges([(f, t, {'l': l}) for f, t, l in zip(link['from_node'],\n                                                     link['to_node'], link['length'])])\n\n    ng = nx.DiGraph()\n    ng.add_edges_from([(f, t, {'l': l}) for f, t, l in zip(link['from_node'],\n                                                           link['to_node'], link['length'])])\n\n    # \u65f6\u95f4\u5bf9\u6bd4\n    a = time.time()\n    gw_res = g.multi_source_path(start_nodes=[355061], weight_name='l')  # -&gt; dict\n    b = time.time()\n    print(rf'multi_source: graphworkc: {b - a}')\n\n    c = time.time()\n    nx_res = nx. multi_source_dijkstra_path(ng, [355061], weight='l')\n    d = time.time()\n    print(rf'multi_source: networkx: {d - c}')\n\n    print(f\"\u65f6\u95f4\u6bd4(c++/python): {(b-a)/(d-c)}\")\n\n    # \u7ed3\u679c\u5bf9\u6bd4\n    total_difference_rate = 0  # \u521d\u59cb\u5316\u5dee\u5f02\u7387\u603b\u548c\n    total_paths = len(gw_res)  # \u8def\u5f84\u603b\u6570\uff0c\u7528\u4e8e\u8ba1\u7b97\u5e73\u5747\u5dee\u5f02\u7387\n\n    for k in gw_res.keys():\n        if k in nx_res:  # \u786e\u4fdd\u5728\u4e24\u4e2a\u7ed3\u679c\u5b57\u5178\u4e2d\u90fd\u6709\u8be5\u8282\u70b9\n            gw_path_length = len(gw_res[k])  # graphworkc\u7684\u8def\u5f84\u957f\u5ea6\n            nx_path_length = len(nx_res[k])  # networkx\u7684\u8def\u5f84\u957f\u5ea6\n\n            # \u8ba1\u7b97\u5dee\u5f02\n            difference = abs(gw_path_length - nx_path_length)\n\n            # \u8ba1\u7b97\u5dee\u5f02\u7387\uff1a\u76f8\u5bf9\u4e8enetworkx\u7684\u8def\u5f84\u957f\u5ea6\n            if nx_path_length != 0:  # \u9632\u6b62\u9664\u4ee50\u7684\u60c5\u51b5\n                difference_rate = (difference / nx_path_length) * 100\n                total_difference_rate += difference_rate  # \u7d2f\u52a0\u5dee\u5f02\u7387\n\n    # \u8f93\u51fa\u5e73\u5747\u5dee\u5f02\u7387\n    average_difference_rate = total_difference_rate / total_paths if total_paths &gt; 0 else 0\n    print(f\"\u5e73\u5747\u5dee\u5f02\u7387: {average_difference_rate}%\")\n\n\ndef t_multi_source_all(link: pd.DataFrame = None):\n    g = gw.CGraph()\n    g.add_edges([(f, t, {'l': l}) for f, t, l in zip(link['from_node'],\n                                                     link['to_node'], link['length'])])\n\n    ng = nx.DiGraph()\n    ng.add_edges_from([(f, t, {'l': l}) for f, t, l in zip(link['from_node'],\n                                                           link['to_node'], link['length'])])\n\n    # \u65f6\u95f4\u5bf9\u6bd4\n    a = time.time()\n    gw_res = g.multi_source_all(start_nodes=[355061], weight_name='l')  # -&gt; dict\n    b = time.time()\n    print(rf'multi_source: graphworkc: {b - a}')\n\n    c = time.time()\n    _, nx_res = nx.multi_source_dijkstra(ng, [355061], weight='l')\n    d = time.time()\n    print(rf'multi_source: networkx: {d - c}')\n\n    print(f\"\u65f6\u95f4\u6bd4(c++/python): {(b-a)/(d-c)}\")\n\n    # \u7ed3\u679c\u5bf9\u6bd4\n    total_difference_rate = 0  # \u521d\u59cb\u5316\u5dee\u5f02\u7387\u603b\u548c\n    total_paths = len(gw_res.paths)  # \u8def\u5f84\u603b\u6570\uff0c\u7528\u4e8e\u8ba1\u7b97\u5e73\u5747\u5dee\u5f02\u7387\n\n    for k in gw_res.paths.keys():\n        if k in nx_res:  # \u786e\u4fdd\u5728\u4e24\u4e2a\u7ed3\u679c\u5b57\u5178\u4e2d\u90fd\u6709\u8be5\u8282\u70b9\n            gw_path_length = len(gw_res.paths[k])  # graphworkc\u7684\u8def\u5f84\u957f\u5ea6\n            nx_path_length = len(nx_res[k])  # networkx\u7684\u8def\u5f84\u957f\u5ea6\n\n            # \u8ba1\u7b97\u5dee\u5f02\n            difference = abs(gw_path_length - nx_path_length)\n\n            # \u8ba1\u7b97\u5dee\u5f02\u7387\uff1a\u76f8\u5bf9\u4e8enetworkx\u7684\u8def\u5f84\u957f\u5ea6\n            if nx_path_length != 0:  # \u9632\u6b62\u9664\u4ee50\u7684\u60c5\u51b5\n                difference_rate = (difference / nx_path_length) * 100\n                total_difference_rate += difference_rate  # \u7d2f\u52a0\u5dee\u5f02\u7387\n\n    # \u8f93\u51fa\u5e73\u5747\u5dee\u5f02\u7387\n    average_difference_rate = total_difference_rate / total_paths if total_paths &gt; 0 else 0\n    print(f\"\u5e73\u5747\u5dee\u5f02\u7387: {average_difference_rate}%\")\n\n\ndef t_multi_single_source_cost(link: pd.DataFrame = None, num: int = 50):\n    n = link.sample(num)\n    n_list = list(n['from_node'].unique())\n\n    g = gw.CGraph()\n    g.add_edges([(f, t, {'l': l}) for f, t, l in zip(link['from_node'],\n                                                     link['to_node'], link['length'])])\n\n    ng = nx.DiGraph()\n    ng.add_edges_from([(f, t, {'l': l}) for f, t, l in zip(link['from_node'],\n                                                           link['to_node'], link['length'])])\n\n    # \u65f6\u95f4\u5bf9\u6bd4\n    a = time.time()\n    gw_res = g.multi_single_source_cost(start_nodes=n_list, weight_name='l', num_thread=10)  # -&gt; list[dict]\n    b = time.time()\n\n    print(rf'multi_single_source: graphworkc: {b - a}')\n\n    c = time.time()\n    all_nx_res = dict()\n    for n in n_list:\n        nx_res = nx.single_source_dijkstra_path_length(ng, n, weight='l',)\n        all_nx_res[n] = nx_res\n    d = time.time()\n    print(rf'multi_single_source: networkx: {d - c}')\n\n    print(f\"\u65f6\u95f4\u6bd4(c++/python): {(b - a) / (d - c)}\")\n\n    _ = 0\n    for i, n in enumerate(n_list):\n        for k in all_nx_res[n_list[i]].keys():\n            gap = gw_res[i][k] - all_nx_res[n_list[i]][k]\n            _ += gap\n    print(_)\n\n\ndef t_multi_single_source_path(link: pd.DataFrame = None, num: int = 50):\n    n = link.sample(num)\n    n_list = list(n['from_node'].unique())\n\n    g = gw.CGraph()\n    g.add_edges([(f, t, {'l': l}) for f, t, l in zip(link['from_node'],\n                                                     link['to_node'], link['length'])])\n\n    ng = nx.DiGraph()\n    ng.add_edges_from([(f, t, {'l': l}) for f, t, l in zip(link['from_node'],\n                                                           link['to_node'], link['length'])])\n\n    # \u65f6\u95f4\u5bf9\u6bd4\n    a = time.time()\n    gw_res = g.multi_single_source_path(start_nodes=n_list, weight_name='l', num_thread=10)  # -&gt; list[dict]\n    b = time.time()\n\n    print(rf'multi_single_source: graphworkc: {b - a}')\n\n    c = time.time()\n    all_nx_res = dict()\n    for n in n_list:\n        nx_res = nx.single_source_dijkstra_path(ng, n, weight='l',)\n        all_nx_res[n] = nx_res\n    d = time.time()\n    print(rf'multi_single_source: networkx: {d - c}')\n\n    print(f\"\u65f6\u95f4\u6bd4(c++/python): {(b - a) / (d - c)}\")\n\n    # \u7ed3\u679c\u5bf9\u6bd4\n    total_paths = 0\n    mismatched_paths = 0\n\n    for i, n in enumerate(n_list):\n        print(f\"Comparing results for start node {n}:\")\n\n        for k in all_nx_res[n].keys():\n            gw_path = gw_res[i][k]  # \u83b7\u53d6\u8def\u5f84\uff0c\u5982\u679c\u6ca1\u6709\u8fd4\u56deNone\n            nx_path = all_nx_res[n].get(k, None)  # \u83b7\u53d6\u8def\u5f84\uff0c\u5982\u679c\u6ca1\u6709\u8fd4\u56deNone\n\n            total_paths += 1  # \u603b\u8def\u5f84\u6570\n\n            if gw_path is None or nx_path is None:\n                mismatched_paths += 1  # \u8fd9\u8868\u793a\u8def\u5f84\u7f3a\u5931\n                print(f\"Node {k} is missing from either gw_res or nx_res.\")\n                print(f\"gw_res for {n}: {gw_res[i]}\")\n                print(f\"nx_res for {n}: {all_nx_res[n]}\")\n                print()\n            else:\n                # \u6bd4\u8f83\u8def\u5f84\uff0c\u5982\u679c\u8def\u5f84\u4e0d\u4e00\u81f4\uff0c\u5219\u8ba1\u5165\u4e0d\u5339\u914d\u8def\u5f84\n                if set([n] + gw_path) != set(nx_path):\n                    mismatched_paths += 1  # \u4e0d\u5339\u914d\u7684\u8def\u5f84\n                    print(f\"Mismatch for node {k} from start node {n}:\")\n                    print(f\"gw_res path: {gw_path}\")\n                    print(f\"nx_res path: {nx_path}\")\n                    print()\n\n    # \u8ba1\u7b97\u5dee\u5f02\u7387\n    if total_paths &gt; 0:\n        difference_rate = (mismatched_paths / total_paths) * 100\n        print(f\"\u603b\u5dee\u5f02\u7387: {difference_rate:.2f}%\")\n    else:\n        print(\"\u6ca1\u6709\u8def\u5f84\u8fdb\u884c\u6bd4\u8f83\uff0c\u65e0\u6cd5\u8ba1\u7b97\u5dee\u5f02\u7387\u3002\")\n\n\ndef t_multi_single_source_all(link: pd.DataFrame = None, num: int = 50):\n    n = link.sample(num)\n    n_list = list(n['from_node'].unique())\n\n    g = gw.CGraph()\n    g.add_edges([(f, t, {'l': l}) for f, t, l in zip(link['from_node'],\n                                                     link['to_node'], link['length'])])\n\n    ng = nx.DiGraph()\n    ng.add_edges_from([(f, t, {'l': l}) for f, t, l in zip(link['from_node'],\n                                                           link['to_node'], link['length'])])\n\n    # \u65f6\u95f4\u5bf9\u6bd4\n    a = time.time()\n    gw_res = g.multi_single_source_all(start_nodes=n_list, weight_name='l', num_thread=10)  # -&gt; list[dict]\n    b = time.time()\n\n    print(rf'multi_single_source: graphworkc: {b - a}')\n\n    c = time.time()\n    all_nx_res = dict()\n    for n in n_list:\n        _, nx_res = nx.single_source_dijkstra(ng, n, weight='l',)\n        all_nx_res[n] = nx_res\n    d = time.time()\n    print(rf'multi_single_source: networkx: {d - c}')\n\n    print(f\"\u65f6\u95f4\u6bd4(c++/python): {(b - a) / (d - c)}\")\n\n    # \u7ed3\u679c\u5bf9\u6bd4\n    total_paths = 0\n    mismatched_paths = 0\n\n    for i, n in enumerate(n_list):\n        print(f\"Comparing results for start node {n}:\")\n        gw_res1 = gw_res[i].paths\n        for k in all_nx_res[n].keys():\n            gw_path = gw_res1[k]  # \u83b7\u53d6\u8def\u5f84\uff0c\u5982\u679c\u6ca1\u6709\u8fd4\u56deNone\n            nx_path = all_nx_res[n].get(k, None)  # \u83b7\u53d6\u8def\u5f84\uff0c\u5982\u679c\u6ca1\u6709\u8fd4\u56deNone\n\n            total_paths += 1  # \u603b\u8def\u5f84\u6570\n\n            if gw_path is None or nx_path is None:\n                mismatched_paths += 1  # \u8fd9\u8868\u793a\u8def\u5f84\u7f3a\u5931\n                print(f\"Node {k} is missing from either gw_res or nx_res.\")\n                print(f\"gw_res for {n}: {gw_res[i]}\")\n                print(f\"nx_res for {n}: {all_nx_res[n]}\")\n                print()\n            else:\n                # \u6bd4\u8f83\u8def\u5f84\uff0c\u5982\u679c\u8def\u5f84\u4e0d\u4e00\u81f4\uff0c\u5219\u8ba1\u5165\u4e0d\u5339\u914d\u8def\u5f84\n                if set([n] + gw_path) != set(nx_path):\n                    mismatched_paths += 1  # \u4e0d\u5339\u914d\u7684\u8def\u5f84\n                    print(f\"Mismatch for node {k} from start node {n}:\")\n                    print(f\"gw_res path: {gw_path}\")\n                    print(f\"nx_res path: {nx_path}\")\n                    print()\n\n    # \u8ba1\u7b97\u5dee\u5f02\u7387\n    if total_paths &gt; 0:\n        difference_rate = (mismatched_paths / total_paths) * 100\n        print(f\"\u603b\u5dee\u5f02\u7387: {difference_rate:.2f}%\")\n    else:\n        print(\"\u6ca1\u6709\u8def\u5f84\u8fdb\u884c\u6bd4\u8f83\uff0c\u65e0\u6cd5\u8ba1\u7b97\u5dee\u5f02\u7387\u3002\")\n\n\ndef t_multi_multi_source_cost(link: pd.DataFrame = None, num: int = 50):\n    n = link.sample(num)\n    n_list = list(n['from_node'].unique())\n    n_list_list = []\n    for i in n_list:\n        n_list_list.append([i])\n\n    g = gw.CGraph()\n    g.add_edges([(f, t, {'l': l}) for f, t, l in zip(link['from_node'],\n                                                     link['to_node'], link['length'])])\n\n    ng = nx.DiGraph()\n    ng.add_edges_from([(f, t, {'l': l}) for f, t, l in zip(link['from_node'],\n                                                           link['to_node'], link['length'])])\n\n    # \u65f6\u95f4\u5bf9\u6bd4\n    a = time.time()\n    gw_res = g.multi_multi_source_cost(start_nodes=n_list_list, weight_name='l', num_thread=10)  # -&gt; list[dict]\n    b = time.time()\n\n    print(rf'multi_multi_source: graphworkc: {b - a}')\n\n    c = time.time()\n    all_nx_res = []\n    for i in range(len(n_list_list)):\n        nx_res = nx.multi_source_dijkstra_path_length(ng, n_list_list[i], weight='l',)\n        all_nx_res.append(nx_res)\n    d = time.time()\n    print(rf'multi_multi_source: networkx: {d - c}')\n\n    print(f\"\u65f6\u95f4\u6bd4(c++/python): {(b - a) / (d - c)}\")\n\n    _ = 0\n    for i, n in enumerate(n_list):\n        for k in all_nx_res[i].keys():\n            gap = gw_res[i][k] - all_nx_res[i][k]\n            _ += gap\n    print(_)\n\n\ndef t_multi_multi_source_path(link: pd.DataFrame = None, num: int = 50):\n    n = link.sample(num)\n    n_list = list(n['from_node'].unique())\n    n_list_list = []\n    for i in n_list:\n        n_list_list.append([i])\n\n    g = gw.CGraph()\n    g.add_edges([(f, t, {'l': l}) for f, t, l in zip(link['from_node'],\n                                                     link['to_node'], link['length'])])\n\n    ng = nx.DiGraph()\n    ng.add_edges_from([(f, t, {'l': l}) for f, t, l in zip(link['from_node'],\n                                                           link['to_node'], link['length'])])\n\n    # \u65f6\u95f4\u5bf9\u6bd4\n    a = time.time()\n    gw_res = g.multi_multi_source_path(start_nodes=n_list_list, weight_name='l', num_thread=10)  # -&gt; list[dict]\n    b = time.time()\n    print(rf'multi_multi_source: graphworkc: {b - a}')\n\n    c = time.time()\n    all_nx_res = []\n    for i in range(len(n_list_list)):\n        nx_res = nx.multi_source_dijkstra_path(ng, n_list_list[i], weight='l', )\n        all_nx_res.append(nx_res)\n    d = time.time()\n    print(rf'multi_multi_source: networkx: {d - c}')\n\n    print(f\"\u65f6\u95f4\u6bd4(c++/python): {(b - a) / (d - c)}\")\n\n    # \u7ed3\u679c\u5bf9\u6bd4\n    total_paths = 0\n    mismatched_paths = 0\n\n    for i, n in enumerate(n_list):\n        print(f\"Comparing results for start node {n}:\")\n\n        for k in all_nx_res[i].keys():\n            gw_path = gw_res[i][k]  # \u83b7\u53d6\u8def\u5f84\uff0c\u5982\u679c\u6ca1\u6709\u8fd4\u56deNone\n            nx_path = all_nx_res[i].get(k, None)  # \u83b7\u53d6\u8def\u5f84\uff0c\u5982\u679c\u6ca1\u6709\u8fd4\u56deNone\n\n            total_paths += 1  # \u603b\u8def\u5f84\u6570\n\n            if gw_path is None or nx_path is None:\n                mismatched_paths += 1  # \u8fd9\u8868\u793a\u8def\u5f84\u7f3a\u5931\n                print(f\"Node {k} is missing from either gw_res or nx_res.\")\n                print(f\"gw_res for {n}: {gw_res[i]}\")\n                print(f\"nx_res for {n}: {all_nx_res[i]}\")\n                print()\n            else:\n                # \u6bd4\u8f83\u8def\u5f84\uff0c\u5982\u679c\u8def\u5f84\u4e0d\u4e00\u81f4\uff0c\u5219\u8ba1\u5165\u4e0d\u5339\u914d\u8def\u5f84\n                if set([n] + gw_path) != set(nx_path):\n                    mismatched_paths += 1  # \u4e0d\u5339\u914d\u7684\u8def\u5f84\n                    print(f\"Mismatch for node {k} from start node {n}:\")\n                    print(f\"gw_res path: {gw_path}\")\n                    print(f\"nx_res path: {nx_path}\")\n                    print()\n\n    # \u8ba1\u7b97\u5dee\u5f02\u7387\n    if total_paths &gt; 0:\n        difference_rate = (mismatched_paths / total_paths) * 100\n        print(f\"\u603b\u5dee\u5f02\u7387: {difference_rate:.2f}%\")\n    else:\n        print(\"\u6ca1\u6709\u8def\u5f84\u8fdb\u884c\u6bd4\u8f83\uff0c\u65e0\u6cd5\u8ba1\u7b97\u5dee\u5f02\u7387\u3002\")\n\n\ndef t_multi_multi_source_all(link: pd.DataFrame = None, num: int = 50):\n    n = link.sample(num)\n    n_list = list(n['from_node'].unique())\n    n_list_list = []\n    for i in n_list:\n        n_list_list.append([i])\n\n    g = gw.CGraph()\n    g.add_edges([(f, t, {'l': l}) for f, t, l in zip(link['from_node'],\n                                                     link['to_node'], link['length'])])\n\n    ng = nx.DiGraph()\n    ng.add_edges_from([(f, t, {'l': l}) for f, t, l in zip(link['from_node'],\n                                                           link['to_node'], link['length'])])\n\n    # \u65f6\u95f4\u5bf9\u6bd4\n    a = time.time()\n    gw_res1 = g.multi_multi_source_all(start_nodes=n_list_list, weight_name='l', num_thread=10)  # -&gt; list[dict]\n    b = time.time()\n    print(rf'multi_multi_source: graphworkc: {b - a}')\n\n    c = time.time()\n    all_nx_res = []\n    for i in range(len(n_list_list)):\n        _, nx_res = nx.multi_source_dijkstra(ng, n_list_list[i], weight='l', )\n        all_nx_res.append(nx_res)\n    d = time.time()\n    print(rf'multi_multi_source: networkx: {d - c}')\n\n    print(f\"\u65f6\u95f4\u6bd4(c++/python): {(b - a) / (d - c)}\")\n\n    # \u7ed3\u679c\u5bf9\u6bd4\n    total_paths = 0\n    mismatched_paths = 0\n\n    for i, n in enumerate(n_list):\n        gw_res = gw_res1[i].paths\n        print(f\"Comparing results for start node {n}:\")\n\n        for k in all_nx_res[i].keys():\n            gw_path = gw_res[k]  # \u83b7\u53d6\u8def\u5f84\uff0c\u5982\u679c\u6ca1\u6709\u8fd4\u56deNone\n            nx_path = all_nx_res[i].get(k, None)  # \u83b7\u53d6\u8def\u5f84\uff0c\u5982\u679c\u6ca1\u6709\u8fd4\u56deNone\n\n            total_paths += 1  # \u603b\u8def\u5f84\u6570\n\n            if gw_path is None or nx_path is None:\n                mismatched_paths += 1  # \u8fd9\u8868\u793a\u8def\u5f84\u7f3a\u5931\n                print(f\"Node {k} is missing from either gw_res or nx_res.\")\n                print(f\"gw_res for {n}: {gw_res}\")\n                print(f\"nx_res for {n}: {all_nx_res[i]}\")\n                print()\n            else:\n                # \u6bd4\u8f83\u8def\u5f84\uff0c\u5982\u679c\u8def\u5f84\u4e0d\u4e00\u81f4\uff0c\u5219\u8ba1\u5165\u4e0d\u5339\u914d\u8def\u5f84\n                if set([n] + gw_path) != set(nx_path):\n                    mismatched_paths += 1  # \u4e0d\u5339\u914d\u7684\u8def\u5f84\n                    print(f\"Mismatch for node {k} from start node {n}:\")\n                    print(f\"gw_res path: {gw_path}\")\n                    print(f\"nx_res path: {nx_path}\")\n                    print()\n\n    # \u8ba1\u7b97\u5dee\u5f02\u7387\n    if total_paths &gt; 0:\n        difference_rate = (mismatched_paths / total_paths) * 100\n        print(f\"\u603b\u5dee\u5f02\u7387: {difference_rate:.2f}%\")\n    else:\n        print(\"\u6ca1\u6709\u8def\u5f84\u8fdb\u884c\u6bd4\u8f83\uff0c\u65e0\u6cd5\u8ba1\u7b97\u5dee\u5f02\u7387\u3002\")\n\n\ndef t_cost_matrix(link: pd.DataFrame = None, num: int = 50):\n    n = link.sample(num)\n    n_list = list(n['from_node'].unique())\n    print(len(n_list))\n    g = gw.GraphAlgorithms()\n    g.add_edges([(f, t, {'l': l}) for f, t, l in zip(link['from_node'],\n                                                     link['to_node'], link['length'])])\n\n    a = time.time()\n    cost_mat = g.cost_matrix_to_numpy(starts=n_list,\n                                      ends=n_list, weight_name='l',\n                                      num_thread=16)  # -&gt; list[dict]\n    b = time.time()\n    print(cost_mat)\n\n    print(rf'cost calc: graphworkc: {b - a}')\n    # print(cost_mat)\n    print(cost_mat.shape)\n</code></pre>"},{"location":"%E6%A1%88%E4%BE%8B%E5%B1%95%E7%A4%BA/#_6","title":"\u6d4b\u8bd5\u5bf9\u6bd4\u51fd\u6570","text":"<pre><code>t_single_source_cost(link=net)\nt_single_source_path(link=net)\n# t_single_source_all(link=net)\n# t_multi_source_cost(link=net)\n# t_multi_source_path(link=net)\n# t_multi_source_all(link=net)\nt_multi_single_source_cost(link=net, num=5)\n# t_multi_single_source_path(link=net, num=5)\n# t_multi_single_source_all(link=net, num=5)\n# t_multi_multi_source_cost(link=net, num=5)\n# t_multi_multi_source_path(link=net, num=5)\n# t_multi_multi_source_all(link=net, num=5)\n# t_cost_matrix(link=net, num=2000)\n</code></pre>"},{"location":"%E7%89%88%E6%9C%AC%E8%BF%AD%E4%BB%A3/","title":"\u7248\u672c\u8fed\u4ee3","text":""},{"location":"%E7%89%88%E6%9C%AC%E8%BF%AD%E4%BB%A3/#v116","title":"v1.1.6","text":""},{"location":"%E7%89%88%E6%9C%AC%E8%BF%AD%E4%BB%A3/#_2","title":"\u66f4\u65b0\u65e5\u671f","text":"<ul> <li>2025.03.01</li> </ul>"},{"location":"%E7%89%88%E6%9C%AC%E8%BF%AD%E4%BB%A3/#_3","title":"\u66f4\u65b0\u8bf4\u660e","text":"<ul> <li>\u4e0a\u7ebfgraphworkc\u6838\u5fc3\u529f\u80fd\u6a21\u5757\uff1a\u3000\u5355\uff08\u591a\uff09\u6e90\u6700\u77ed\u8def\u8ba1\u7b97\u7b97\u6cd5\u3000\u6210\u672c\u82b1\u8d39\u77e9\u9635\u8ba1\u7b97\u7b97\u6cd5\u3000\u6700\u77ed\u8def\u5f84\u5217\u8868\u8ba1\u7b97\u7b97\u6cd5</li> </ul>"},{"location":"%E7%89%88%E6%9C%AC%E8%BF%AD%E4%BB%A3/#v117","title":"v1.1.7","text":""},{"location":"%E7%89%88%E6%9C%AC%E8%BF%AD%E4%BB%A3/#_4","title":"\u66f4\u65b0\u65e5\u671f","text":"<ul> <li>2025.03.05</li> </ul>"},{"location":"%E7%89%88%E6%9C%AC%E8%BF%AD%E4%BB%A3/#_5","title":"\u66f4\u65b0\u8bf4\u660e","text":"<ul> <li>\u65b0\u589e\u51fd\u6570\uff1a set_centroid(s)\uff0c\u652f\u6301\u5c06\u56fe\u5185\u7684\u70b9\u8bbe\u7f6e\u4e3a\u5f62\u5fc3\u70b9</li> <li>\u4fee\u6539\u51fd\u6570\uff1a get_graph_info \u51fd\u6570\u5c06\u8fd4\u56de\u5c5e\u6027\u5b57\u5178</li> <li>\u4fee\u6539\u51fd\u6570\uff1a get_node_info \u51fd\u6570\u5c06\u8fd4\u56de\u5c5e\u6027\u5b57\u5178</li> <li>\u4fee\u6539\u51fd\u6570\uff1a get_link_info \u51fd\u6570\u5c06\u8fd4\u56de\u5c5e\u6027\u5b57\u5178</li> <li>\u4fee\u6539\u51fd\u6570\uff1a add_edge \u51fd\u6570\u53d6\u6d88\u6dfb\u52a0\u5f62\u5fc3\u70b9\u673a\u5236</li> <li>\u4fee\u6539\u51fd\u6570\uff1a add_edges \u51fd\u6570\u53d6\u6d88\u6dfb\u52a0\u5f62\u5fc3\u70b9\u673a\u5236</li> <li>bug\u4fee\u590d\uff1a     1\u3001\u4fee\u590d\u4e86 cost_matrix_to_numpy\u53ca\u5176\u4ed6\u5355\uff08\u591a\uff09\u6e90\u51fd\u6570\u5728\u4e0d\u8f93\u5165weight_name\u53c2\u6570\u65f6\u8fd4\u56de\u5f02\u5e38\u7684\u95ee\u9898      2\u3001\u4fee\u590d\u4e86 add_edges\u5728\u5143\u7ec4\u5185\u5143\u7d20\u4e3a\u4e09\u4e2a\uff08\u6b63\u786e\u8f93\u5165\u683c\u5f0f\uff09\u65f6\u7f16\u8bd1\u5668\u62a5\u9ec4\u8272\u8b66\u544a\u7684\u95ee\u9898</li> </ul>"},{"location":"%E7%89%88%E6%9C%AC%E8%BF%AD%E4%BB%A3/#v118","title":"v1.1.8","text":""},{"location":"%E7%89%88%E6%9C%AC%E8%BF%AD%E4%BB%A3/#_6","title":"\u66f4\u65b0\u65e5\u671f","text":"<ul> <li>2025.03.13</li> </ul>"},{"location":"%E7%89%88%E6%9C%AC%E8%BF%AD%E4%BB%A3/#_7","title":"\u66f4\u65b0\u8bf4\u660e","text":"<ul> <li>\u65b0\u589e\u51fd\u6570\uff1ashortest_paths\uff0c \u652f\u6301\u5bfb\u627e\u4ece\u8d77\u70b9\u5230\u76ee\u6807\u8282\u70b9\u7684K\u6761\u6700\u77ed\u8def\u5f84</li> <li>\u6027\u80fd\u4f18\u5316\uff1a\u5355\uff08\u591a\uff09\u6e90\u6700\u77ed\u8def\u6dfb\u52a0\u6743\u91cd\u9884\u5904\u7406\u673a\u5236\uff0c\u5728\u6743\u91cd\u5df2\u7ecf\u9884\u8f93\u5165\u7684\u60c5\u51b5\u4e0b\uff0c\u7b97\u6cd5\u6548\u7387\u5c06\u63d0\u5347\u4e00\u500d</li> <li>\u51fd\u6570\u8bf4\u660e\u66f4\u65b0\uff1a\u66f4\u6539\u90e8\u5206\u51fd\u6570\u9519\u8bef\u8bf4\u660e</li> </ul>"},{"location":"%E7%89%88%E6%9C%AC%E8%BF%AD%E4%BB%A3/#v119","title":"v1.1.9","text":""},{"location":"%E7%89%88%E6%9C%AC%E8%BF%AD%E4%BB%A3/#_8","title":"\u66f4\u65b0\u65e5\u671f","text":"<ul> <li>2025.03.13</li> </ul>"},{"location":"%E7%89%88%E6%9C%AC%E8%BF%AD%E4%BB%A3/#_9","title":"\u66f4\u65b0\u8bf4\u660e","text":"<ul> <li>\u4fee\u6539\u51fd\u6570\uff1apath_list_to_numpy\u6539\u540d\u4e3apath_list_to_dict\uff1b </li> </ul>"},{"location":"%E7%89%88%E6%9C%AC%E8%BF%AD%E4%BB%A3/#v120","title":"v1.2.0","text":""},{"location":"%E7%89%88%E6%9C%AC%E8%BF%AD%E4%BB%A3/#_10","title":"\u66f4\u65b0\u65e5\u671f","text":"<ul> <li>2025.03.18</li> </ul>"},{"location":"%E7%89%88%E6%9C%AC%E8%BF%AD%E4%BB%A3/#_11","title":"\u66f4\u65b0\u8bf4\u660e","text":"<ul> <li>\u4fee\u6539\u51fd\u6570\uff1ashortest_paths\u6539\u540d\u4e3ak_shortest_paths\uff1b </li> <li>\u65b0\u589e\u51fd\u6570\uff1ashortest_path_cost\uff0c\u652f\u6301\u8f93\u5165\u5355\u4e2aOD\u5bf9\u83b7\u53d6\u6700\u77ed\u8def\u5f84\u7684\u82b1\u8d39\uff1b</li> <li>\u65b0\u589e\u51fd\u6570\uff1ashortest_path_path\uff0c\u652f\u6301\u8f93\u5165\u5355\u4e2aOD\u5bf9\u83b7\u53d6\u6700\u77ed\u8def\u5f84\u7684\u8def\u5f84\u5e8f\u5217\uff1b</li> <li>\u65b0\u589e\u51fd\u6570\uff1ashortest_path_all\uff0c\u652f\u6301\u8f93\u5165\u5355\u4e2aOD\u5bf9\u83b7\u53d6\u6700\u77ed\u8def\u5f84\u7684\u82b1\u8d39\u548c\u8def\u5f84\u5e8f\u5217\uff1b</li> <li>\u9002\u5e94\u7cfb\u7edf\u73af\u5883\u589e\u52a0\uff1a\u652f\u6301Linux\u4e0a\u7684python3.\uff19\uff0d3.11\u73af\u5883\u4e0b\u8f7d\u4f7f\u7528\u672cpython\u5305\uff1b</li> </ul>"},{"location":"%E7%89%88%E6%9C%AC%E8%BF%AD%E4%BB%A3/#v121","title":"v1.2.1","text":""},{"location":"%E7%89%88%E6%9C%AC%E8%BF%AD%E4%BB%A3/#_12","title":"\u66f4\u65b0\u65e5\u671f","text":"<ul> <li>2025.03.27</li> </ul>"},{"location":"%E7%89%88%E6%9C%AC%E8%BF%AD%E4%BB%A3/#_13","title":"\u66f4\u65b0\u8bf4\u660e","text":"<ul> <li> <p>\u4fee\u6539\u51fd\u6570\u540d\u79f0\uff1acost_matrix_to_numpy\u6539\u540d\u4e3acost_matrix\uff1b</p> </li> <li> <p>\u4fee\u6539\u51fd\u6570\u540d\u79f0\uff1apath_list_to_dict\u6539\u540d\u4e3apath_dict\uff1b</p> </li> <li> <p>\u65b0\u589e\u51fd\u6570\uff1apath_dict_pairwise\uff0c\u53ef\u4ee5\u4e00\u4e00\u5bf9\u5e94\u7684\u83b7\u53d6\u6bcf\u4e2aOD\u5bf9\u7684\u8def\u5f84\uff1b</p> </li> <li> <p>\u51fd\u6570\u4f18\u5316\uff1acost_matrix\uff1a\u6dfb\u52a0\u6743\u91cd\u9884\u5904\u7406\uff0c\u53cc\u5411Dijkstra\u5b9a\u5411\u641c\u7d22\uff1b</p> </li> <li> <p>\u6027\u80fd\u4f18\u5316\uff1a</p> </li> </ul> <p>\u200b 1\u3001\u63d0\u5347\u5e95\u5c42\u7b97\u6cd5multi_source_dijkstra_cost\u7684\u8ba1\u7b97\u6027\u80fd\uff0c\u63d0\u5347\u81f3\u4e0a\u4e00\u7248\u672c\u76842-3\u500d\uff1b</p> <p>\u200b 2\u3001\u4f18\u5316\u591a\u7ebf\u7a0b\u4f7f\u7528\uff0c\u591a\u7ebf\u7a0b\u521b\u5efa\u9500\u6bc1\u53ea\u8fdb\u884c\u4e00\u6b21\uff1b</p> <ul> <li>bug\u4fee\u590d\uff1a</li> </ul> <p>\u200b 1\u3001\u4fee\u590dremove_edge\u90e8\u5206\u6570\u636e\u7ed3\u6784\u6ca1\u6709\u76f8\u5e94\u66f4\u6539\u7684\u95ee\u9898\uff1b</p>"},{"location":"%E7%89%88%E6%9C%AC%E8%BF%AD%E4%BB%A3/#v122","title":"v1.2.2","text":""},{"location":"%E7%89%88%E6%9C%AC%E8%BF%AD%E4%BB%A3/#_14","title":"\u66f4\u65b0\u65e5\u671f","text":"<ul> <li>2025.05.09</li> </ul>"},{"location":"%E7%89%88%E6%9C%AC%E8%BF%AD%E4%BB%A3/#_15","title":"\u66f4\u65b0\u8bf4\u660e","text":"<ul> <li>\u5de5\u7a0b\u4f18\u5316\uff1a     1\u3001\u5de5\u7a0b\u4ee3\u7801\u7c7b\u7ed3\u6784\u4f18\u5316\uff1a         CGraphBase\u7c7b\uff1a\u56fe\u7684\u589e\u5220\u6539\u67e5         GraphAlgorithms\u7c7b\uff1a\u6838\u5fc3\u7b97\u6cd5\u7684\u5b9e\u73b0         GraphAlgorithmsInterface\u7c7b\uff1a\u6838\u5fc3\u7b97\u6cd5\u7684\u8c03\u7528</li> <li> <p>bug\u4fee\u590d\uff1a</p> <p>1\u3001\u4fee\u590dremove_edge\u51fd\u6570\u65e0\u6cd5\u6210\u529f\u5220\u9664\u8fb9\u7684\u95ee\u9898\uff1b</p> </li> </ul>"},{"location":"Fun%26API/CGraphBase/","title":"CGraphBase","text":"Source code in <code>src\\graphworkc.py</code> <pre><code>def __init__(self):\n    # \u521b\u5efa C++ \u56fe\u7b97\u6cd5\u5bf9\u8c61\n    self.graph = graphwork.GraphTrackit()\n</code></pre> <p>\u7c7b\u65b9\u6cd5 - get_graph_info:  - \u83b7\u53d6\u56fe\u4fe1\u606f</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>\u8fd4\u56de\u5f53\u524d\u56fe\u7684\u76f8\u5173\u5c5e\u6027</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def get_graph_info(self) -&gt; dict:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - get_graph_info:** &lt;br&gt;\n    - \u83b7\u53d6\u56fe\u4fe1\u606f\n\n    Returns:\n          dict: \u8fd4\u56de\u5f53\u524d\u56fe\u7684\u76f8\u5173\u5c5e\u6027\n    \"\"\"\n    result = self.graph.get_graph_info()\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - get_node_info:  - \u83b7\u53d6\u8282\u70b9\u4fe1\u606f</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>\u8282\u70b9\u7684\u6807\u8bc6\u7b26\u3002\u5fc5\u987b\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u56fe\u4e2d\u8282\u70b9\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u201cid\u201d\u4e0d\u662f\u6574\u6570\u3002</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>\u8fd4\u56de\u5f53\u524d\u8282\u70b9\u7684\u76f8\u5173\u5c5e\u6027</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def get_node_info(self,\n                  id: int) -&gt; dict:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - get_node_info:** &lt;br&gt;\n    - \u83b7\u53d6\u8282\u70b9\u4fe1\u606f\n\n    Args:\n        id (int): \u8282\u70b9\u7684\u6807\u8bc6\u7b26\u3002\u5fc5\u987b\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u56fe\u4e2d\u8282\u70b9\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002\n\n    Raises:\n        ValueError: \u5982\u679c\u201cid\u201d\u4e0d\u662f\u6574\u6570\u3002\n\n    Returns:\n          dict: \u8fd4\u56de\u5f53\u524d\u8282\u70b9\u7684\u76f8\u5173\u5c5e\u6027\n    \"\"\"\n    # \u786e\u4fdd id \u662f\u6709\u6548\u7684\u8282\u70b9\uff08\u5047\u8bbe\u5b83\u4eec\u662f\u6574\u6570\uff09\n    if not isinstance(id, int):\n        raise ValueError(f\"Invalid value for 'start': {start}. It must be an integer.\")\n\n    result = self.graph.get_node_info(id)\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - get_link_info:  - \u83b7\u53d6\u8fb9\u4fe1\u606f</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>int</code> <p>\u8fb9\u7684\u8d77\u59cb\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> required <code>end</code> <code>int</code> <p>\u8fb9\u7684\u7ed3\u675f\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u201cstart\u201d\u6216\u201cend\u201d\u4e0d\u662f\u6574\u6570\u3002</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>\u8fd4\u56de\u5f53\u524d\u8fb9\u7684\u76f8\u5173\u5c5e\u6027</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def get_link_info(self,\n                  start: int,\n                  end: int) -&gt; dict:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - get_link_info:** &lt;br&gt;\n    - \u83b7\u53d6\u8fb9\u4fe1\u606f\n\n    Args:\n        start (int): \u8fb9\u7684\u8d77\u59cb\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n        end (int): \u8fb9\u7684\u7ed3\u675f\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Raises:\n        ValueError: \u5982\u679c\u201cstart\u201d\u6216\u201cend\u201d\u4e0d\u662f\u6574\u6570\u3002\n\n    Returns:\n          dict: \u8fd4\u56de\u5f53\u524d\u8fb9\u7684\u76f8\u5173\u5c5e\u6027\n    \"\"\"\n    # \u786e\u4fdd start \u548c end \u662f\u6709\u6548\u7684\u8282\u70b9\uff08\u5047\u8bbe\u5b83\u4eec\u662f\u6574\u6570\uff09\n    if not isinstance(start, int):\n        raise ValueError(f\"Invalid value for 'start': {start}. It must be an integer.\")\n\n    if not isinstance(end, int):\n        raise ValueError(f\"Invalid value for 'end': {end}. It must be an integer.\")\n\n    result = self.graph.get_link_info(start, end)\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - add_edge:  - \u52a0\u4e00\u6761\u8fb9</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>int</code> <p>\u8fb9\u7684\u8d77\u59cb\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> required <code>end</code> <code>int</code> <p>\u8fb9\u7684\u7ed3\u675f\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u6216\u6d6e\u70b9\u6570\u3002</p> required <code>attribute_dict</code> <code>dict</code> <p>\u5305\u542b\u8fb9\u7f18\u5c5e\u6027\u7684\u5b57\u5178\uff0c\u4f8b\u5982\u6743\u91cd\u6216\u5176\u4ed6\u5c5e\u6027\u3002</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u201cstart\u201d\u6216\u201cend\u201d\u4e0d\u662f\u6574\u6570\u6216\u6d6e\u70b9\u6570\u3002</p> <code>ValueError</code> <p>\u5982\u679c\u201cattribute_dict_\u201d\u4e0d\u662f\u5b57\u5178\u3002</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def add_edge(self,\n             start: int,\n             end: int,\n             attribute_dict: dict = None) -&gt; None:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - add_edge:**&lt;br&gt;\n     - \u52a0\u4e00\u6761\u8fb9\n\n    Args:\n        start (int): \u8fb9\u7684\u8d77\u59cb\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n        end (int): \u8fb9\u7684\u7ed3\u675f\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u6216\u6d6e\u70b9\u6570\u3002\n        attribute_dict (dict): \u5305\u542b\u8fb9\u7f18\u5c5e\u6027\u7684\u5b57\u5178\uff0c\u4f8b\u5982\u6743\u91cd\u6216\u5176\u4ed6\u5c5e\u6027\u3002\n\n    Raises:\n        ValueError: \u5982\u679c\u201cstart\u201d\u6216\u201cend\u201d\u4e0d\u662f\u6574\u6570\u6216\u6d6e\u70b9\u6570\u3002\n        ValueError: \u5982\u679c\u201cattribute_dict_\u201d\u4e0d\u662f\u5b57\u5178\u3002\n    \"\"\"\n    if 1:\n        # \u53c2\u6570\u68c0\u67e5\uff1a\u786e\u4fdd start \u548c v_ \u662f\u6709\u6548\u7684\u8282\u70b9\uff08\u5047\u8bbe\u5b83\u4eec\u662f\u6574\u6570\uff09\n        if not isinstance(start, int):\n            raise ValueError(f\"Invalid value for 'start': {start}. It must be an integer.\")\n\n        if not isinstance(end, int):\n            raise ValueError(f\"Invalid value for 'end': {end}. It must be an integer.\")\n\n        # \u521d\u59cb\u5316\u7a7a\u5b57\u5178\n        if attribute_dict is None:\n            attribute_dict = {}\n\n        # \u53c2\u6570\u7c7b\u578b\u68c0\u67e5\n        if not isinstance(attribute_dict, dict):\n            raise ValueError(f\"attribute_dict\u5fc5\u987b\u662f\u5b57\u5178\u7c7b\u578b\uff0c\u5f53\u524d\u7c7b\u578b\uff1a{type(attribute_dict)}\")\n\n    # \u5047\u8bbe self.graph \u662f\u4e00\u4e2a\u5df2\u5b9a\u4e49\u7684\u56fe\u5bf9\u8c61\n    self.graph.add_edge(start, end, attribute_dict)\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - add_edges: - \u52a0\u591a\u6761\u8fb9</p> <p>Parameters:</p> Name Type Description Default <code>edges</code> <code>list of tuple</code> <p>\u8981\u6dfb\u52a0\u7684\u8fb9\u5217\u8868\u3002\u6bcf\u6761\u8fb9\u90fd\u5e94\u8be5\u662f\u4e00\u4e2a\u5143\u7ec4\u3002</p> required <code>containing</code> <code>three elements</code> <ul> <li>start (int): \u8fb9\u7684\u8d77\u59cb\u8282\u70b9\u3002</li> <li>end (int): \u8fb9\u7684\u7ed3\u675f\u8282\u70b9\u3002</li> <li>attribute_dict_ (dict): \u4e00\u4e2a\u5305\u542b\u8fb9\u7f18\u5c5e\u6027\u7684\u5b57\u5178\uff0c\u4f8b\u5982\u6743\u91cd\u6216\u5176\u4ed6\u5c5e\u6027\u3002\uff08\u53ef\u9009\uff09</li> </ul> required <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u201c\u8fb9\u201d\u4e0d\u662f\u5217\u8868\u3002</p> <code>ValueError</code> <p>\u5982\u679cedges\u4e2d\u7684\u4efb\u4f55\u5143\u7d20\u4e0d\u662f\u5143\u7ec4\u3002</p> <code>ValueError</code> <p>\u5982\u679c\u4efb\u4f55\u5143\u7ec4\u90fd\u6ca1\u67092-3\u4e2a\u5143\u7d20\u3002</p> <code>ValueError</code> <p>\u5982\u679c\u201cstart\u201d\u6216\u201cend\u201d\u4e0d\u662f\u6574\u6570\u3002</p> <code>ValueError</code> <p>\u5982\u679c\u201cattribute_dict_\u201d\u4e0d\u662f\u5b57\u5178\u3002</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def add_edges(self,\n              edges: list[tuple]) -&gt; None:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - add_edges:**&lt;br&gt;\n     - \u52a0\u591a\u6761\u8fb9\n\n     Args:\n         edges (list of tuple): \u8981\u6dfb\u52a0\u7684\u8fb9\u5217\u8868\u3002\u6bcf\u6761\u8fb9\u90fd\u5e94\u8be5\u662f\u4e00\u4e2a\u5143\u7ec4\u3002\n         containing three elements:\n             - start (int): \u8fb9\u7684\u8d77\u59cb\u8282\u70b9\u3002\n             - end (int): \u8fb9\u7684\u7ed3\u675f\u8282\u70b9\u3002\n             - attribute_dict_ (dict): \u4e00\u4e2a\u5305\u542b\u8fb9\u7f18\u5c5e\u6027\u7684\u5b57\u5178\uff0c\u4f8b\u5982\u6743\u91cd\u6216\u5176\u4ed6\u5c5e\u6027\u3002\uff08\u53ef\u9009\uff09\n\n     Raises:\n         ValueError: \u5982\u679c\u201c\u8fb9\u201d\u4e0d\u662f\u5217\u8868\u3002\n         ValueError: \u5982\u679cedges\u4e2d\u7684\u4efb\u4f55\u5143\u7d20\u4e0d\u662f\u5143\u7ec4\u3002\n         ValueError: \u5982\u679c\u4efb\u4f55\u5143\u7ec4\u90fd\u6ca1\u67092-3\u4e2a\u5143\u7d20\u3002\n         ValueError: \u5982\u679c\u201cstart\u201d\u6216\u201cend\u201d\u4e0d\u662f\u6574\u6570\u3002\n         ValueError: \u5982\u679c\u201cattribute_dict_\u201d\u4e0d\u662f\u5b57\u5178\u3002\n     \"\"\"\n    if 1:\n        # \u786e\u4fdd edges \u662f\u4e00\u4e2a\u5217\u8868\n        if not isinstance(edges, list):\n            raise ValueError(f\"Expected 'edges' to be a list, but got {type(edges)}.\")\n\n        # \u904d\u5386\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u786e\u4fdd\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u5e76\u4e14\u6709\u4e09\u4e2a\u5143\u7d20\n        for edge in edges:\n            if not isinstance(edge, tuple):\n                raise ValueError(f\"Each element in 'edges' should be a tuple, but got {type(edge)}.\")\n\n            if len(edge) &lt; 2 or len(edge) &gt; 3:\n                raise ValueError(f\"Each tuple in 'edges' should have exactly 2-4 elements, but got {len(edge)}.\")\n\n            # \u68c0\u67e5 start \u548c end \u662f\u5426\u662f\u6709\u6548\u7684\u8282\u70b9\uff08\u4f8b\u5982\u6574\u6570\u6216\u5b57\u7b26\u4e32\uff09\n            start = edge[0]\n            end = edge[1]\n            attribute_dict_ = {}\n            if len(edge) == 3:\n                attribute_dict_ = edge[2]\n\n            # \u68c0\u67e5 start end \u662f\u5426\u4e3a\u6574\u6570\n            if not isinstance(start, int):\n                raise ValueError(f\"Expected 'start' to be an integer, but got {type(start)}.\")\n            if not isinstance(end, int):\n                raise ValueError(f\"Expected 'end' to be an integer, but got {type(end)}.\")\n            # \u68c0\u67e5 attribute_dict_ \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u5178\n            if not isinstance(attribute_dict_, dict):\n                raise ValueError(f\"Expected 'attribute_dict_' to be a dictionary, but got {type(attribute_dict_)}.\")\n\n    # \u5982\u679c\u6240\u6709\u68c0\u67e5\u901a\u8fc7\uff0c\u8c03\u7528 graph.add_edges\n    self.graph.add_edges(edges)\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - remove_edge:  - \u79fb\u9664\u4e00\u6761\u8fb9</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>int</code> <p>\u8fb9\u7684\u8d77\u59cb\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> required <code>end</code> <code>int</code> <p>\u8fb9\u7684\u7ed3\u675f\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u201cstart\u201d\u6216\u201cend\u201d\u4e0d\u662f\u6574\u6570\u3002</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def remove_edge(self,\n                start: int,\n                end: int) -&gt; None:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - remove_edge:**&lt;br&gt;\n     - \u79fb\u9664\u4e00\u6761\u8fb9\n\n    Args:\n        start (int): \u8fb9\u7684\u8d77\u59cb\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n        end (int): \u8fb9\u7684\u7ed3\u675f\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Raises:\n        ValueError: \u5982\u679c\u201cstart\u201d\u6216\u201cend\u201d\u4e0d\u662f\u6574\u6570\u3002\n    \"\"\"\n    # \u53c2\u6570\u68c0\u67e5\uff1a\u786e\u4fdd start \u548c v_ \u662f\u6709\u6548\u7684\u8282\u70b9\uff08\u5047\u8bbe\u5b83\u4eec\u662f\u6574\u6570\uff09\n    if not isinstance(start, int):\n        raise ValueError(f\"Invalid value for 'start': {start}. It must be an integer.\")\n\n    if not isinstance(end, int):\n        raise ValueError(f\"Invalid value for 'end': {end}. It must be an integer.\")\n\n    self.graph.remove_edge(start, end)\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - remove_edges\uff1a  - \u79fb\u9664\u591a\u6761\u8fb9</p> <p>Parameters:</p> Name Type Description Default <code>edges</code> <code>list of tuples</code> <p>\u8981\u5220\u9664\u7684\u8fb9\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u6761\u8fb9\u8868\u793a\u4e3a\u4e24\u4e2a\u6574\u6570\u7684\u5143\u7ec4                     \uff08\u5f00\u59cb\u3001\u7ed3\u675f\uff09\u8868\u793a\u8fb9\u7684\u8282\u70b9\u3002</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679cedges\u4e0d\u662f\u5217\u8868\u3002</p> <code>ValueError</code> <p>\u5982\u679cedges\u4e2d\u7684\u4efb\u4f55\u5143\u7d20\u4e0d\u662f\u5143\u7ec4\u6216\u4e0d\u5305\u542b\u6b63\u597d\u6709\u4e24\u4e2a\u5143\u7d20\u3002</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def remove_edges(self,\n                 edges: list[tuple[int, int]]) -&gt; None:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - remove_edges\uff1a**&lt;br&gt;\n     - \u79fb\u9664\u591a\u6761\u8fb9\n\n    Args:\n        edges (list of tuples): \u8981\u5220\u9664\u7684\u8fb9\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u6761\u8fb9\u8868\u793a\u4e3a\u4e24\u4e2a\u6574\u6570\u7684\u5143\u7ec4\n                                \uff08\u5f00\u59cb\u3001\u7ed3\u675f\uff09\u8868\u793a\u8fb9\u7684\u8282\u70b9\u3002\n\n    Raises:\n        ValueError: \u5982\u679cedges\u4e0d\u662f\u5217\u8868\u3002\n        ValueError: \u5982\u679cedges\u4e2d\u7684\u4efb\u4f55\u5143\u7d20\u4e0d\u662f\u5143\u7ec4\u6216\u4e0d\u5305\u542b\u6b63\u597d\u6709\u4e24\u4e2a\u5143\u7d20\u3002\n    \"\"\"\n    if 1:\n        # \u786e\u4fdd edges \u662f\u4e00\u4e2a\u5217\u8868\n        if not isinstance(edges, list):\n            raise ValueError(f\"Expected 'edges' to be a list, but got {type(edges)}.\")\n\n        # \u904d\u5386\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u786e\u4fdd\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u5e76\u4e14\u6709\u4e09\u4e2a\u5143\u7d20\n        for edge in edges:\n            if not isinstance(edge, tuple):\n                raise ValueError(f\"Each element in 'edges' should be a tuple, but got {type(edge)}.\")\n\n            if len(edge) != 2:\n                raise ValueError(f\"Each tuple in 'edges' should have exactly 2 elements, but got {len(edge)}.\")\n\n    self.graph.remove_edges(edges)\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - set_centroid:  - \u5c06\u4e00\u4e2a\u8282\u70b9\u4fee\u6539\u4e3a\u5f62\u5fc3\u70b9</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>int</code> <p>\u8981\u4fee\u6539\u7684\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u201cnode\u201d\u4e0d\u662f\u6574\u6570\u3002</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def set_centroid(self,\n                 node: int) -&gt; None:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - set_centroid:** &lt;br&gt;\n    - \u5c06\u4e00\u4e2a\u8282\u70b9\u4fee\u6539\u4e3a\u5f62\u5fc3\u70b9\n\n    Args:\n        node (int): \u8981\u4fee\u6539\u7684\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Raises:\n        ValueError: \u5982\u679c\u201cnode\u201d\u4e0d\u662f\u6574\u6570\u3002\n    \"\"\"\n    # \u786e\u4fdd node \u662f\u6709\u6548\u7684\u8282\u70b9\uff08\u5047\u8bbe\u5b83\u4eec\u662f\u6574\u6570\uff09\n    if not isinstance(node, int):\n        raise ValueError(f\"Invalid value for 'start': {node}. It must be an integer.\")\n\n    self.graph.set_centroid(node)\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - set_centroids:  - \u5c06\u591a\u4e2a\u8282\u70b9\u4fee\u6539\u4e3a\u5f62\u5fc3\u70b9</p> <p>Parameters:</p> Name Type Description Default <code>nodes</code> <code>list[int]</code> <p>\u8981\u4fee\u6539\u7684\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u201cnodes\u201d\u4e0d\u662f\u5217\u8868\u3002</p> <code>ValueError</code> <p>\u5982\u679c\u201cnode\u201d\u4e0d\u662f\u6574\u6570\u3002</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def set_centroids(self,\n                 nodes: list[int]) -&gt; None:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - set_centroids:** &lt;br&gt;\n    - \u5c06\u591a\u4e2a\u8282\u70b9\u4fee\u6539\u4e3a\u5f62\u5fc3\u70b9\n\n    Args:\n        nodes (list[int]): \u8981\u4fee\u6539\u7684\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Raises:\n        ValueError: \u5982\u679c\u201cnodes\u201d\u4e0d\u662f\u5217\u8868\u3002\n        ValueError: \u5982\u679c\u201cnode\u201d\u4e0d\u662f\u6574\u6570\u3002\n    \"\"\"\n    # \u786e\u4fdd nodes \u662f\u4e00\u4e2a\u5217\u8868\n    if not isinstance(nodes, list):\n        raise ValueError(f\"Expected 'nodes' to be a list, but got {type(nodes)}.\")\n    # \u786e\u4fdd node \u662f\u6709\u6548\u7684\u8282\u70b9\uff08\u5047\u8bbe\u5b83\u4eec\u662f\u6574\u6570\uff09\n    for node in nodes:\n        if not isinstance(node, int):\n            raise ValueError(f\"Invalid value for 'node': {node}. It must be an integer.\")\n\n    self.graph.set_centroids(nodes)\n</code></pre>"},{"location":"Fun%26API/GraphAlgorithms/","title":"GraphAlgorithms","text":"<p>\u7c7b\u65b9\u6cd5 - multi_source_cost\uff1a  - \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff1a\u8fd4\u56de\u6700\u5c11\u82b1\u8d39</p> <p>Parameters:</p> Name Type Description Default <code>start_nodes</code> <code>list</code> <p>\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4e00\u4e2a\u8d77\u70b9\u8282\u70b9\u3002</p> required <code>method</code> <code>str</code> <p>\u7528\u4e8e\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u5b83\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a -\u201cDijkstra\u201d\uff1a\u6807\u51c6Dijkstra\u7b97\u6cd5\u3002 \u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>target</code> <code>int</code> <p>\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a-1\uff0c\u5219\u8868\u793a\u6ca1\u6709\u7279\u5b9a\u76ee\u6807\u3002</p> <code>-1</code> <code>cut_off</code> <code>float</code> <p>\u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\u9650\u5236\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u503c\u7684\u8def\u5f84\u90fd\u5c06\u88ab\u5ffd\u7565\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u56fe\u4e2d\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8fb9\u6743\u91cd\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3aNone\u3002</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[int, float]</code> <p>dict[int, float]: \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u82b1\u8d39\u7ed3\u679c\uff0c\u952e\u4e3a\u76ee\u6807\u8282\u70b9\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u82b1\u8d39</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u8fdd\u53cd\u4e86\u4ee5\u4e0b\u4efb\u4f55\u4e00\u9879\uff1a -\u201cstart_nodes\u201d\u4e0d\u662f\u5217\u8868\u3002 -\u201cmethod\u201d\u4e0d\u662f\u6709\u6548\u7684\u7b97\u6cd5\u4e4b\u4e00\uff1a\u201cDijkstra\u201d\u3002 -\u201ctarget\u201d\u4e0d\u662f\u6574\u6570\u3002 -\u201ccut_off\u201d\u4e0d\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u4e0d\u662f\u5b57\u7b26\u4e32\u3002</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def multi_source_cost(self,\n                      start_nodes: list[int],\n                      method: str = \"Dijkstra\",\n                      target: int = -1,\n                      cut_off: float = float('inf'),\n                      weight_name: str = None) -&gt; dict[int, float]:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - multi_source_cost\uff1a**&lt;br&gt;\n       - \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff1a\u8fd4\u56de\u6700\u5c11\u82b1\u8d39\n\n      Args:\n          start_nodes (list): \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4e00\u4e2a\u8d77\u70b9\u8282\u70b9\u3002\n          method (str): \u7528\u4e8e\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u5b83\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a\n              -\u201cDijkstra\u201d\uff1a\u6807\u51c6Dijkstra\u7b97\u6cd5\u3002\n              \u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n          target (int): \u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a-1\uff0c\u5219\u8868\u793a\u6ca1\u6709\u7279\u5b9a\u76ee\u6807\u3002\n          cut_off (float): \u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\u9650\u5236\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u503c\u7684\u8def\u5f84\u90fd\u5c06\u88ab\u5ffd\u7565\u3002\n          weight_name (str): \u56fe\u4e2d\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8fb9\u6743\u91cd\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3aNone\u3002\n\n      Returns:\n          dict[int, float]: \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u82b1\u8d39\u7ed3\u679c\uff0c\u952e\u4e3a\u76ee\u6807\u8282\u70b9\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u82b1\u8d39\n\n      Raises:\n          ValueError: \u5982\u679c\u8fdd\u53cd\u4e86\u4ee5\u4e0b\u4efb\u4f55\u4e00\u9879\uff1a&lt;br&gt;\n              -\u201cstart_nodes\u201d\u4e0d\u662f\u5217\u8868\u3002&lt;br&gt;\n              -\u201cmethod\u201d\u4e0d\u662f\u6709\u6548\u7684\u7b97\u6cd5\u4e4b\u4e00\uff1a\u201cDijkstra\u201d\u3002&lt;br&gt;\n              -\u201ctarget\u201d\u4e0d\u662f\u6574\u6570\u3002&lt;br&gt;\n              -\u201ccut_off\u201d\u4e0d\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n              -\u201cweight_name\u201d\u4e0d\u662f\u5b57\u7b26\u4e32\u3002\n      \"\"\"\n    if 1:\n        # \u68c0\u67e5 start_nodes \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n        if not isinstance(start_nodes, list):\n            raise ValueError(f\"Invalid value for 'start_nodes': {start_nodes}. It must be a list.\")\n\n        # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n        valid_methods = [\"Dijkstra\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n        if method not in valid_methods:\n            raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n        # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(target, int):\n            raise ValueError(f\"Invalid value for 'target': {target}. It must be an integer.\")\n\n        # \u68c0\u67e5 cut_off \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6570\n        if not isinstance(cut_off, (int, float)) or cut_off &lt; 0:\n            raise ValueError(f\"Invalid value for 'cut_off': {cut_off}. It must be a non-negative number.\")\n\n        # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216 None\n        if weight_name is not None and not isinstance(weight_name, str):\n            raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be either a string or None.\")\n\n    if weight_name is None:\n        weight_name = \"\"\n    result = self.graph.multi_source_cost(start_nodes, method, target, cut_off, weight_name)\n\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - multi_source_path\uff1a  - \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff1a\u8fd4\u56de\u5e8f\u5217\u8def\u5f84</p> <p>Parameters:</p> Name Type Description Default <code>start_nodes</code> <code>list[int]</code> <p>\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4e00\u4e2a\u8d77\u70b9\u8282\u70b9\u3002</p> required <code>method</code> <code>str</code> <p>\u7528\u4e8e\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u5b83\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a -\u201cDijkstra\u201d\uff1a\u6807\u51c6Dijkstra\u7b97\u6cd5\u3002 \u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>target</code> <code>int</code> <p>\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a-1\uff0c\u5219\u8868\u793a\u6ca1\u6709\u7279\u5b9a\u76ee\u6807\u3002</p> <code>-1</code> <code>cut_off</code> <code>float</code> <p>\u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\u9650\u5236\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u503c\u7684\u8def\u5f84\u90fd\u5c06\u88ab\u5ffd\u7565\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u56fe\u4e2d\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8fb9\u6743\u91cd\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3aNone\u3002</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[int, list[int]]</code> <p>dict[int, list[int]]: \u8fd4\u56de\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c \u952e\u4e3a\u76ee\u6807\u8282\u70b9\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u5e8f\u5217\u8def\u5f84</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u8fdd\u53cd\u4e86\u4ee5\u4e0b\u4efb\u4f55\u4e00\u9879\uff1a -\u201cstart_nodes\u201d\u4e0d\u662f\u5217\u8868\u3002 -\u201cmethod\u201d\u4e0d\u662f\u6709\u6548\u7684\u7b97\u6cd5\u4e4b\u4e00\uff1a\u201cDijkstra\u201d\u3002 -\u201ctarget\u201d\u4e0d\u662f\u6574\u6570\u3002 -\u201ccut_off\u201d\u4e0d\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u4e0d\u662f\u5b57\u7b26\u4e32\u3002</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def multi_source_path(self,\n                      start_nodes: list[int],\n                      method: str = \"Dijkstra\",\n                      target: int = -1,\n                      cut_off: float = float('inf'),\n                      weight_name: str = None) -&gt; dict[int, list[int]]:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - multi_source_path\uff1a**&lt;br&gt;\n     - \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff1a\u8fd4\u56de\u5e8f\u5217\u8def\u5f84\n\n    Args:\n        start_nodes (list[int]): \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4e00\u4e2a\u8d77\u70b9\u8282\u70b9\u3002\n        method (str): \u7528\u4e8e\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u5b83\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a\n            -\u201cDijkstra\u201d\uff1a\u6807\u51c6Dijkstra\u7b97\u6cd5\u3002\n            \u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        target (int): \u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a-1\uff0c\u5219\u8868\u793a\u6ca1\u6709\u7279\u5b9a\u76ee\u6807\u3002\n        cut_off (float): \u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\u9650\u5236\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u503c\u7684\u8def\u5f84\u90fd\u5c06\u88ab\u5ffd\u7565\u3002\n        weight_name (str): \u56fe\u4e2d\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8fb9\u6743\u91cd\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3aNone\u3002\n\n    Returns:\n        dict[int, list[int]]: \u8fd4\u56de\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c \u952e\u4e3a\u76ee\u6807\u8282\u70b9\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u5e8f\u5217\u8def\u5f84\n\n    Raises:\n        ValueError: \u5982\u679c\u8fdd\u53cd\u4e86\u4ee5\u4e0b\u4efb\u4f55\u4e00\u9879\uff1a&lt;br&gt;\n            -\u201cstart_nodes\u201d\u4e0d\u662f\u5217\u8868\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u4e0d\u662f\u6709\u6548\u7684\u7b97\u6cd5\u4e4b\u4e00\uff1a\u201cDijkstra\u201d\u3002&lt;br&gt;\n            -\u201ctarget\u201d\u4e0d\u662f\u6574\u6570\u3002&lt;br&gt;\n            -\u201ccut_off\u201d\u4e0d\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u4e0d\u662f\u5b57\u7b26\u4e32\u3002\n    \"\"\"\n    if 1:\n        # \u68c0\u67e5 start_nodes \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n        if not isinstance(start_nodes, list):\n            raise ValueError(f\"Invalid value for 'start_nodes': {start_nodes}. It must be a list.\")\n\n        # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n        valid_methods = [\"Dijkstra\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n        if method not in valid_methods:\n            raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n        # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(target, int):\n            raise ValueError(f\"Invalid value for 'target': {target}. It must be an integer.\")\n\n        # \u68c0\u67e5 cut_off \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6570\n        if not isinstance(cut_off, (int, float)) or cut_off &lt; 0:\n            raise ValueError(f\"Invalid value for 'cut_off': {cut_off}. It must be a non-negative number.\")\n\n        # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216 None\n        if weight_name is not None and not isinstance(weight_name, str):\n            raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be either a string or None.\")\n\n    if weight_name is None:\n        weight_name = \"\"\n    result = self.graph.multi_source_path(start_nodes, method, target, cut_off, weight_name)\n\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - multi_source_all\uff1a  - \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff1a\u8fd4\u56de\u5e8f\u5217\u8def\u5f84\u548c\u6700\u5c11\u82b1\u8d39</p> <p>Parameters:</p> Name Type Description Default <code>start_nodes</code> <code>list[int]</code> <p>\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4e00\u4e2a\u8d77\u70b9\u8282\u70b9\u3002</p> required <code>method</code> <code>str</code> <p>\u7528\u4e8e\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u5b83\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a -\u201cDijkstra\u201d\uff1a\u6807\u51c6Dijkstra\u7b97\u6cd5\u3002 \u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>target</code> <code>int</code> <p>\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a-1\uff0c\u5219\u8868\u793a\u6ca1\u6709\u7279\u5b9a\u76ee\u6807\u3002</p> <code>-1</code> <code>cut_off</code> <code>float</code> <p>\u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\u9650\u5236\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u503c\u7684\u8def\u5f84\u90fd\u5c06\u88ab\u5ffd\u7565\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u56fe\u4e2d\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8fb9\u6743\u91cd\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3aNone\u3002</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dis_and_path</code> <code>dict</code> <p>\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\uff0c\u5185\u6709{cost,paths}\u4e24\u4e2a\u5c5e\u6027\uff0c\u8fd4\u56de\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u82b1\u8d39\u548c\u8def\u5f84\u7ed3\u679c\uff0c          \u5047\u8bbe\u8fd4\u56de\u7ed3\u679c\u4e3a\uff1a res\uff0c\u5219            res.cost\u4e3a dict[int, float]: \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u82b1\u8d39\u7ed3\u679c\uff0c\u952e\u4e3a\u76ee\u6807\u8282\u70b9\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u82b1\u8d39            res.paths\u4e3a dict[int, list[int]]: \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c \u952e\u4e3a\u76ee\u6807\u8282\u70b9\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u5e8f\u5217\u8def\u5f84</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u8fdd\u53cd\u4e86\u4ee5\u4e0b\u4efb\u4f55\u4e00\u9879\uff1a -\u201cstart_nodes\u201d\u4e0d\u662f\u5217\u8868\u3002 -\u201cmethod\u201d\u4e0d\u662f\u6709\u6548\u7684\u7b97\u6cd5\u4e4b\u4e00\uff1a\u201cDijkstra\u201d\u3002 -\u201ctarget\u201d\u4e0d\u662f\u6574\u6570\u3002 -\u201ccut_off\u201d\u4e0d\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u4e0d\u662f\u5b57\u7b26\u4e32\u3002</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def multi_source_all(self,\n                     start_nodes: list[int],\n                     method: str = \"Dijkstra\",\n                     target: int = -1,\n                     cut_off: float = float('inf'),\n                     weight_name: str = None) -&gt; dict:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - multi_source_all\uff1a**&lt;br&gt;\n     - \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff1a\u8fd4\u56de\u5e8f\u5217\u8def\u5f84\u548c\u6700\u5c11\u82b1\u8d39\n\n    Args:\n        start_nodes (list[int]): \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4e00\u4e2a\u8d77\u70b9\u8282\u70b9\u3002\n        method (str): \u7528\u4e8e\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u5b83\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a\n            -\u201cDijkstra\u201d\uff1a\u6807\u51c6Dijkstra\u7b97\u6cd5\u3002\n            \u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        target (int): \u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a-1\uff0c\u5219\u8868\u793a\u6ca1\u6709\u7279\u5b9a\u76ee\u6807\u3002\n        cut_off (float): \u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\u9650\u5236\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u503c\u7684\u8def\u5f84\u90fd\u5c06\u88ab\u5ffd\u7565\u3002\n        weight_name (str): \u56fe\u4e2d\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8fb9\u6743\u91cd\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3aNone\u3002\n\n    Returns:\n        dis_and_path: \u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\uff0c\u5185\u6709{cost,paths}\u4e24\u4e2a\u5c5e\u6027\uff0c\u8fd4\u56de\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u82b1\u8d39\u548c\u8def\u5f84\u7ed3\u679c\uff0c&lt;br&gt;\n                     \u5047\u8bbe\u8fd4\u56de\u7ed3\u679c\u4e3a\uff1a res\uff0c\u5219 &lt;br&gt;\n                      res.cost\u4e3a dict[int, float]: \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u82b1\u8d39\u7ed3\u679c\uff0c\u952e\u4e3a\u76ee\u6807\u8282\u70b9\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u82b1\u8d39 &lt;br&gt;\n                      res.paths\u4e3a dict[int, list[int]]: \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c \u952e\u4e3a\u76ee\u6807\u8282\u70b9\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u5e8f\u5217\u8def\u5f84\n\n    Raises:\n        ValueError: \u5982\u679c\u8fdd\u53cd\u4e86\u4ee5\u4e0b\u4efb\u4f55\u4e00\u9879\uff1a&lt;br&gt;\n            -\u201cstart_nodes\u201d\u4e0d\u662f\u5217\u8868\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u4e0d\u662f\u6709\u6548\u7684\u7b97\u6cd5\u4e4b\u4e00\uff1a\u201cDijkstra\u201d\u3002&lt;br&gt;\n            -\u201ctarget\u201d\u4e0d\u662f\u6574\u6570\u3002&lt;br&gt;\n            -\u201ccut_off\u201d\u4e0d\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u4e0d\u662f\u5b57\u7b26\u4e32\u3002\n    \"\"\"\n    if 1:\n        # \u68c0\u67e5 start_nodes \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n        if not isinstance(start_nodes, list):\n            raise ValueError(f\"Invalid value for 'start_nodes': {start_nodes}. It must be a list.\")\n\n        # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n        valid_methods = [\"Dijkstra\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n        if method not in valid_methods:\n            raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n        # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(target, int):\n            raise ValueError(f\"Invalid value for 'target': {target}. It must be an integer.\")\n\n        # \u68c0\u67e5 cut_off \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6570\n        if not isinstance(cut_off, (int, float)) or cut_off &lt; 0:\n            raise ValueError(f\"Invalid value for 'cut_off': {cut_off}. It must be a non-negative number.\")\n\n        # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216 None\n        if weight_name is not None and not isinstance(weight_name, str):\n            raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be either a string or None.\")\n    if weight_name is None:\n        weight_name = \"\"\n    result = self.graph.multi_source_all(start_nodes, method, target, cut_off, weight_name)\n\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - single_source_cost\uff1a  - \u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff0c\u8fd4\u56de\u6700\u5c11\u82b1\u8d39</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>int</code> <p>\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8d77\u59cb\u8282\u70b9\u3002</p> required <code>method</code> <code>str</code> <p>\u7528\u4e8e\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u5b83\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a -\u201cDijkstra\u201d\uff1a\u6807\u51c6Dijkstra\u7b97\u6cd5\u3002 \u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>target</code> <code>int</code> <p>\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a-1\uff0c\u5219\u8868\u793a\u6ca1\u6709\u7279\u5b9a\u76ee\u6807\u3002</p> <code>-1</code> <code>cut_off</code> <code>float</code> <p>\u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\u9650\u5236\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u503c\u7684\u8def\u5f84\u90fd\u5c06\u88ab\u5ffd\u7565\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u56fe\u4e2d\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8fb9\u6743\u91cd\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3aNone\u3002</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[int, float]</code> <p>dict[int, float]: \u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u82b1\u8d39\u7ed3\u679c\uff0c\u952e\u4e3a\u76ee\u6807\u8282\u70b9\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u82b1\u8d39</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u8fdd\u53cd\u4e86\u4ee5\u4e0b\u4efb\u4f55\u4e00\u9879\uff1a -\u201cstart\u201d\u4e0d\u662f\u6574\u6570\u3002 -\u201cmethod\u201d\u4e0d\u662f\u6709\u6548\u7684\u7b97\u6cd5\u4e4b\u4e00\uff1a\u201cDijkstra\u201d\u3002 -\u201ctarget\u201d\u4e0d\u662f\u6574\u6570\u3002 -\u201ccut_off\u201d\u4e0d\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u4e0d\u662f\u5b57\u7b26\u4e32\u3002</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def single_source_cost(self,\n                      start: int,\n                      method: str = \"Dijkstra\",\n                      target: int = -1,\n                      cut_off: float = float('inf'),\n                      weight_name: str = None) -&gt; dict[int, float]:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - single_source_cost\uff1a**&lt;br&gt;\n     - \u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff0c\u8fd4\u56de\u6700\u5c11\u82b1\u8d39\n\n    Args:\n        start (int): \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8d77\u59cb\u8282\u70b9\u3002\n        method (str): \u7528\u4e8e\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u5b83\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a\n            -\u201cDijkstra\u201d\uff1a\u6807\u51c6Dijkstra\u7b97\u6cd5\u3002\n            \u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        target (int): \u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a-1\uff0c\u5219\u8868\u793a\u6ca1\u6709\u7279\u5b9a\u76ee\u6807\u3002\n        cut_off (float): \u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\u9650\u5236\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u503c\u7684\u8def\u5f84\u90fd\u5c06\u88ab\u5ffd\u7565\u3002\n        weight_name (str): \u56fe\u4e2d\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8fb9\u6743\u91cd\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3aNone\u3002\n\n    Returns:\n        dict[int, float]: \u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u82b1\u8d39\u7ed3\u679c\uff0c\u952e\u4e3a\u76ee\u6807\u8282\u70b9\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u82b1\u8d39\n\n    Raises:\n        ValueError: \u5982\u679c\u8fdd\u53cd\u4e86\u4ee5\u4e0b\u4efb\u4f55\u4e00\u9879\uff1a&lt;br&gt;\n            -\u201cstart\u201d\u4e0d\u662f\u6574\u6570\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u4e0d\u662f\u6709\u6548\u7684\u7b97\u6cd5\u4e4b\u4e00\uff1a\u201cDijkstra\u201d\u3002&lt;br&gt;\n            -\u201ctarget\u201d\u4e0d\u662f\u6574\u6570\u3002&lt;br&gt;\n            -\u201ccut_off\u201d\u4e0d\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u4e0d\u662f\u5b57\u7b26\u4e32\u3002\n    \"\"\"\n    if 1:\n        # \u68c0\u67e5 start_nodes \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n        if not isinstance(start, int):\n            raise ValueError(f\"Invalid value for 'start': {start}. It must be a list.\")\n\n        # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n        valid_methods = [\"Dijkstra\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n        if method not in valid_methods:\n            raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n        # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(target, int):\n            raise ValueError(f\"Invalid value for 'target': {target}. It must be an integer.\")\n\n        # \u68c0\u67e5 cut_off \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6570\n        if not isinstance(cut_off, (int, float)) or cut_off &lt; 0:\n            raise ValueError(f\"Invalid value for 'cut_off': {cut_off}. It must be a non-negative number.\")\n\n        # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216 None\n        if weight_name is not None and not isinstance(weight_name, str):\n            raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be either a string or None.\")\n\n    if weight_name is None:\n        weight_name = \"\"\n    result = self.graph.single_source_cost(start, method, target, cut_off, weight_name)\n\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - single_source_path\uff1a  - \u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff0c\u8fd4\u56de\u82b1\u8d39</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>int</code> <p>\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8d77\u59cb\u8282\u70b9\u3002</p> required <code>method</code> <code>str</code> <p>\u7528\u4e8e\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u5b83\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a -\u201cDijkstra\u201d\uff1a\u6807\u51c6Dijkstra\u7b97\u6cd5\u3002 \u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>target</code> <code>int</code> <p>\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a-1\uff0c\u5219\u8868\u793a\u6ca1\u6709\u7279\u5b9a\u76ee\u6807\u3002</p> <code>-1</code> <code>cut_off</code> <code>float</code> <p>\u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\u9650\u5236\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u503c\u7684\u8def\u5f84\u90fd\u5c06\u88ab\u5ffd\u7565\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u56fe\u4e2d\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8fb9\u6743\u91cd\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a None\u3002</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[int, list[int]]</code> <p>dict[int, list[int]]: \u8fd4\u56de\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c \u952e\u4e3a\u76ee\u6807\u8282\u70b9\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u5e8f\u5217\u8def\u5f84</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u8fdd\u53cd\u4e86\u4ee5\u4e0b\u4efb\u4f55\u4e00\u9879\uff1a -\u201cstart\u201d\u4e0d\u662f\u6574\u6570\u3002 -\u201cmethod\u201d\u4e0d\u662f\u6709\u6548\u7684\u7b97\u6cd5\u4e4b\u4e00\uff1a\u201cDijkstra\u201d\u3002 -\u201ctarget\u201d\u4e0d\u662f\u6574\u6570\u3002 -\u201ccut_off\u201d\u4e0d\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u4e0d\u662f\u5b57\u7b26\u4e32\u3002</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def single_source_path(self,\n                       start: int,\n                       method: str = \"Dijkstra\",\n                       target: int = -1,\n                       cut_off: float = float('inf'),\n                       weight_name: str = None) -&gt; dict[int, list[int]]:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - single_source_path\uff1a**&lt;br&gt;\n     - \u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff0c\u8fd4\u56de\u82b1\u8d39\n\n    Args:\n        start (int): \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8d77\u59cb\u8282\u70b9\u3002\n        method (str): \u7528\u4e8e\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u5b83\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a\n            -\u201cDijkstra\u201d\uff1a\u6807\u51c6Dijkstra\u7b97\u6cd5\u3002\n            \u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        target (int): \u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a-1\uff0c\u5219\u8868\u793a\u6ca1\u6709\u7279\u5b9a\u76ee\u6807\u3002\n        cut_off (float): \u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\u9650\u5236\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u503c\u7684\u8def\u5f84\u90fd\u5c06\u88ab\u5ffd\u7565\u3002\n        weight_name (str): \u56fe\u4e2d\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8fb9\u6743\u91cd\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a None\u3002\n\n    Returns:\n        dict[int, list[int]]: \u8fd4\u56de\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c \u952e\u4e3a\u76ee\u6807\u8282\u70b9\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u5e8f\u5217\u8def\u5f84\n\n    Raises:\n        ValueError: \u5982\u679c\u8fdd\u53cd\u4e86\u4ee5\u4e0b\u4efb\u4f55\u4e00\u9879\uff1a&lt;br&gt;\n            -\u201cstart\u201d\u4e0d\u662f\u6574\u6570\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u4e0d\u662f\u6709\u6548\u7684\u7b97\u6cd5\u4e4b\u4e00\uff1a\u201cDijkstra\u201d\u3002&lt;br&gt;\n            -\u201ctarget\u201d\u4e0d\u662f\u6574\u6570\u3002&lt;br&gt;\n            -\u201ccut_off\u201d\u4e0d\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u4e0d\u662f\u5b57\u7b26\u4e32\u3002\n    \"\"\"\n    if 1:\n        # \u68c0\u67e5 list_o \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n        if not isinstance(start, int):\n            raise ValueError(f\"Invalid value for 'start': {start}. It must be a int.\")\n\n        # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n        valid_methods = [\"Dijkstra\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n        if method not in valid_methods:\n            raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n        # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(target, int):\n            raise ValueError(f\"Invalid value for 'target': {target}. It must be an integer.\")\n\n        # \u68c0\u67e5 cut_off \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6570\n        if not isinstance(cut_off, (int, float)) or cut_off &lt; 0:\n            raise ValueError(f\"Invalid value for 'cut_off': {cut_off}. It must be a non-negative number.\")\n\n        # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216 None\n        if weight_name is not None and not isinstance(weight_name, str):\n            raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be either a string or None.\")\n\n    if weight_name is None:\n        weight_name = \"\"\n    result = self.graph.single_source_path(start, method, target, cut_off, weight_name)\n\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - single_source_all\uff1a  - \u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff0c\u8fd4\u56de\u82b1\u8d39\u548c\u8def\u5f84</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>int</code> <p>\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8d77\u59cb\u8282\u70b9\u3002</p> required <code>method</code> <code>str</code> <p>\u7528\u4e8e\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u5b83\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a -\u201cDijkstra\u201d\uff1a\u6807\u51c6Dijkstra\u7b97\u6cd5\u3002 \u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>target</code> <code>int</code> <p>\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a-1\uff0c\u5219\u8868\u793a\u6ca1\u6709\u7279\u5b9a\u76ee\u6807\u3002</p> <code>-1</code> <code>cut_off</code> <code>float</code> <p>\u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\u9650\u5236\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u503c\u7684\u8def\u5f84\u90fd\u5c06\u88ab\u5ffd\u7565\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u56fe\u4e2d\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8fb9\u6743\u91cd\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a\u201c\u65e0\u201d\u3002</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dis_and_path</code> <code>dict</code> <p>\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\uff0c\u5185\u6709{cost,paths}\u4e24\u4e2a\u5c5e\u6027\uff0c\u8fd4\u56de\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u82b1\u8d39\u548c\u8def\u5f84\u7ed3\u679c\uff0c          \u5047\u8bbe\u8fd4\u56de\u7ed3\u679c\u4e3a\uff1a res\uff0c\u5219            res.cost\u4e3a dict[int, float]: \u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u82b1\u8d39\u7ed3\u679c\uff0c\u952e\u4e3a\u76ee\u6807\u8282\u70b9\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u82b1\u8d39            res.paths\u4e3a dict[int, list[int]]: \u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u952e\u4e3a\u76ee\u6807\u8282\u70b9\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u5e8f\u5217\u8def\u5f84</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u8fdd\u53cd\u4e86\u4ee5\u4e0b\u4efb\u4f55\u4e00\u9879\uff1a -\u201cstart\u201d\u4e0d\u662f\u6574\u6570\u3002 -\u201cmethod\u201d\u4e0d\u662f\u6709\u6548\u7684\u7b97\u6cd5\u4e4b\u4e00\uff1a\u201cDijkstra\u201d\u3002 -\u201ctarget\u201d\u4e0d\u662f\u6574\u6570\u3002 -\u201ccut_off\u201d\u4e0d\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u4e0d\u662f\u5b57\u7b26\u4e32\u3002</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def single_source_all(self,\n                      start: int,\n                      method: str = \"Dijkstra\",\n                      target: int = -1,\n                      cut_off: float = float('inf'),\n                      weight_name: str = None) -&gt; dict:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - single_source_all\uff1a**&lt;br&gt;\n     - \u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff0c\u8fd4\u56de\u82b1\u8d39\u548c\u8def\u5f84\n\n    Args:\n        start (int): \u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8d77\u59cb\u8282\u70b9\u3002\n        method (str): \u7528\u4e8e\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u5b83\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a\n            -\u201cDijkstra\u201d\uff1a\u6807\u51c6Dijkstra\u7b97\u6cd5\u3002\n            \u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        target (int): \u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a-1\uff0c\u5219\u8868\u793a\u6ca1\u6709\u7279\u5b9a\u76ee\u6807\u3002\n        cut_off (float): \u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\u9650\u5236\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u503c\u7684\u8def\u5f84\u90fd\u5c06\u88ab\u5ffd\u7565\u3002\n        weight_name (str): \u56fe\u4e2d\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8fb9\u6743\u91cd\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a\u201c\u65e0\u201d\u3002\n\n    Returns:\n        dis_and_path: \u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\uff0c\u5185\u6709{cost,paths}\u4e24\u4e2a\u5c5e\u6027\uff0c\u8fd4\u56de\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u82b1\u8d39\u548c\u8def\u5f84\u7ed3\u679c\uff0c&lt;br&gt;\n                     \u5047\u8bbe\u8fd4\u56de\u7ed3\u679c\u4e3a\uff1a res\uff0c\u5219 &lt;br&gt;\n                      res.cost\u4e3a dict[int, float]: \u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u82b1\u8d39\u7ed3\u679c\uff0c\u952e\u4e3a\u76ee\u6807\u8282\u70b9\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u82b1\u8d39 &lt;br&gt;\n                      res.paths\u4e3a dict[int, list[int]]: \u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u952e\u4e3a\u76ee\u6807\u8282\u70b9\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u5e8f\u5217\u8def\u5f84\n\n    Raises:\n        ValueError: \u5982\u679c\u8fdd\u53cd\u4e86\u4ee5\u4e0b\u4efb\u4f55\u4e00\u9879\uff1a&lt;br&gt;\n            -\u201cstart\u201d\u4e0d\u662f\u6574\u6570\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u4e0d\u662f\u6709\u6548\u7684\u7b97\u6cd5\u4e4b\u4e00\uff1a\u201cDijkstra\u201d\u3002&lt;br&gt;\n            -\u201ctarget\u201d\u4e0d\u662f\u6574\u6570\u3002&lt;br&gt;\n            -\u201ccut_off\u201d\u4e0d\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u4e0d\u662f\u5b57\u7b26\u4e32\u3002\n    \"\"\"\n    if 1:\n        # \u68c0\u67e5 list_o \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n        if not isinstance(start, int):\n            raise ValueError(f\"Invalid value for 'start': {start}. It must be a int.\")\n\n        # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n        valid_methods = [\"Dijkstra\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n        if method not in valid_methods:\n            raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n        # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(target, int):\n            raise ValueError(f\"Invalid value for 'target': {target}. It must be an integer.\")\n\n        # \u68c0\u67e5 cut_off \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6570\n        if not isinstance(cut_off, (int, float)) or cut_off &lt; 0:\n            raise ValueError(f\"Invalid value for 'cut_off': {cut_off}. It must be a non-negative number.\")\n\n        # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216 None\n        if weight_name is not None and not isinstance(weight_name, str):\n            raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be either a string or None.\")\n\n    # \u5982\u679c weight_name \u662f None, \u4e0d\u4f20\u9012\u8be5\u53c2\u6570\n    if weight_name is None:\n        weight_name = \"\"\n    result = self.graph.single_source_all(start, method, target, cut_off, weight_name)\n\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - multi_single_source_cost\uff1a  - \u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u8fd4\u56de\u82b1\u8d39\u5217\u8868</p> <p>Parameters:</p> Name Type Description Default <code>start_nodes</code> <code>list</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u9879\u76ee\u5217\u8868\u4e2d\u7684\u503c\u5fc5\u987b\u662f\u6574\u6570\u3002</p> required <code>method</code> <code>str</code> <p>\u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>target</code> <code>int</code> <p>\u8981\u5230\u8fbe\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c-1\uff0c\u5219\u67e5\u627e\u6240\u6709\u8282\u70b9\u7684\u8def\u5f84\u3002\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002</p> <code>-1</code> <code>cut_off</code> <code>float</code> <p>\u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u5982\u679c\u5176\u603b\u6743\u91cd\u8d85\u8fc7\u8be5\u503c,\u8def\u5f84\u88ab\u4e22\u5f03\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002</p> <code>None</code> <code>num_thread</code> <code>int</code> <p>\u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <code>1</code> <p>Returns:</p> Type Description <code>list[dict[int, float]]</code> <p>list[dict[int, float]]: \u8fd4\u56de\u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c                 \u5217\u8868\u5185\u7684\u5143\u7d20\u662f\u6bcf\u4e2a\u6e90\u8282\u70b9\u7684\u5355\u6e90\u6700\u77ed\u8ba1\u7b97\u82b1\u8d39\u5b57\u5178dict[int, float]</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002 -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3002 -\u201ctarget\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002 -\u201ccut_off\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002 -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def multi_single_source_cost(self,\n                     start_nodes: list[int],\n                     method: str = \"Dijkstra\",\n                     target: int = -1,\n                     cut_off: float = float('inf'),\n                     weight_name: str = None,\n                     num_thread: int = 1) -&gt; list[dict[int, float]]:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - multi_single_source_cost\uff1a**&lt;br&gt;\n     - \u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u8fd4\u56de\u82b1\u8d39\u5217\u8868\n\n    Args:\n        start_nodes (list): \u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u9879\u76ee\u5217\u8868\u4e2d\u7684\u503c\u5fc5\u987b\u662f\u6574\u6570\u3002\n        method (str): \u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        target (int): \u8981\u5230\u8fbe\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c-1\uff0c\u5219\u67e5\u627e\u6240\u6709\u8282\u70b9\u7684\u8def\u5f84\u3002\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002\n        cut_off (float): \u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u5982\u679c\u5176\u603b\u6743\u91cd\u8d85\u8fc7\u8be5\u503c,\u8def\u5f84\u88ab\u4e22\u5f03\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002\n        weight_name (str): \u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002\n        num_thread (int): \u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Returns:\n        list[dict[int, float]]: \u8fd4\u56de\u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c&lt;br&gt;\n                            \u5217\u8868\u5185\u7684\u5143\u7d20\u662f\u6bcf\u4e2a\u6e90\u8282\u70b9\u7684\u5355\u6e90\u6700\u77ed\u8ba1\u7b97\u82b1\u8d39\u5b57\u5178dict[int, float]\n\n    Raises:\n        ValueError: \u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a&lt;br&gt;\n            -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3002&lt;br&gt;\n            -\u201ctarget\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002&lt;br&gt;\n            -\u201ccut_off\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002&lt;br&gt;\n            -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002\n    \"\"\"\n    if 1:\n        # \u68c0\u67e5 list_o \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n        if not isinstance(start_nodes, list):\n            raise ValueError(f\"Invalid value for 'start_nodes': {start_nodes}. It must be a list.\")\n\n        # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n        valid_methods = [\"Dijkstra\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n        if method not in valid_methods:\n            raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n        # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(target, int):\n            raise ValueError(f\"Invalid value for 'target': {target}. It must be a integer.\")\n\n        # \u68c0\u67e5 cut_off \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6d6e\u52a8\u6570\n        if not isinstance(cut_off, (int, float)) or cut_off &lt; 0:\n            raise ValueError(f\"Invalid value for 'cut_off': {cut_off}. It must be a non-negative number.\")\n\n        # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216 None\n        if weight_name is not None and not isinstance(weight_name, str):\n            raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be either a string or None.\")\n\n        # \u68c0\u67e5 num_thread \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(num_thread, int):\n            raise ValueError(f\"Invalid value for 'num_thread': {num_thread}. It must be a integer.\")\n\n    # \u5982\u679c weight_name \u662f None, \u4e0d\u4f20\u9012\u8be5\u53c2\u6570\n    if weight_name is None:\n        weight_name = \"\"\n    result = self.graph.multi_single_source_cost(start_nodes, method, target, cut_off, weight_name, num_thread)\n\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - multi_single_source_path\uff1a  - \u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u8fd4\u56de\u8def\u5f84\u5217\u8868</p> <p>Parameters:</p> Name Type Description Default <code>start_nodes</code> <code>list</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u9879\u76ee\u5217\u8868\u4e2d\u7684\u503c\u5fc5\u987b\u662f\u6574\u6570\u3002</p> required <code>method</code> <code>str</code> <p>\u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>target</code> <code>int</code> <p>\u8981\u5230\u8fbe\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c-1\uff0c\u5219\u67e5\u627e\u6240\u6709\u8282\u70b9\u7684\u8def\u5f84\u3002\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002</p> <code>-1</code> <code>cut_off</code> <code>float</code> <p>\u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u5982\u679c\u5176\u603b\u6743\u91cd\u8d85\u8fc7\u8be5\u503c,\u8def\u5f84\u88ab\u4e22\u5f03\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002</p> <code>None</code> <code>num_thread</code> <code>int</code> <p>\u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <code>1</code> <p>Returns:</p> Type Description <code>list[dict[int, list[int]]]</code> <p>list[dict[int, list[int]]]: \u8fd4\u56de\u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c                         \u5217\u8868\u5185\u7684\u6bcf\u4e2a\u5143\u7d20\u662f\u6bcf\u4e2a\u6e90\u8282\u70b9\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84dict[int, list[int]]</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002 -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3002 -\u201ctarget\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002 -\u201ccut_off\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002 -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def multi_single_source_path(self,\n                     start_nodes: list[int],\n                     method: str = \"Dijkstra\",\n                     target: int = -1,\n                     cut_off: float = float('inf'),\n                     weight_name: str = None,\n                     num_thread: int = 1) -&gt; list[dict[int, list[int]]]:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - multi_single_source_path\uff1a**&lt;br&gt;\n     - \u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u8fd4\u56de\u8def\u5f84\u5217\u8868\n\n    Args:\n        start_nodes (list): \u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u9879\u76ee\u5217\u8868\u4e2d\u7684\u503c\u5fc5\u987b\u662f\u6574\u6570\u3002\n        method (str): \u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        target (int): \u8981\u5230\u8fbe\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c-1\uff0c\u5219\u67e5\u627e\u6240\u6709\u8282\u70b9\u7684\u8def\u5f84\u3002\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002\n        cut_off (float): \u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u5982\u679c\u5176\u603b\u6743\u91cd\u8d85\u8fc7\u8be5\u503c,\u8def\u5f84\u88ab\u4e22\u5f03\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002\n        weight_name (str): \u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002\n        num_thread (int): \u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Returns:\n        list[dict[int, list[int]]]: \u8fd4\u56de\u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c&lt;br&gt;\n                                    \u5217\u8868\u5185\u7684\u6bcf\u4e2a\u5143\u7d20\u662f\u6bcf\u4e2a\u6e90\u8282\u70b9\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84dict[int, list[int]]\n\n    Raises:\n        ValueError: \u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a&lt;br&gt;\n            -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3002&lt;br&gt;\n            -\u201ctarget\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002&lt;br&gt;\n            -\u201ccut_off\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002&lt;br&gt;\n            -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002\n    \"\"\"\n    if 1:\n        # \u68c0\u67e5 list_o \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n        if not isinstance(start_nodes, list):\n            raise ValueError(f\"Invalid value for 'start_nodes': {start_nodes}. It must be a list.\")\n\n        # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n        valid_methods = [\"Dijkstra\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n        if method not in valid_methods:\n            raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n        # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(target, int):\n            raise ValueError(f\"Invalid value for 'target': {target}. It must be a integer.\")\n\n        # \u68c0\u67e5 cut_off \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6d6e\u52a8\u6570\n        if not isinstance(cut_off, (int, float)) or cut_off &lt; 0:\n            raise ValueError(f\"Invalid value for 'cut_off': {cut_off}. It must be a non-negative number.\")\n\n        # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216 None\n        if weight_name is not None and not isinstance(weight_name, str):\n            raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be either a string or None.\")\n\n        # \u68c0\u67e5 num_thread \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(num_thread, int):\n            raise ValueError(f\"Invalid value for 'num_thread': {num_thread}. It must be a integer.\")\n\n    if weight_name is None:\n        weight_name = \"\"\n    result = self.graph.multi_single_source_path(start_nodes, method, target, cut_off, weight_name, num_thread)\n\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - multi_single_source_all\uff1a  - \u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u8fd4\u56de\u8def\u5f84\u5217\u8868\u548c\u82b1\u8d39</p> <p>Parameters:</p> Name Type Description Default <code>start_nodes</code> <code>list</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u9879\u76ee\u5217\u8868\u4e2d\u7684\u503c\u5fc5\u987b\u662f\u6574\u6570\u3002</p> required <code>method</code> <code>str</code> <p>\u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>target</code> <code>int</code> <p>\u8981\u5230\u8fbe\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c-1\uff0c\u5219\u67e5\u627e\u6240\u6709\u8282\u70b9\u7684\u8def\u5f84\u3002\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002</p> <code>-1</code> <code>cut_off</code> <code>float or int</code> <p>\u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u5982\u679c\u5176\u603b\u6743\u91cd\u8d85\u8fc7\u8be5\u503c,\u8def\u5f84\u88ab\u4e22\u5f03\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002</p> <code>None</code> <code>num_thread</code> <code>int</code> <p>\u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <code>1</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>\u8fd4\u56de\u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u4e8c\u7ef4\u5217\u8868\uff1a\u5143\u7d20\u662f\u6bcf\u4e2a\u6e90\u8282\u70b9\u7684\u7ed3\u6784\u4f53dis_and_path,\u6b64\u7ed3\u6784\u4f53\u5305\u542b\u4e24\u4e2a\u5c5e\u6027{cost,paths}      \u5047\u8bbe\u8fd4\u56de\u7ed3\u679c\u4e3a\uff1a res_list\uff0c\u5219            \u7ed3\u679c\u7684\u7b2ck\u4e2a\u5143\u7d20\uff1ares_list[k]:            res_list[k].cost\u4e3a dict[int, float]: \u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u82b1\u8d39\u7ed3\u679c\uff0c\u952e\u4e3a\u76ee\u6807\u8282\u70b9\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u82b1\u8d39            res_list[k].paths\u4e3a dict[int, list[int]]: \u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u952e\u4e3a\u76ee\u6807\u8282\u70b9\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u5e8f\u5217\u8def\u5f84</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002 -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3002 -\u201ctarget\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002 -\u201ccut_off\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002 -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def multi_single_source_all(self,\n                     start_nodes: list[int],\n                     method: str = \"Dijkstra\",\n                     target: int = -1,\n                     cut_off: float = float('inf'),\n                     weight_name: str = None,\n                     num_thread: int = 1) -&gt; dict:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - multi_single_source_all\uff1a**&lt;br&gt;\n     - \u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u8fd4\u56de\u8def\u5f84\u5217\u8868\u548c\u82b1\u8d39\n\n    Args:\n        start_nodes (list): \u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u9879\u76ee\u5217\u8868\u4e2d\u7684\u503c\u5fc5\u987b\u662f\u6574\u6570\u3002\n        method (str): \u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        target (int): \u8981\u5230\u8fbe\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c-1\uff0c\u5219\u67e5\u627e\u6240\u6709\u8282\u70b9\u7684\u8def\u5f84\u3002\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002\n        cut_off (float or int): \u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u5982\u679c\u5176\u603b\u6743\u91cd\u8d85\u8fc7\u8be5\u503c,\u8def\u5f84\u88ab\u4e22\u5f03\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002\n        weight_name (str): \u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002\n        num_thread (int): \u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Returns:\n        dict: \u8fd4\u56de\u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u4e8c\u7ef4\u5217\u8868\uff1a\u5143\u7d20\u662f\u6bcf\u4e2a\u6e90\u8282\u70b9\u7684\u7ed3\u6784\u4f53dis_and_path,\u6b64\u7ed3\u6784\u4f53\u5305\u542b\u4e24\u4e2a\u5c5e\u6027{cost,paths} &lt;br&gt;\n                \u5047\u8bbe\u8fd4\u56de\u7ed3\u679c\u4e3a\uff1a res_list\uff0c\u5219 &lt;br&gt;\n                      \u7ed3\u679c\u7684\u7b2ck\u4e2a\u5143\u7d20\uff1ares_list[k]: &lt;br&gt;\n                      res_list[k].cost\u4e3a dict[int, float]: \u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u82b1\u8d39\u7ed3\u679c\uff0c\u952e\u4e3a\u76ee\u6807\u8282\u70b9\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u82b1\u8d39 &lt;br&gt;\n                      res_list[k].paths\u4e3a dict[int, list[int]]: \u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u952e\u4e3a\u76ee\u6807\u8282\u70b9\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u5e8f\u5217\u8def\u5f84\n\n    Raises:\n        ValueError: \u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a&lt;br&gt;\n            -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3002&lt;br&gt;\n            -\u201ctarget\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002&lt;br&gt;\n            -\u201ccut_off\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002&lt;br&gt;\n            -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002\n    \"\"\"\n    if 1:\n        # \u68c0\u67e5 list_o \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n        if not isinstance(start_nodes, list):\n            raise ValueError(f\"Invalid value for 'list_o': {start_nodes}. It must be a list.\")\n\n        # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n        valid_methods = [\"Dijkstra\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n        if method not in valid_methods:\n            raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n        # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(target, int):\n            raise ValueError(f\"Invalid value for 'target': {target}. It must be a integer.\")\n\n        # \u68c0\u67e5 cut_off \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6d6e\u52a8\u6570\n        if not isinstance(cut_off, (int, float)) or cut_off &lt; 0:\n            raise ValueError(f\"Invalid value for 'cut_off': {cut_off}. It must be a non-negative number.\")\n\n        # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216 None\n        if weight_name is not None and not isinstance(weight_name, str):\n            raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be either a string or None.\")\n\n        # \u68c0\u67e5 num_thread \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(num_thread, int):\n            raise ValueError(f\"Invalid value for 'num_thread': {num_thread}. It must be a integer.\")\n\n    if weight_name is None:\n        weight_name = \"\"\n    result = self.graph.multi_single_source_all(start_nodes, method, target, cut_off, weight_name, num_thread)\n\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - multi_multi_source_cost\uff1a  - \u591a\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u8fd4\u56de\u6700\u77ed\u8def\u5f84\u82b1\u8d39</p> <p>Parameters:</p> Name Type Description Default <code>start_nodes</code> <code>list</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u4e8c\u7ef4\u5217\u8868\u3002\u6bcf\u4e2a\u5217\u8868\u4e2d\u7684\u5217\u8868\u662f\u4e00\u4e2a\u591a\u6e90\u8282\u70b9\u5217\u8868\u3002</p> required <code>method</code> <code>str</code> <p>\u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>target</code> <code>int</code> <p>\u8981\u5230\u8fbe\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c-1\uff0c\u5219\u67e5\u627e\u6240\u6709\u8282\u70b9\u7684\u8def\u5f84\u3002\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002</p> <code>-1</code> <code>cut_off</code> <code>float or int</code> <p>\u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u5982\u679c\u5176\u603b\u6743\u91cd\u8d85\u8fc7\u8be5\u503c,\u8def\u5f84\u88ab\u4e22\u5f03\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002</p> <code>None</code> <code>num_thread</code> <code>int</code> <p>\u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <code>1</code> <p>Returns:</p> Type Description <code>list[dict[int, float]]</code> <p>list[dict[int, float]]: \u8fd4\u56de\u591a\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c                     \u5217\u8868\u5185\u7684\u5143\u7d20\u662f\u6bcf\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u7684\u82b1\u8d39\u5b57\u5178dict[int, float]</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u4e8c\u7ef4\u6574\u6570\u5217\u8868\u3002 -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3002 -\u201ctarget\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002 -\u201ccut_off\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002 -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def multi_multi_source_cost(self,\n                     start_nodes: list[list[int]],\n                     method: str = \"Dijkstra\",\n                     target: int = -1,\n                     cut_off: float = float('inf'),\n                     weight_name: str = None,\n                     num_thread: int = 1) -&gt; list[dict[int, float]]:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - multi_multi_source_cost\uff1a**&lt;br&gt;\n     - \u591a\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u8fd4\u56de\u6700\u77ed\u8def\u5f84\u82b1\u8d39\n\n    Args:\n        start_nodes (list): \u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u4e8c\u7ef4\u5217\u8868\u3002\u6bcf\u4e2a\u5217\u8868\u4e2d\u7684\u5217\u8868\u662f\u4e00\u4e2a\u591a\u6e90\u8282\u70b9\u5217\u8868\u3002\n        method (str): \u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        target (int): \u8981\u5230\u8fbe\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c-1\uff0c\u5219\u67e5\u627e\u6240\u6709\u8282\u70b9\u7684\u8def\u5f84\u3002\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002\n        cut_off (float or int): \u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u5982\u679c\u5176\u603b\u6743\u91cd\u8d85\u8fc7\u8be5\u503c,\u8def\u5f84\u88ab\u4e22\u5f03\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002\n        weight_name (str): \u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002\n        num_thread (int): \u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Returns:\n        list[dict[int, float]]: \u8fd4\u56de\u591a\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c&lt;br&gt;\n                                \u5217\u8868\u5185\u7684\u5143\u7d20\u662f\u6bcf\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u7684\u82b1\u8d39\u5b57\u5178dict[int, float]\n\n    Raises:\n        ValueError: \u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a&lt;br&gt;\n            -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u4e8c\u7ef4\u6574\u6570\u5217\u8868\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3002&lt;br&gt;\n            -\u201ctarget\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002&lt;br&gt;\n            -\u201ccut_off\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002&lt;br&gt;\n            -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002\n    \"\"\"\n    if 1:\n        # \u68c0\u67e5 list_o \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n        if not isinstance(start_nodes, list):\n            raise ValueError(f\"Invalid value for 'list_o': {start_nodes}. It must be a list.\")\n\n        # \u68c0\u67e5 start_nodes \u662f\u5426\u662f\u4e8c\u7ef4\u5217\u8868\n        if not all(isinstance(node, list) for node in start_nodes):\n            raise ValueError(f\"Invalid value for 'start_nodes': {start_nodes}. It must be a list of lists.\")\n\n        # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n        valid_methods = [\"Dijkstra\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n        if method not in valid_methods:\n            raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n        # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(target, int):\n            raise ValueError(f\"Invalid value for 'target': {target}. It must be a integer.\")\n\n        # \u68c0\u67e5 cut_off \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6d6e\u52a8\u6570\n        if not isinstance(cut_off, (int, float)) or cut_off &lt; 0:\n            raise ValueError(f\"Invalid value for 'cut_off': {cut_off}. It must be a non-negative number.\")\n\n        # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216 None\n        if weight_name is not None and not isinstance(weight_name, str):\n            raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be either a string or None.\")\n\n        # \u68c0\u67e5 num_thread \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(num_thread, int):\n            raise ValueError(f\"Invalid value for 'num_thread': {num_thread}. It must be a integer.\")\n\n    if weight_name is None:\n        weight_name = \"\"\n    result = self.graph.multi_multi_source_cost(start_nodes, method, target, cut_off, weight_name, num_thread)\n\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - multi_multi_source_path\uff1a  - \u591a\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u8fd4\u56de\u6700\u77ed\u8ba1\u7b97\u8def\u5f84</p> <p>Parameters:</p> Name Type Description Default <code>start_nodes</code> <code>list</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u4e8c\u7ef4\u5217\u8868\u3002\u6bcf\u4e2a\u5217\u8868\u4e2d\u7684\u5217\u8868\u662f\u4e00\u4e2a\u591a\u6e90\u8282\u70b9\u5217\u8868\u3002</p> required <code>method</code> <code>str</code> <p>\u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>target</code> <code>int</code> <p>\u8981\u5230\u8fbe\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c-1\uff0c\u5219\u67e5\u627e\u6240\u6709\u8282\u70b9\u7684\u8def\u5f84\u3002\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002</p> <code>-1</code> <code>cut_off</code> <code>float or int</code> <p>\u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u5982\u679c\u5176\u603b\u6743\u91cd\u8d85\u8fc7\u8be5\u503c,\u8def\u5f84\u88ab\u4e22\u5f03\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002</p> <code>None</code> <code>num_thread</code> <code>int</code> <p>\u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <code>1</code> <p>Returns:</p> Type Description <code>list[dict[int, list[int]]]</code> <p>list[dict[int, list[int]]]: \u8fd4\u56de\u591a\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c     \u5217\u8868\u5185\u7684\u6bcf\u4e2a\u5143\u7d20\u662f\u6bcf\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u7684\u8def\u5f84\u5b57\u5178 dict[int, list[int]]</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u4e8c\u7ef4\u6574\u6570\u5217\u8868\u3002 -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3002 -\u201ctarget\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002 -\u201ccut_off\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002 -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def multi_multi_source_path(self,\n                     start_nodes: list[list[int]],\n                     method: str = \"Dijkstra\",\n                     target: int = -1,\n                     cut_off: float = float('inf'),\n                     weight_name: str = None,\n                     num_thread: int = 1) -&gt; list[dict[int, list[int]]]:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - multi_multi_source_path\uff1a**&lt;br&gt;\n     - \u591a\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u8fd4\u56de\u6700\u77ed\u8ba1\u7b97\u8def\u5f84\n\n    Args:\n        start_nodes (list): \u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u4e8c\u7ef4\u5217\u8868\u3002\u6bcf\u4e2a\u5217\u8868\u4e2d\u7684\u5217\u8868\u662f\u4e00\u4e2a\u591a\u6e90\u8282\u70b9\u5217\u8868\u3002\n        method (str): \u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        target (int): \u8981\u5230\u8fbe\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c-1\uff0c\u5219\u67e5\u627e\u6240\u6709\u8282\u70b9\u7684\u8def\u5f84\u3002\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002\n        cut_off (float or int): \u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u5982\u679c\u5176\u603b\u6743\u91cd\u8d85\u8fc7\u8be5\u503c,\u8def\u5f84\u88ab\u4e22\u5f03\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002\n        weight_name (str): \u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002\n        num_thread (int): \u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Returns:\n        list[dict[int, list[int]]]: \u8fd4\u56de\u591a\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c&lt;br&gt;\n                \u5217\u8868\u5185\u7684\u6bcf\u4e2a\u5143\u7d20\u662f\u6bcf\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u7684\u8def\u5f84\u5b57\u5178 dict[int, list[int]]\n\n    Raises:\n        ValueError: \u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a&lt;br&gt;\n            -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u4e8c\u7ef4\u6574\u6570\u5217\u8868\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3002&lt;br&gt;\n            -\u201ctarget\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002&lt;br&gt;\n            -\u201ccut_off\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002&lt;br&gt;\n            -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002\n    \"\"\"\n    if 1:\n        # \u68c0\u67e5 list_o \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n        if not isinstance(start_nodes, list):\n            raise ValueError(f\"Invalid value for 'start_nodes': {start_nodes}. It must be a list.\")\n\n        # \u68c0\u67e5 start_nodes \u662f\u5426\u662f\u4e8c\u7ef4\u5217\u8868\n        if not all(isinstance(node, list) for node in start_nodes):\n            raise ValueError(f\"Invalid value for 'start_nodes': {start_nodes}. It must be a list of lists.\")\n\n        # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n        valid_methods = [\"Dijkstra\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n        if method not in valid_methods:\n            raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n        # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(target, int):\n            raise ValueError(f\"Invalid value for 'target': {target}. It must be a integer.\")\n\n        # \u68c0\u67e5 cut_off \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6d6e\u52a8\u6570\n        if not isinstance(cut_off, (int, float)) or cut_off &lt; 0:\n            raise ValueError(f\"Invalid value for 'cut_off': {cut_off}. It must be a non-negative number.\")\n\n        # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216 None\n        if weight_name is not None and not isinstance(weight_name, str):\n            raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be either a string or None.\")\n\n        # \u68c0\u67e5 num_thread \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(num_thread, int):\n            raise ValueError(f\"Invalid value for 'num_thread': {num_thread}. It must be a integer.\")\n\n    if weight_name is None:\n        weight_name = \"\"\n    result = self.graph.multi_multi_source_path(start_nodes, method, target, cut_off, weight_name, num_thread)\n\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - multi_multi_source_all\uff1a  - \u591a\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u8fd4\u56de\u6240\u6709\u6700\u77ed\u8ba1\u7b97\u8def\u5f84\u548c\u82b1\u8d39</p> <p>Parameters:</p> Name Type Description Default <code>start_nodes</code> <code>list</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u4e8c\u7ef4\u5217\u8868\u3002\u6bcf\u4e2a\u5217\u8868\u4e2d\u7684\u5217\u8868\u662f\u4e00\u4e2a\u591a\u6e90\u8282\u70b9\u5217\u8868\u3002</p> required <code>method</code> <code>str</code> <p>\u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>target</code> <code>int</code> <p>\u8981\u5230\u8fbe\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c-1\uff0c\u5219\u67e5\u627e\u6240\u6709\u8282\u70b9\u7684\u8def\u5f84\u3002\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002</p> <code>-1</code> <code>cut_off</code> <code>float or int</code> <p>\u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u5982\u679c\u5176\u603b\u6743\u91cd\u8d85\u8fc7\u8be5\u503c,\u8def\u5f84\u88ab\u4e22\u5f03\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002</p> <code>None</code> <code>num_thread</code> <code>int</code> <p>\u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <code>1</code> <p>Returns:</p> Name Type Description <code>result</code> <code>dict</code> <p>dict: \u8fd4\u56de\u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u4e8c\u7ef4\u5217\u8868\uff1a\u5143\u7d20\u662f\u6bcf\u4e2a\u6e90\u8282\u70b9\u7684\u7ed3\u6784\u4f53dis_and_path,\u6b64\u7ed3\u6784\u4f53\u5305\u542b\u4e24\u4e2a\u5c5e\u6027{cost,paths}      \u5047\u8bbe\u8fd4\u56de\u7ed3\u679c\u4e3a\uff1a res_list\uff0c\u5219            \u7ed3\u679c\u7684\u7b2ck\u4e2a\u5143\u7d20\uff1ares_list[k]:            res_list[k].cost\u4e3a dict[int, float]: \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u82b1\u8d39\u7ed3\u679c\uff0c\u952e\u4e3a\u76ee\u6807\u8282\u70b9\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u82b1\u8d39            res_list[k].paths\u4e3a dict[int, list[int]]: \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u952e\u4e3a\u76ee\u6807\u8282\u70b9\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u5e8f\u5217\u8def\u5f84</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u4e8c\u7ef4\u6574\u6570\u5217\u8868\u3002 -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3002 -\u201ctarget\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002 -\u201ccut_off\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002 -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def multi_multi_source_all(self,\n                     start_nodes: list[list[int]],\n                     method: str = \"Dijkstra\",\n                     target: int = -1,\n                     cut_off: float = float('inf'),\n                     weight_name: str = None,\n                     num_thread: int = 1) -&gt; dict:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - multi_multi_source_all\uff1a**&lt;br&gt;\n     - \u591a\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u8fd4\u56de\u6240\u6709\u6700\u77ed\u8ba1\u7b97\u8def\u5f84\u548c\u82b1\u8d39\n\n    Args:\n        start_nodes (list): \u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u4e8c\u7ef4\u5217\u8868\u3002\u6bcf\u4e2a\u5217\u8868\u4e2d\u7684\u5217\u8868\u662f\u4e00\u4e2a\u591a\u6e90\u8282\u70b9\u5217\u8868\u3002\n        method (str): \u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        target (int): \u8981\u5230\u8fbe\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c-1\uff0c\u5219\u67e5\u627e\u6240\u6709\u8282\u70b9\u7684\u8def\u5f84\u3002\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002\n        cut_off (float or int): \u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u5982\u679c\u5176\u603b\u6743\u91cd\u8d85\u8fc7\u8be5\u503c,\u8def\u5f84\u88ab\u4e22\u5f03\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002\n        weight_name (str): \u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002\n        num_thread (int): \u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Returns:\n        result: dict: \u8fd4\u56de\u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u4e8c\u7ef4\u5217\u8868\uff1a\u5143\u7d20\u662f\u6bcf\u4e2a\u6e90\u8282\u70b9\u7684\u7ed3\u6784\u4f53dis_and_path,\u6b64\u7ed3\u6784\u4f53\u5305\u542b\u4e24\u4e2a\u5c5e\u6027{cost,paths} &lt;br&gt;\n                \u5047\u8bbe\u8fd4\u56de\u7ed3\u679c\u4e3a\uff1a res_list\uff0c\u5219 &lt;br&gt;\n                      \u7ed3\u679c\u7684\u7b2ck\u4e2a\u5143\u7d20\uff1ares_list[k]: &lt;br&gt;\n                      res_list[k].cost\u4e3a dict[int, float]: \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u82b1\u8d39\u7ed3\u679c\uff0c\u952e\u4e3a\u76ee\u6807\u8282\u70b9\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u82b1\u8d39 &lt;br&gt;\n                      res_list[k].paths\u4e3a dict[int, list[int]]: \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u952e\u4e3a\u76ee\u6807\u8282\u70b9\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u5e8f\u5217\u8def\u5f84\n\n\n    Raises:\n        ValueError: \u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a&lt;br&gt;\n            -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u4e8c\u7ef4\u6574\u6570\u5217\u8868\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3002&lt;br&gt;\n            -\u201ctarget\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002&lt;br&gt;\n            -\u201ccut_off\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002&lt;br&gt;\n            -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002\n    \"\"\"\n    if 1:\n        # \u68c0\u67e5 list_o \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n        if not isinstance(start_nodes, list):\n            raise ValueError(f\"Invalid value for 'start_nodes': {start_nodes}. It must be a list.\")\n\n        # \u68c0\u67e5 start_nodes \u662f\u5426\u662f\u4e8c\u7ef4\u5217\u8868\n        if not all(isinstance(node, list) for node in start_nodes):\n            raise ValueError(f\"Invalid value for 'start_nodes': {start_nodes}. It must be a list of lists.\")\n\n        # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n        valid_methods = [\"Dijkstra\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n        if method not in valid_methods:\n            raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n        # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(target, int):\n            raise ValueError(f\"Invalid value for 'target': {target}. It must be a integer.\")\n\n        # \u68c0\u67e5 cut_off \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6d6e\u52a8\u6570\n        if not isinstance(cut_off, (int, float)) or cut_off &lt; 0:\n            raise ValueError(f\"Invalid value for 'cut_off': {cut_off}. It must be a non-negative number.\")\n\n        # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216 None\n        if weight_name is not None and not isinstance(weight_name, str):\n            raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be either a string or None.\")\n\n        # \u68c0\u67e5 num_thread \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(num_thread, int):\n            raise ValueError(f\"Invalid value for 'num_thread': {num_thread}. It must be a integer.\")\n\n    if weight_name is None:\n        weight_name = \"\"\n    result = self.graph.multi_multi_source_all(start_nodes, method, target, cut_off, weight_name, num_thread)\n\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - cost_matrix\uff1a  - \u8f93\u5165\u8d77\u70b9\u5217\u8868\u548c\u7ec8\u70b9\u5217\u8868\uff0c\u8ba1\u7b97\u83b7\u5f97\u4e00\u4e2a\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u82b1\u8d39\u77e9\u9635</p> <p>Parameters:</p> Name Type Description Default <code>start_nodes</code> <code>list of ints</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u5e94\u8be5\u53ef\u4ee5\u662f\u8868\u793a\u5355\u4e2a\u8d77\u59cb\u8282\u70b9\u7684\u6574\u6570\u3002</p> required <code>end_nodes</code> <code>list of ints</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u7ed3\u675f\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u5e94\u8be5\u3002</p> required <code>method</code> <code>str</code> <p>\u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>cut_off</code> <code>float or int</code> <p>\u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u8def\u5f84\u88ab\u4e22\u5f03\u5982\u679c\u5176\u603b\u91cd\u91cf\u8d85\u8fc7\u8be5\u503c\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002</p> <code>None</code> <code>num_thread</code> <code>int</code> <p>\u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <code>1</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002 -\u201cend_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002 -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3002 -\u201ccut_off\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002 -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <p>Returns:</p> Type Description <code>ndarray</code> <p>numpy.ndarray: \u4e00\u4e2anumpy\u6570\u7ec4\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u6700\u77ed\u8def\u5f84\u6210\u672c \u6570\u7ec4\u7684\u7ef4\u5ea6\u5c06\u662flen\uff08start_nodes\uff09x len\uff08end_nodes\u201d\uff09 \u5047\u8bbe\u8fd4\u56de\u7ed3\u679c\u662fres\uff1a \u5219 resm\u4ee3\u8868\u4e86\u4ecem\u5230n\u7684\u82b1\u8d39</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def cost_matrix(self,\n             start_nodes: list[int],\n             end_nodes: list[int],\n             method: str = \"Dijkstra\",\n             cut_off: float = float('inf'),\n             weight_name: str = None,\n             num_thread: int = 1) -&gt; np.ndarray:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - cost_matrix\uff1a**\n     - \u8f93\u5165\u8d77\u70b9\u5217\u8868\u548c\u7ec8\u70b9\u5217\u8868\uff0c\u8ba1\u7b97\u83b7\u5f97\u4e00\u4e2a\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u82b1\u8d39\u77e9\u9635\n\n    Args:\n        start_nodes (list of ints): \u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u5e94\u8be5\u53ef\u4ee5\u662f\u8868\u793a\u5355\u4e2a\u8d77\u59cb\u8282\u70b9\u7684\u6574\u6570\u3002\n        end_nodes (list of ints): \u8def\u5f84\u641c\u7d22\u7684\u7ed3\u675f\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u5e94\u8be5\u3002\n        method (str): \u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        cut_off (float or int): \u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u8def\u5f84\u88ab\u4e22\u5f03\u5982\u679c\u5176\u603b\u91cd\u91cf\u8d85\u8fc7\u8be5\u503c\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002\n        weight_name (str): \u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002\n        num_thread (int): \u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Raises:\n        ValueError: \u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a&lt;br&gt;\n            -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002&lt;br&gt;\n            -\u201cend_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3002&lt;br&gt;\n            -\u201ccut_off\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002&lt;br&gt;\n            -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Returns:\n        numpy.ndarray: \u4e00\u4e2anumpy\u6570\u7ec4\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u6700\u77ed\u8def\u5f84\u6210\u672c&lt;br&gt;\n            \u6570\u7ec4\u7684\u7ef4\u5ea6\u5c06\u662flen\uff08start_nodes\uff09x len\uff08end_nodes\u201d\uff09&lt;br&gt;\n            \u5047\u8bbe\u8fd4\u56de\u7ed3\u679c\u662fres\uff1a \u5219&lt;br&gt;\n            res[m][n]\u4ee3\u8868\u4e86\u4ecem\u5230n\u7684\u82b1\u8d39\n    \"\"\"\n    if 1:\n        # \u68c0\u67e5 start_nodes \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n        if not isinstance(start_nodes, list):\n            raise ValueError(f\"Invalid value for 'start_nodes': {start_nodes}. It must be a list.\")\n\n        # \u68c0\u67e5 end_nodes \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n        if not isinstance(end_nodes, list):\n            raise ValueError(f\"Invalid value for 'end_nodes': {end_nodes}. It must be a list.\")\n\n        # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n        valid_methods = [\"Dijkstra\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n        if method not in valid_methods:\n            raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n        # \u68c0\u67e5 cut_off \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6d6e\u52a8\u6570\n        if not isinstance(cut_off, (int, float)) or cut_off &lt; 0:\n            raise ValueError(f\"Invalid value for 'cut_off': {cut_off}. It must be a non-negative number.\")\n\n        # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216 None\n        if weight_name is not None and not isinstance(weight_name, str):\n            raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be either a string or None.\")\n\n        # \u68c0\u67e5 num_thread \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(num_thread, int):\n            raise ValueError(f\"Invalid value for 'num_thread': {num_thread}. It must be a integer.\")\n\n    if weight_name is None:\n        weight_name = \"\"\n    result = self.graph.cost_matrix(start_nodes, end_nodes, method, cut_off, weight_name, num_thread)\n\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - path_dict\uff1a  - - \u8f93\u5165\u8d77\u70b9\u5217\u8868\u548c\u7ec8\u70b9\u5217\u8868\uff0c\u8ba1\u7b97\u83b7\u5f97\u4e00\u4e2a\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u8def\u5f84\u5217\u8868</p> <p>Parameters:</p> Name Type Description Default <code>start_nodes</code> <code>list of ints</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u5e94\u8be5\u53ef\u4ee5\u662f\u8868\u793a\u5355\u4e2a\u8d77\u59cb\u8282\u70b9\u7684\u6574\u6570\u3002</p> required <code>end_nodes</code> <code>list of ints</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u7ed3\u675f\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u5e94\u8be5\u3002</p> required <code>method</code> <code>str</code> <p>\u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>cut_off</code> <code>float or int</code> <p>\u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u8def\u5f84\u88ab\u4e22\u5f03\u5982\u679c\u5176\u603b\u91cd\u91cf\u8d85\u8fc7\u8be5\u503c\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002</p> <code>None</code> <code>num_thread</code> <code>int</code> <p>\u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <code>1</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002 -\u201cend_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002 -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3002 -\u201ccut_off\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002 -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <p>Returns:</p> Type Description <code>dict[tuple[int, int], list[int]]</code> <p>dict[tuple[int, int], list[int]]: \u5b57\u5178\uff0c\u5176\u4e2d\u6bcf\u4e2a\u952e\u8868\u793a \u8d77\u70b9-\u7ec8\u70b9 \u7684\u8def\u5f84\uff08\u4f5c\u4e3a\u8282\u70b9\u5217\u8868\uff09\uff0c\u6bcf\u4e2a\u503c\u8868\u793a\u6700\u77ed\u8def\u5f84\u3002 \u4f8b\u5982\uff1a [(1,3):[2,3], (1,4):[2,3,4]]</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def path_dict(self,\n              start_nodes: list[int],\n              end_nodes: list[int],\n              method: str = \"Dijkstra\",\n              cut_off: float = float('inf'),\n              weight_name: str = None,\n              num_thread: int = 1) -&gt; dict[tuple[int, int], list[int]]:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - path_dict\uff1a**\n     - - \u8f93\u5165\u8d77\u70b9\u5217\u8868\u548c\u7ec8\u70b9\u5217\u8868\uff0c\u8ba1\u7b97\u83b7\u5f97\u4e00\u4e2a\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u8def\u5f84\u5217\u8868\n\n    Args:\n        start_nodes (list of ints): \u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u5e94\u8be5\u53ef\u4ee5\u662f\u8868\u793a\u5355\u4e2a\u8d77\u59cb\u8282\u70b9\u7684\u6574\u6570\u3002\n        end_nodes (list of ints): \u8def\u5f84\u641c\u7d22\u7684\u7ed3\u675f\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u5e94\u8be5\u3002\n        method (str): \u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        cut_off (float or int): \u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u8def\u5f84\u88ab\u4e22\u5f03\u5982\u679c\u5176\u603b\u91cd\u91cf\u8d85\u8fc7\u8be5\u503c\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002\n        weight_name (str): \u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002\n        num_thread (int): \u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Raises:\n        ValueError: \u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a&lt;br&gt;\n            -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002&lt;br&gt;\n            -\u201cend_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3002&lt;br&gt;\n            -\u201ccut_off\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002&lt;br&gt;\n            -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Returns:\n        dict[tuple[int, int], list[int]]: \u5b57\u5178\uff0c\u5176\u4e2d\u6bcf\u4e2a\u952e\u8868\u793a \u8d77\u70b9-\u7ec8\u70b9 \u7684\u8def\u5f84\uff08\u4f5c\u4e3a\u8282\u70b9\u5217\u8868\uff09\uff0c\u6bcf\u4e2a\u503c\u8868\u793a\u6700\u77ed\u8def\u5f84\u3002 \u4f8b\u5982\uff1a&lt;br&gt;\n            [(1,3):[2,3],&lt;br&gt;\n            (1,4):[2,3,4]]\n    \"\"\"\n    if 1:\n        # \u68c0\u67e5 start_nodes \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n        if not isinstance(start_nodes, list):\n            raise ValueError(f\"Invalid value for 'start_nodes': {start_nodes}. It must be a list.\")\n\n        # \u68c0\u67e5 end_nodes \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n        if not isinstance(end_nodes, list):\n            raise ValueError(f\"Invalid value for 'end_nodes': {end_nodes}. It must be a list.\")\n\n        # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n        valid_methods = [\"Dijkstra\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n        if method not in valid_methods:\n            raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n        # \u68c0\u67e5 cut_off \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6d6e\u52a8\u6570\n        if not isinstance(cut_off, (int, float)) or cut_off &lt; 0:\n            raise ValueError(f\"Invalid value for 'cut_off': {cut_off}. It must be a non-negative number.\")\n\n        # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216 None\n        if weight_name is not None and not isinstance(weight_name, str):\n            raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be either a string or None.\")\n\n        # \u68c0\u67e5 num_thread \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(num_thread, int):\n            raise ValueError(f\"Invalid value for 'num_thread': {num_thread}. It must be a integer.\")\n\n    if weight_name is None:\n        weight_name = \"\"\n    result = self.graph.path_dict(start_nodes, end_nodes, method, cut_off, weight_name, num_thread)\n\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - path_dict_pairwise\uff1a  - - \u8f93\u5165\u8d77\u70b9\u5217\u8868\u548c\u7ec8\u70b9\u5217\u8868\uff0c\u8ba1\u7b97\u83b7\u5f97\u4e00\u4e00\u5bf9\u5e94\u7684\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u8def\u5f84</p> <p>Parameters:</p> Name Type Description Default <code>start_nodes</code> <code>list of ints</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u5e94\u8be5\u53ef\u4ee5\u662f\u8868\u793a\u5355\u4e2a\u8d77\u59cb\u8282\u70b9\u7684\u6574\u6570\u3002</p> required <code>end_nodes</code> <code>list of ints</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u7ed3\u675f\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u5e94\u8be5\u3002</p> required <code>method</code> <code>str</code> <p>\u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>weight_name</code> <code>str</code> <p>\u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002</p> <code>None</code> <code>num_thread</code> <code>int</code> <p>\u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <code>1</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a -\"start_nodes\"\u548c\"end_nodes\"\u7684\u957f\u5ea6\u5fc5\u987b\u4e00\u81f4\u3002 -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002 -\u201cend_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002 -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3002 -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002 -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <p>Returns:</p> Type Description <code>dict[tuple[int, int], list[int]]</code> <p>dict[tuple[int, int], list[int]]: \u5b57\u5178\uff0c\u5176\u4e2d\u6bcf\u4e2a\u952e\u8868\u793a \u8d77\u70b9-\u7ec8\u70b9 \u7684\u8def\u5f84\uff08\u4f5c\u4e3a\u8282\u70b9\u5217\u8868\uff09\uff0c\u6bcf\u4e2a\u503c\u8868\u793a\u6700\u77ed\u8def\u5f84\u3002 \u4f8b\u5982\uff1a [(1,3):[2,3], (1,4):[2,3,4]]</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def path_dict_pairwise(self,\n                      start_nodes: list[int],\n                      end_nodes: list[int],\n                      method: str = \"Dijkstra\",\n                      weight_name: str = None,\n                      num_thread: int = 1) -&gt; dict[tuple[int, int], list[int]]:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - path_dict_pairwise\uff1a**\n     - - \u8f93\u5165\u8d77\u70b9\u5217\u8868\u548c\u7ec8\u70b9\u5217\u8868\uff0c\u8ba1\u7b97\u83b7\u5f97\u4e00\u4e00\u5bf9\u5e94\u7684\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u8def\u5f84\n\n    Args:\n        start_nodes (list of ints): \u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u5e94\u8be5\u53ef\u4ee5\u662f\u8868\u793a\u5355\u4e2a\u8d77\u59cb\u8282\u70b9\u7684\u6574\u6570\u3002\n        end_nodes (list of ints): \u8def\u5f84\u641c\u7d22\u7684\u7ed3\u675f\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u5e94\u8be5\u3002\n        method (str): \u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        weight_name (str): \u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002\n        num_thread (int): \u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Raises:\n        ValueError: \u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a&lt;br&gt;\n            -\"start_nodes\"\u548c\"end_nodes\"\u7684\u957f\u5ea6\u5fc5\u987b\u4e00\u81f4\u3002&lt;br&gt;\n            -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002&lt;br&gt;\n            -\u201cend_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002&lt;br&gt;\n            -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Returns:\n        dict[tuple[int, int], list[int]]: \u5b57\u5178\uff0c\u5176\u4e2d\u6bcf\u4e2a\u952e\u8868\u793a \u8d77\u70b9-\u7ec8\u70b9 \u7684\u8def\u5f84\uff08\u4f5c\u4e3a\u8282\u70b9\u5217\u8868\uff09\uff0c\u6bcf\u4e2a\u503c\u8868\u793a\u6700\u77ed\u8def\u5f84\u3002 \u4f8b\u5982\uff1a&lt;br&gt;\n            [(1,3):[2,3],&lt;br&gt;\n            (1,4):[2,3,4]]\n    \"\"\"\n    if 1:\n        # \u68c0\u67e5 start_nodes \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n        if not isinstance(start_nodes, list):\n            raise ValueError(f\"Invalid value for 'start_nodes': {start_nodes}. It must be a list.\")\n\n        # \u68c0\u67e5 end_nodes \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n        if not isinstance(end_nodes, list):\n            raise ValueError(f\"Invalid value for 'end_nodes': {end_nodes}. It must be a list.\")\n\n        # \u68c0\u67e5 start_nodes \u548c end_nodes \u957f\u5ea6\u4e00\u81f4\n        if len(start_nodes) != len(end_nodes):\n            raise ValueError(f\"'start_nodes' and 'end_nodes' must have the same length. \"\n                             f\"Got {len(start_nodes)} and {len(end_nodes)}.\")\n\n        # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n        valid_methods = [\"Dijkstra\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n        if method not in valid_methods:\n            raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n        # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216 None\n        if weight_name is not None and not isinstance(weight_name, str):\n            raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be either a string or None.\")\n\n        # \u68c0\u67e5 num_thread \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(num_thread, int):\n            raise ValueError(f\"Invalid value for 'num_thread': {num_thread}. It must be a integer.\")\n\n    if weight_name is None:\n        weight_name = \"\"\n    result = self.graph.path_dict_pairwise(start_nodes, end_nodes, method, weight_name, num_thread)\n\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - k_shortest_paths\uff1a - - \u8f93\u5165\u8d77\u70b9\u548c\u76ee\u6807\u70b9\uff0c\u548c\u8981\u83b7\u53d6\u7684\u6700\u77ed\u8def\u6570\u91cf\uff0c\u83b7\u5f97\u82b1\u8d39\u4ece\u5c0f\u5230\u5927\u7684\u6700\u77ed\u8def\u5f84\u5e8f\u5217</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>int</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u8d77\u70b9\u3002</p> required <code>target</code> <code>int</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u7ec8\u70b9\u3002</p> required <code>num</code> <code>int</code> <p>\u8981\u83b7\u53d6\u6700\u77ed\u8def\u5f84\u7684\u6570\u91cf\u3002</p> required <code>weight_name</code> <code>str</code> <p>\u8981\u4f7f\u7528\u7684\u6743\u91cd\u7684\u5b57\u6bb5\u540d\u79f0\u3002\u9ed8\u8ba4\u503c\u4e3aNone\u3002</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a -\u201csource\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002 -\u201ctarget\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002 -\u201cnum\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002 -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002</p> <p>Returns:</p> Type Description <code>list[list[int]]</code> <p>list[list[int]]: \u4e8c\u7ef4\u5217\u8868\uff0c\u6309\u82b1\u8d39\u4ece\u5c0f\u5230\u5927\u8fd4\u56de\u5e8f\u5217\u8def\u5f84\u3002 \u4f8b\u5982\uff1a [[1,3,5],  [1,2,5],  [1,4,5]]</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def k_shortest_paths(self,\n                   source: int,\n                   target: int,\n                   num: int,\n                   weight_name: str = None) -&gt; list[list[int]]:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - k_shortest_paths\uff1a**\n    - - \u8f93\u5165\u8d77\u70b9\u548c\u76ee\u6807\u70b9\uff0c\u548c\u8981\u83b7\u53d6\u7684\u6700\u77ed\u8def\u6570\u91cf\uff0c\u83b7\u5f97\u82b1\u8d39\u4ece\u5c0f\u5230\u5927\u7684\u6700\u77ed\u8def\u5f84\u5e8f\u5217\n\n    Args:\n        source (int): \u8def\u5f84\u641c\u7d22\u7684\u8d77\u70b9\u3002\n        target (int): \u8def\u5f84\u641c\u7d22\u7684\u7ec8\u70b9\u3002\n        num (int): \u8981\u83b7\u53d6\u6700\u77ed\u8def\u5f84\u7684\u6570\u91cf\u3002\n        weight_name (str): \u8981\u4f7f\u7528\u7684\u6743\u91cd\u7684\u5b57\u6bb5\u540d\u79f0\u3002\u9ed8\u8ba4\u503c\u4e3aNone\u3002\n\n    Raises:\n        ValueError: \u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a&lt;br&gt;\n            -\u201csource\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002&lt;br&gt;\n            -\u201ctarget\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002&lt;br&gt;\n            -\u201cnum\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002&lt;br&gt;\n\n    Returns:\n        list[list[int]]: \u4e8c\u7ef4\u5217\u8868\uff0c\u6309\u82b1\u8d39\u4ece\u5c0f\u5230\u5927\u8fd4\u56de\u5e8f\u5217\u8def\u5f84\u3002 \u4f8b\u5982\uff1a&lt;br&gt;\n            [[1,3,5],\n             [1,2,5],\n             [1,4,5]]\n    \"\"\"\n    if 1:\n        # \u68c0\u67e5 source \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(source, int):\n            raise ValueError(f\"Invalid value for 'source': {source}. It must be a int.\")\n\n        # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(target, int):\n            raise ValueError(f\"Invalid value for 'target': {target}. It must be a int.\")\n\n        # \u68c0\u67e5 num \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n        if not isinstance(num, int):\n            raise ValueError(f\"Invalid value for 'num': {num}. It must be a int.\")\n\n        # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216 None\n        if weight_name is not None and not isinstance(weight_name, str):\n            raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be either a string or None.\")\n\n    if weight_name is None:\n        weight_name = \"\"\n    result = self.graph.k_shortest_paths(source, target, num, weight_name)\n\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - shortest_path_cost\uff1a - - \u8f93\u5165\u8d77\u70b9\u548c\u76ee\u6807\u70b9\uff0c\u548c\u8981\u83b7\u53d6\u7684\u6700\u77ed\u8def\u6570\u91cf\uff0c\u83b7\u5f97\u82b1\u8d39\u4ece\u5c0f\u5230\u5927\u7684\u6700\u77ed\u8def\u5f84\u5e8f\u5217</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>int</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u8d77\u70b9\u3002</p> required <code>target</code> <code>int</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u7ec8\u70b9\u3002</p> required <code>weight_name</code> <code>str</code> <p>\u8981\u4f7f\u7528\u7684\u6743\u91cd\u7684\u5b57\u6bb5\u540d\u79f0\u3002\u9ed8\u8ba4\u503c\u4e3aNone\u3002</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a -\u201csource\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002 -\u201ctarget\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002 -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002</p> <p>Returns:</p> Name Type Description <code>double</code> <code>float</code> <p>\u6700\u77ed\u8def\u5f84\u5230\u8fbe\u76ee\u6807\u8282\u70b9\u7684\u82b1\u8d39\u3002 \u4f8b\u5982\uff1a 2.0</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def shortest_path_cost(self,\n                   source: int,\n                   target: int,\n                   weight_name: str = None) -&gt; float:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - shortest_path_cost\uff1a**\n    - - \u8f93\u5165\u8d77\u70b9\u548c\u76ee\u6807\u70b9\uff0c\u548c\u8981\u83b7\u53d6\u7684\u6700\u77ed\u8def\u6570\u91cf\uff0c\u83b7\u5f97\u82b1\u8d39\u4ece\u5c0f\u5230\u5927\u7684\u6700\u77ed\u8def\u5f84\u5e8f\u5217\n\n    Args:\n       source (int): \u8def\u5f84\u641c\u7d22\u7684\u8d77\u70b9\u3002\n       target (int): \u8def\u5f84\u641c\u7d22\u7684\u7ec8\u70b9\u3002\n       weight_name (str): \u8981\u4f7f\u7528\u7684\u6743\u91cd\u7684\u5b57\u6bb5\u540d\u79f0\u3002\u9ed8\u8ba4\u503c\u4e3aNone\u3002\n\n    Raises:\n        ValueError: \u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a&lt;br&gt;\n           -\u201csource\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002&lt;br&gt;\n           -\u201ctarget\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002&lt;br&gt;\n           -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002&lt;br&gt;\n\n    Returns:\n        double: \u6700\u77ed\u8def\u5f84\u5230\u8fbe\u76ee\u6807\u8282\u70b9\u7684\u82b1\u8d39\u3002 \u4f8b\u5982\uff1a&lt;br&gt;\n           2.0\n    \"\"\"\n    if 1:\n        # \u68c0\u67e5 source \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(source, int):\n            raise ValueError(f\"Invalid value for 'source': {source}. It must be a int.\")\n\n        # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(target, int):\n            raise ValueError(f\"Invalid value for 'target': {target}. It must be a int.\")\n\n        # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216 None\n        if weight_name is not None and not isinstance(weight_name, str):\n            raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be either a string or None.\")\n\n    if weight_name is None:\n        weight_name = \"\"\n    result = self.graph.shortest_path_cost(source, target, weight_name)\n\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - shortest_path_path\uff1a - - \u8f93\u5165\u8d77\u70b9\u548c\u76ee\u6807\u70b9\uff0c\u548c\u8981\u83b7\u53d6\u7684\u6700\u77ed\u8def\u6570\u91cf\uff0c\u83b7\u5f97\u82b1\u8d39\u4ece\u5c0f\u5230\u5927\u7684\u6700\u77ed\u8def\u5f84\u5e8f\u5217</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>int</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u8d77\u70b9\u3002</p> required <code>target</code> <code>int</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u7ec8\u70b9\u3002</p> required <code>weight_name</code> <code>str</code> <p>\u8981\u4f7f\u7528\u7684\u6743\u91cd\u7684\u5b57\u6bb5\u540d\u79f0\u3002\u9ed8\u8ba4\u503c\u4e3aNone\u3002</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a -\u201csource\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002 -\u201ctarget\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002 -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002</p> <p>Returns:</p> Type Description <code>list[int]</code> <p>list[int]: \u6700\u77ed\u8def\u5f84\u5230\u8fbe\u76ee\u6807\u8282\u70b9\u7684\u8def\u5f84\u3002 \u4f8b\u5982\uff1a [1,4,5]</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def shortest_path_path(self,\n                   source: int,\n                   target: int,\n                   weight_name: str = None) -&gt; list[int]:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - shortest_path_path\uff1a**\n    - - \u8f93\u5165\u8d77\u70b9\u548c\u76ee\u6807\u70b9\uff0c\u548c\u8981\u83b7\u53d6\u7684\u6700\u77ed\u8def\u6570\u91cf\uff0c\u83b7\u5f97\u82b1\u8d39\u4ece\u5c0f\u5230\u5927\u7684\u6700\u77ed\u8def\u5f84\u5e8f\u5217\n\n    Args:\n       source (int): \u8def\u5f84\u641c\u7d22\u7684\u8d77\u70b9\u3002\n       target (int): \u8def\u5f84\u641c\u7d22\u7684\u7ec8\u70b9\u3002\n       weight_name (str): \u8981\u4f7f\u7528\u7684\u6743\u91cd\u7684\u5b57\u6bb5\u540d\u79f0\u3002\u9ed8\u8ba4\u503c\u4e3aNone\u3002\n\n    Raises:\n        ValueError: \u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a&lt;br&gt;\n           -\u201csource\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002&lt;br&gt;\n           -\u201ctarget\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002&lt;br&gt;\n           -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002\n\n    Returns:\n        list[int]: \u6700\u77ed\u8def\u5f84\u5230\u8fbe\u76ee\u6807\u8282\u70b9\u7684\u8def\u5f84\u3002 \u4f8b\u5982\uff1a&lt;br&gt;\n           [1,4,5]\n    \"\"\"\n    if 1:\n        # \u68c0\u67e5 source \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(source, int):\n            raise ValueError(f\"Invalid value for 'source': {source}. It must be a int.\")\n\n        # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(target, int):\n            raise ValueError(f\"Invalid value for 'target': {target}. It must be a int.\")\n\n        # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216 None\n        if weight_name is not None and not isinstance(weight_name, str):\n            raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be either a string or None.\")\n\n    if weight_name is None:\n        weight_name = \"\"\n    result = self.graph.shortest_path_path(source, target, weight_name)\n\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - shortest_path_all\uff1a - - \u8f93\u5165\u8d77\u70b9\u548c\u76ee\u6807\u70b9\uff0c\u548c\u8981\u83b7\u53d6\u7684\u6700\u77ed\u8def\u6570\u91cf\uff0c\u83b7\u5f97\u82b1\u8d39\u4ece\u5c0f\u5230\u5927\u7684\u6700\u77ed\u8def\u5f84\u5e8f\u5217</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>int</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u8d77\u70b9\u3002</p> required <code>target</code> <code>int</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u7ec8\u70b9\u3002</p> required <code>weight_name</code> <code>str</code> <p>\u8981\u4f7f\u7528\u7684\u6743\u91cd\u7684\u5b57\u6bb5\u540d\u79f0\u3002\u9ed8\u8ba4\u503c\u4e3aNone\u3002</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a -\u201csource\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002 -\u201ctarget\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002 -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002</p> <p>Returns:</p> Type Description <code>tuple[float, list[int]]</code> <p>tuple[float, list[int]]: \u6700\u77ed\u8def\u5f84\u5230\u8fbe\u76ee\u6807\u8282\u70b9\u7684\u82b1\u8d39\u548c\u8def\u5f84\u3002 \u4f8b\u5982\uff1a [2.0, [1, 4, 5]]</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def shortest_path_all(self,\n                   source: int,\n                   target: int,\n                   weight_name: str = None) -&gt; tuple[float, list[int]]:\n    \"\"\"**\u7c7b\u65b9\u6cd5 - shortest_path_all\uff1a**\n    - - \u8f93\u5165\u8d77\u70b9\u548c\u76ee\u6807\u70b9\uff0c\u548c\u8981\u83b7\u53d6\u7684\u6700\u77ed\u8def\u6570\u91cf\uff0c\u83b7\u5f97\u82b1\u8d39\u4ece\u5c0f\u5230\u5927\u7684\u6700\u77ed\u8def\u5f84\u5e8f\u5217\n\n    Args:\n       source (int): \u8def\u5f84\u641c\u7d22\u7684\u8d77\u70b9\u3002\n       target (int): \u8def\u5f84\u641c\u7d22\u7684\u7ec8\u70b9\u3002\n       weight_name (str): \u8981\u4f7f\u7528\u7684\u6743\u91cd\u7684\u5b57\u6bb5\u540d\u79f0\u3002\u9ed8\u8ba4\u503c\u4e3aNone\u3002\n\n    Raises:\n        ValueError: \u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a&lt;br&gt;\n           -\u201csource\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002&lt;br&gt;\n           -\u201ctarget\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002&lt;br&gt;\n           -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002&lt;br&gt;\n\n    Returns:\n        tuple[float, list[int]]: \u6700\u77ed\u8def\u5f84\u5230\u8fbe\u76ee\u6807\u8282\u70b9\u7684\u82b1\u8d39\u548c\u8def\u5f84\u3002 \u4f8b\u5982\uff1a&lt;br&gt;\n           [2.0, [1, 4, 5]]\n    \"\"\"\n    if 1:\n        # \u68c0\u67e5 source \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(source, int):\n            raise ValueError(f\"Invalid value for 'source': {source}. It must be a int.\")\n\n        # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n        if not isinstance(target, int):\n            raise ValueError(f\"Invalid value for 'target': {target}. It must be a int.\")\n\n        # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216 None\n        if weight_name is not None and not isinstance(weight_name, str):\n            raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be either a string or None.\")\n\n    if weight_name is None:\n        weight_name = \"\"\n    result = self.graph.shortest_path_all(source, target, weight_name)\n\n    return result\n</code></pre>"}]}