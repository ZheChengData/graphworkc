{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u9879\u76ee\u4e3b\u9875","text":""},{"location":"#_1","title":"\u8def\u7f51\u6700\u77ed\u8def\u5f84\u4e0e\u82b1\u8d39\u8ba1\u7b97\u5de5\u5177","text":"<p>GraphWorkC \u662f\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u65e8\u5728\u4e3a\u7528\u6237\u63d0\u4f9b\u9ad8\u6548\u7684\u8def\u7f51\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u529f\u80fd\uff0c\u652f\u6301\u5728\u591a\u4e2a\u8def\u5f84\u8ba1\u7b97\u6a21\u578b\u4e2d\u67e5\u627e\u6700\u77ed\u8def\u5f84\u548c\u6700\u5c11\u82b1\u8d39\u3002\u8be5\u5de5\u5177\u4e13\u4e3a\u8fd0\u8f93\u548c\u7f51\u7edc\u4f18\u5316\u9886\u57df\u8bbe\u8ba1\uff0c\u5e2e\u52a9\u7528\u6237\u5728\u590d\u6742\u7684\u8def\u7f51\u4e2d\u5feb\u901f\u83b7\u53d6\u4ece\u4e00\u4e2a\u51fa\u53d1\u70b9\u5230\u76ee\u7684\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u540c\u65f6\u8003\u8651\u8def\u5f84\u4e0a\u7684\u82b1\u8d39\u56e0\u7d20\uff0c\u63d0\u4f9b\u66f4\u52a0\u7075\u6d3b\u548c\u5b9e\u7528\u7684\u51b3\u7b56\u652f\u6301\u3002</p>"},{"location":"#_2","title":"\u4e3b\u8981\u529f\u80fd\uff1a","text":"<ul> <li>\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff1a\u57fa\u4e8e\u7ed9\u5b9a\u7684 OD\uff08Origin-Destination\uff09\u5bf9\uff0c\u8ba1\u7b97\u5e76\u8fd4\u56de\u6700\u77ed\u8def\u5f84\u3002</li> <li>\u6700\u5c11\u82b1\u8d39\u8ba1\u7b97\uff1a\u8003\u8651\u8def\u7f51\u4e2d\u7684\u82b1\u8d39\u4fe1\u606f\uff0c\u8ba1\u7b97\u4ece\u6e90\u70b9\u5230\u76ee\u7684\u70b9\u7684\u6700\u5c11\u82b1\u8d39\u8def\u5f84\u3002</li> <li>\u9ad8\u6548\u7b97\u6cd5\uff1a\u4f7f\u7528\u9ad8\u6548\u7684\u56fe\u8bba\u7b97\u6cd5\uff0c\u786e\u4fdd\u5373\u4f7f\u5728\u5927\u89c4\u6a21\u8def\u7f51\u6570\u636e\u4e0b\u4e5f\u80fd\u5feb\u901f\u8ba1\u7b97\u7ed3\u679c\u3002</li> <li>\u7075\u6d3b\u7684\u914d\u7f6e\uff1a\u652f\u6301\u7528\u6237\u6839\u636e\u5b9e\u9645\u9700\u6c42\u81ea\u5b9a\u4e49\u8def\u7f51\u7ed3\u6784\u548c\u8ba1\u7b97\u6a21\u578b\uff0c\u4fbf\u4e8e\u9002\u5e94\u5404\u79cd\u5e94\u7528\u573a\u666f\u3002</li> </ul>"},{"location":"#_3","title":"\u4f7f\u7528\u573a\u666f\uff1a","text":"<ul> <li>\u4ea4\u901a\u8fd0\u8f93\uff1a\u9002\u7528\u4e8e\u57ce\u5e02\u4ea4\u901a\u7ba1\u7406\u3001\u9053\u8def\u89c4\u5212\u7b49\u9886\u57df\uff0c\u5e2e\u52a9\u8ba1\u7b97\u6700\u4f18\u7684\u884c\u9a76\u8def\u7ebf\uff0c\u4f18\u5316\u4ea4\u901a\u6d41\u91cf\u3002</li> <li>\u7f51\u7edc\u4f18\u5316\uff1a\u53ef\u4ee5\u7528\u4e8e\u8ba1\u7b97\u4fe1\u606f\u4f20\u8f93\u7684\u6700\u77ed\u8def\u5f84\u6216\u6700\u4f4e\u6210\u672c\u8def\u5f84\uff0c\u63d0\u5347\u7f51\u7edc\u6548\u7387\u3002</li> <li>\u667a\u80fd\u7269\u6d41\uff1a\u4e3a\u7269\u6d41\u516c\u53f8\u63d0\u4f9b\u8def\u5f84\u4f18\u5316\u65b9\u6848\uff0c\u964d\u4f4e\u8fd0\u8f93\u6210\u672c\u548c\u65f6\u95f4\u3002</li> </ul>"},{"location":"#_4","title":"\u7279\u6027\uff1a","text":"<ul> <li>\u5f00\u6e90\uff1a\u9879\u76ee\u5b8c\u5168\u5f00\u6e90\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u81ea\u7531\u67e5\u770b\u548c\u8d21\u732e\u4ee3\u7801\u3002</li> <li>\u8de8\u5e73\u53f0\uff1a\u652f\u6301\u591a\u79cd\u64cd\u4f5c\u7cfb\u7edf\uff0c\u65b9\u4fbf\u7528\u6237\u5728\u4e0d\u540c\u73af\u5883\u4e0b\u4f7f\u7528\u3002</li> <li>\u6613\u4e8e\u96c6\u6210\uff1a\u63d0\u4f9b\u7b80\u5355\u6613\u7528\u7684 API \u63a5\u53e3\uff0c\u4fbf\u4e8e\u4e0e\u5176\u4ed6\u7cfb\u7edf\u96c6\u6210\u3002</li> </ul>"},{"location":"#_5","title":"\u5b89\u88c5\u4e0e\u4f7f\u7528\uff1a","text":"<p>\u4e0b\u8f7d\u5305\uff1a</p> <pre><code>pip install graphworkc\n</code></pre>"},{"location":"#_6","title":"\u8d21\u732e\uff1a","text":"<p>GraphWorkC \u662f\u4e00\u4e2a\u793e\u533a\u9a71\u52a8\u7684\u5f00\u6e90\u9879\u76ee\uff0c\u6211\u4eec\u6b22\u8fce\u6240\u6709\u5f00\u53d1\u8005\u4e3a\u9879\u76ee\u8d21\u732e\u4ee3\u7801\u3001\u62a5\u544a bug \u6216\u63d0\u51fa\u6539\u8fdb\u5efa\u8bae\u3002\u8bf7\u67e5\u9605\u9879\u76ee\u7684 \u8d21\u732e\u6307\u5357 \u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002</p>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/","title":"\u5feb\u901f\u5f00\u59cb","text":"<p>\u6570\u636e\u4e0b\u8f7d\uff1a</p> <p>graphworkc/data/QuickStart at main \u00b7 ZheChengData/graphworkc</p>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#1-","title":"\u6848\u4f8b1 - \u5c0f\u6570\u636e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97","text":""},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_2","title":"\u6784\u5efa\u8def\u7f51\u5bf9\u8c61","text":"<pre><code>import graphworkc\n\nG = graphworkc.CGraph()\n\n# \u6784\u5efa\u4e00\u4e2a\u4ece1\u5230100\u7684\u6709\u5411\u56fe\nfor i in range(100):\n    G.add_edge(i, i+1, {\"weight\": 2})\n\n# \u589e\u5220\u6539\u67e5\nG.get_link_info(40, 41)  # \u67e5\u70b9\uff0c\u8fb9\uff0c\u56fe\nG.get_node_info(40)\nG.get_graph_info()\n\nG.add_edge(199, 200, {\"weight\": 2})  # \u65b0\u589e\u8fb9\nG.add_edges([(200, 201, {\"weight\": 2}),\n             (201, 202, {\"weight\": 2}),\n             (202, 203, {\"weight\": 2})])\n\nG.add_edge(40, 41, {\"weight\": 3})  # \u4fee\u6539\u5df2\u6709\u7684\u8fb9\nG.add_edge(41, 42, {\"weight\": 3})\n\nG.remove_edge(199, 200)  # \u5220\u9664\u8fb9\nG.remove_edges([(200, 201),\n             (201, 202),\n             (202, 203)])\n</code></pre>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_3","title":"\u8fdb\u884c\u6700\u77ed\u8def\u5f84\u8ba1\u7b97","text":"<pre><code># \u6700\u77ed\u8def\u8ba1\u7b97\n# \u591a\u6e90\u6700\u77ed\u8def\nmulti_result_path = G.multi_source_path([1, 10, 20],\n                                  cutoff=100,\n                                  weight_name=\"weight\")\nprint(f\"multi_result_path: {multi_result_path},\\n\"\n      f\"multi_result_path[50]: {multi_result_path[50]}\")\n\nsingle_result_cost = G.multi_source_cost([1, 10, 20],\n                                  cutoff=100,\n                                  weight_name=\"weight\")\nprint(f\"multi_result_cost: {single_result_cost},\\n\"\n      f\"multi_result_cost[50]: {single_result_cost[50]}\")\n\nsingle_result_all = G.multi_source_all([1, 10, 20],\n                                  cutoff=100,\n                                  weight_name=\"weight\")\ntest_path = single_result_all.paths\ntest_cost = single_result_all.cost\nprint(f\"multi_result_all_cost: {test_cost},\\n\"\n      f\"multi_result_all_paths: {test_path},\\n\"\n      f\"multi_result_all_cost[30]: {test_cost[30]},\\n\"\n      f\"multi_result_all_paths[30]: {test_path[30]}\")\n\n# \u5355\u6e90\u6700\u77ed\u8def\nmulti_result_path = G.single_source_path(1,\n                                  cutoff=100,\n                                  weight_name=\"weight\")\nprint(f\"single_result_path: {multi_result_path},\\n\"\n      f\"single_result_path[50]: {multi_result_path[50]}\")\n\n\nsingle_result_cost = G.single_source_cost(1,\n                                  cutoff=100,\n                                  weight_name=\"weight\")\nprint(f\"single_result_cost: {single_result_cost},\\n\"\n      f\"single_result_cost[10]: {single_result_cost[50]}\")\n\nsingle_result_all = G.single_source_all(1,\n                                  cutoff=100,\n                                  weight_name=\"weight\")\ntest_path = single_result_all.paths\ntest_cost = single_result_all.cost\nprint(f\"single_result_all_cost: {test_cost},\\n\"\n      f\"single_result_all_paths: {test_path},\\n\"\n      f\"single_result_all_cost[30]: {test_cost[30]},\\n\"\n      f\"single_result_all_paths[30]: {test_path[30]}\")\n\n# \u591a\u4e2a\u591a\u6e90\u6700\u77ed\u8def\nlist_o = [[1, 10], [10, 30], [20, 40]]\nmulti_single_result_paths = G.multi_multi_source_path(list_o, num_thread=16)\nprint(f\"multi_single_result_paths[0]: {multi_single_result_paths[0]}\")\n\nmulti_single_result_cost = G.multi_multi_source_cost(list_o, num_thread=16)\nprint(f\"multi_single_result_cost[0]: {multi_single_result_cost[0]}\")\n\nmulti_single_result_all = G.multi_multi_source_all(list_o, num_thread=16)\nprint(f\"multi_single_result_all[0]: {multi_single_result_all[0]}\")\n\n# \u82b1\u8d39\u77e9\u9635\u3001\u8def\u5f84\u5217\u8868 \nstarts = [1, 2]\nends = [10, 11, 12]\nresult = G.cost_matrix_to_numpy(starts, ends, num_thread=16)\nprint(f\"cost_matrix: \\n {result}\")\n\nresult1 = G.path_list_to_numpy(starts, ends, num_thread=16)\nprint(\"path_list: \\n\")\nfor pair in result1.items():\n    print(pair)\n</code></pre>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#2-","title":"\u6848\u4f8b2 - \u5927\u6570\u636e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97","text":""},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_4","title":"\u6784\u5efa\u8def\u7f51\u5bf9\u8c61","text":"<pre><code>import graphworkc\nimport pandas as pd\nimport time\nimport os\n\nG = graphworkc.CGraph()\n# C++ \u7aef\u6570\u636e\u8bfb\u5165\nif 1:\n    link_df = pd.read_csv(\"data/link.csv\")\n    od_df = pd.read_csv(\"data/od.csv\")\n    # 4. \u6dfb\u52a0\u8fb9\u53ca\u5176\u5c5e\u6027\u5230\u56fe\n    for _, row in link_df.iterrows():\n        from_node = row[\"FROM_NODE\"]\n        to_node = row[\"TO_NODE\"]\n        ab_capac = row[\"AB_CAPACIT\"]  # \u5bb9\u91cf\uff08A\u5230B\u65b9\u5411\uff09\n        ba_capac = row[\"BA_CAPACIT\"]  # \u5bb9\u91cf\uff08B\u5230A\u65b9\u5411\uff09\n        ab_fft = row[\"AB_FFT\"]  # \u6700\u77ed\u65f6\u95f4\uff08A\u5230B\u65b9\u5411\uff09\n        ba_fft = row[\"BA_FFT\"]  # \u6700\u77ed\u65f6\u95f4\uff08B\u5230A\u65b9\u5411\uff09\n        direction = row[\"DIR\"]  # \u65b9\u5411\u6027\uff0c\u5047\u8bbe1\u8868\u793a\u5355\u5411\uff0c0\u8868\u793a\u53cc\u5411\n        # \u6839\u636e\u65b9\u5411\u6027\u6dfb\u52a0\u8fb9\n        if direction == 1:  # \u5355\u5411 (A -&gt; B)\n            G.add_edge(from_node, to_node, {'weight': ab_fft})\n        elif direction == 0:  # \u53cc\u5411 (A &lt;-&gt; B)\n            G.add_edge(from_node, to_node, {'weight': ab_fft})\n            G.add_edge(to_node, from_node, {'weight': ba_fft})\n        elif direction == -1:\n            G.add_edge(to_node, from_node, {'weight': ba_fft})\n</code></pre>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_5","title":"\u8ba1\u7b97\u591a\u6e90\u6700\u77ed\u8def\u5f84","text":"<pre><code># \u542f\u52a8\u5217\u8868\uff1a0\uff1a\u4e0d\u542f\u7528\u51fd\u6570\uff1b1\uff1a\u542f\u7528\u51fd\u6570\n# 1\uff1a\u591a\u82b1\u8d39 2\uff1a\u591a\u8def\u5f84 3\uff1a\u591a\u6240\u6709 4\uff1a\u5355\u82b1\u8d39 5\uff1a\u5355\u8def\u5f84 6\uff1a\u5355\u6240\u6709\n# 7\uff1a\u591a\u5355\u82b1\u8d39 8\uff1a\u591a\u5355\u8def\u5f84 9\uff1a\u591a\u6240\u6709 10\uff1a\u591a\u591a\u82b1\u8d39 11\uff1a\u591a\u591a\u8def\u5f84 12\uff1a\u591a\u591a\u6240\u6709\nstart_list = [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1]\nmethod_list = [\"multi_source_cost\",\n               \"multi_source_path\",\n               \"multi_source_all\",\n               \"single_source_cost\",\n               \"single_source_path\",\n               \"single_source_all\",\n               \"multi_single_source_cost\",\n               \"multi_single_source_path\",\n               \"multi_single_source_all\",\n               \"multi_multi_source_cost\",\n               \"multi_multi_source_path\",\n               \"multi_multi_source_all\"]\n\nfor i in range(len(start_list)):\n    if start_list[i] == 1 and 0 &lt;= i &lt;= 2:\n        # \u83b7\u53d6\u5bf9\u8c61\u7684\u65b9\u6cd5\n        method = getattr(G, method_list[i], None)\n        if callable(method):  # \u786e\u4fdd\u8be5\u5c5e\u6027\u662f\u4e00\u4e2a\u65b9\u6cd5\n            start = time.time()\n            for o_node_id in od_df['o_node_id'].unique():\n                result = method([o_node_id], weight_name=\"weight\")\n            end = time.time()\n            print(f\"{method_list[i]} \u6d88\u8017\u65f6\u95f4: {end - start}\")\n\n        else:\n            print(f\"\u65b9\u6cd5 {method_list[i]} \u4e0d\u5b58\u5728\")\n\n    if start_list[i] == 1 and 3 &lt;= i &lt;= 5:\n        # \u83b7\u53d6\u5bf9\u8c61\u7684\u65b9\u6cd5\n        method = getattr(G, method_list[i], None)\n        if callable(method):  # \u786e\u4fdd\u8be5\u5c5e\u6027\u662f\u4e00\u4e2a\u65b9\u6cd5\n            start = time.time()\n            for o_node_id in od_df['o_node_id'].unique():\n                result = method(o_node_id, weight_name=\"weight\")\n            end = time.time()\n            print(f\"{method_list[i]} \u6d88\u8017\u65f6\u95f4: {end - start}\")\n\n        else:\n            print(f\"\u65b9\u6cd5 {method_list[i]} \u4e0d\u5b58\u5728\")\n\n    if start_list[i] == 1 and 6 &lt;= i &lt;= 8:\n        # \u83b7\u53d6\u5bf9\u8c61\u7684\u65b9\u6cd5\n        method = getattr(G, method_list[i], None)\n        if callable(method):  # \u786e\u4fdd\u8be5\u5c5e\u6027\u662f\u4e00\u4e2a\u65b9\u6cd5\n            list_a = []\n            for o_node_id in od_df['o_node_id'].unique():\n                list_a.append(o_node_id)\n            start_1 = time.time()\n            result = method(list_a, num_thread=16, weight_name=\"weight\")\n            end_1 = time.time()\n            print(f\"{method_list[i]} \u6d88\u8017\u65f6\u95f4: {end_1 - start_1}\")\n\n        else:\n            print(f\"\u65b9\u6cd5 {method_list[i]} \u4e0d\u5b58\u5728\")\n\n    if start_list[i] == 1 and 9 &lt;= i &lt;= 11:\n        # \u83b7\u53d6\u5bf9\u8c61\u7684\u65b9\u6cd5\n        method = getattr(G, method_list[i], None)\n        if callable(method):  # \u786e\u4fdd\u8be5\u5c5e\u6027\u662f\u4e00\u4e2a\u65b9\u6cd5\n            list_a = []\n            for o_node_id in od_df['o_node_id'].unique():\n                list_a.append([o_node_id])\n            start_1 = time.time()\n            result = method(list_a, num_thread=16, weight_name=\"weight\")\n            end_1 = time.time()\n            print(f\"{method_list[i]} \u6d88\u8017\u65f6\u95f4: {end_1 - start_1}\")\n\n        else:\n            print(f\"\u65b9\u6cd5 {method_list[i]} \u4e0d\u5b58\u5728\")\n</code></pre>"},{"location":"Fun%26API/CGraphBase/","title":"CGraphBase","text":"Source code in <code>src\\graphworkc.py</code> <pre><code>def __init__(self):\n    # \u521b\u5efa C++ \u56fe\u7b97\u6cd5\u5bf9\u8c61\n    self.graph = graphwork.GraphAlgorithms()\n</code></pre> <p>\u7c7b\u65b9\u6cd5 - get_graph_info:  - \u83b7\u53d6\u56fe\u4fe1\u606f</p> Example <p>Getting graph information  graph.get_graph_info()</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def get_graph_info(self):\n    \"\"\"**\u7c7b\u65b9\u6cd5 - get_graph_info:** &lt;br&gt;\n    - \u83b7\u53d6\u56fe\u4fe1\u606f\n\n    Example:\n        Getting graph information &lt;br&gt;\n        graph.get_graph_info()\n    \"\"\"\n    self.graph.get_graph_info()\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - get_node_info:  - \u83b7\u53d6\u8282\u70b9\u4fe1\u606f</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>\u8282\u70b9\u7684\u6807\u8bc6\u7b26\u3002\u5fc5\u987b\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u56fe\u4e2d\u8282\u70b9\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u201cid\u201d\u4e0d\u662f\u6574\u6570\u3002</p> <code>AttributeError</code> <p>\u5982\u679c\u56fe\u5f62\u5bf9\u8c61\u6ca1\u6709<code>get_node_info</code>\u65b9\u6cd5\u3002</p> Example <p>Getting information about node 1  graph.get_node_info(1)</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def get_node_info(self, id: int = None):\n    \"\"\"**\u7c7b\u65b9\u6cd5 - get_node_info:** &lt;br&gt;\n    - \u83b7\u53d6\u8282\u70b9\u4fe1\u606f\n\n    Args:\n        id (int): \u8282\u70b9\u7684\u6807\u8bc6\u7b26\u3002\u5fc5\u987b\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u56fe\u4e2d\u8282\u70b9\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002\n\n    Raises:\n        ValueError: \u5982\u679c\u201cid\u201d\u4e0d\u662f\u6574\u6570\u3002\n        AttributeError: \u5982\u679c\u56fe\u5f62\u5bf9\u8c61\u6ca1\u6709`get_node_info`\u65b9\u6cd5\u3002\n\n    Example:\n        Getting information about node 1 &lt;br&gt;\n        graph.get_node_info(1)\n    \"\"\"\n    # \u53c2\u6570\u68c0\u67e5\uff1a\u786e\u4fdd id \u662f\u6709\u6548\u7684\u8282\u70b9\uff08\u5047\u8bbe\u5b83\u4eec\u662f\u6574\u6570\uff09\n    if not isinstance(id, int):\n        raise ValueError(f\"Invalid value for 'start': {start}. It must be an integer.\")\n\n    self.graph.get_node_info(id)\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - get_link_info:  - \u83b7\u53d6\u8fb9\u4fe1\u606f</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>int</code> <p>\u8fb9\u7684\u8d77\u59cb\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <code>None</code> <code>end</code> <code>int</code> <p>\u8fb9\u7684\u7ed3\u675f\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u201cstart\u201d\u6216\u201cend\u201d\u4e0d\u662f\u6574\u6570\u3002</p> <code>AttributeError</code> <p>\u5982\u679c\u56fe\u5bf9\u8c61\u6ca1\u6709<code>get_link_info</code>\u65b9\u6cd5\u3002</p> Example <p>Getting information about the link between node 1 and node 2 graph.get_link_info(1, 2)</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def get_link_info(self, start: int = None, end: int = None):\n    \"\"\"**\u7c7b\u65b9\u6cd5 - get_link_info:** &lt;br&gt;\n    - \u83b7\u53d6\u8fb9\u4fe1\u606f\n\n    Args:\n        start (int): \u8fb9\u7684\u8d77\u59cb\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n        end (int): \u8fb9\u7684\u7ed3\u675f\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Raises:\n        ValueError: \u5982\u679c\u201cstart\u201d\u6216\u201cend\u201d\u4e0d\u662f\u6574\u6570\u3002\n        AttributeError: \u5982\u679c\u56fe\u5bf9\u8c61\u6ca1\u6709`get_link_info`\u65b9\u6cd5\u3002\n\n    Example:\n        Getting information about the link between node 1 and node 2&lt;br&gt;\n        graph.get_link_info(1, 2)\n    \"\"\"\n    # \u53c2\u6570\u68c0\u67e5\uff1a\u786e\u4fdd start \u548c end \u662f\u6709\u6548\u7684\u8282\u70b9\uff08\u5047\u8bbe\u5b83\u4eec\u662f\u6574\u6570\uff09\n    if not isinstance(start, int):\n        raise ValueError(f\"Invalid value for 'start': {start}. It must be an integer.\")\n\n    if not isinstance(end, int):\n        raise ValueError(f\"Invalid value for 'end': {end}. It must be an integer.\")\n\n    self.graph.get_link_info(start, end)\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - add_edge:  - \u52a0\u4e00\u6761\u8fb9</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>int</code> <p>\u8fb9\u7684\u8d77\u59cb\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <code>int</code> <code>end</code> <code>int</code> <p>\u8fb9\u7684\u7ed3\u675f\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u6216\u6d6e\u70b9\u6570\u3002</p> <code>int</code> <code>attribute_dict</code> <code>dict</code> <p>\u5305\u542b\u8fb9\u7f18\u5c5e\u6027\u7684\u5b57\u5178\uff0c\u4f8b\u5982\u6743\u91cd\u6216\u5176\u4ed6\u5c5e\u6027\u3002\u4e0d\u80fd\u4e3a\u7a7a\u3002</p> <code>dict</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u201cstart\u201d\u6216\u201cend\u201d\u4e0d\u662f\u6574\u6570\u6216\u6d6e\u70b9\u6570\u3002</p> <code>ValueError</code> <p>\u5982\u679c\u201cattribute_dict_\u201d\u4e0d\u662f\u5b57\u5178\u3002</p> <code>ValueError</code> <p>\u5982\u679c\u201cattribute_dict_\u201d\u662f\u7a7a\u5b57\u5178\u3002</p> Example <p>Adding an edge from node 1 to node 2 with attributes edge_attributes = {\"weight\": 10, \"color\": \"blue\"} graph.add_edge(1, 2, edge_attributes)</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def add_edge(self, start=int, end=int, attribute_dict=dict):\n    \"\"\"**\u7c7b\u65b9\u6cd5 - add_edge:**&lt;br&gt;\n     - \u52a0\u4e00\u6761\u8fb9\n\n    Args:\n        start (int): \u8fb9\u7684\u8d77\u59cb\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n        end (int): \u8fb9\u7684\u7ed3\u675f\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u6216\u6d6e\u70b9\u6570\u3002\n        attribute_dict (dict): \u5305\u542b\u8fb9\u7f18\u5c5e\u6027\u7684\u5b57\u5178\uff0c\u4f8b\u5982\u6743\u91cd\u6216\u5176\u4ed6\u5c5e\u6027\u3002\u4e0d\u80fd\u4e3a\u7a7a\u3002\n\n    Raises:\n        ValueError: \u5982\u679c\u201cstart\u201d\u6216\u201cend\u201d\u4e0d\u662f\u6574\u6570\u6216\u6d6e\u70b9\u6570\u3002\n        ValueError: \u5982\u679c\u201cattribute_dict_\u201d\u4e0d\u662f\u5b57\u5178\u3002\n        ValueError: \u5982\u679c\u201cattribute_dict_\u201d\u662f\u7a7a\u5b57\u5178\u3002\n\n    Example:\n        Adding an edge from node 1 to node 2 with attributes&lt;br&gt;\n        edge_attributes = {\"weight\": 10, \"color\": \"blue\"}&lt;br&gt;\n        graph.add_edge(1, 2, edge_attributes)\n    \"\"\"\n    # \u53c2\u6570\u68c0\u67e5\uff1a\u786e\u4fdd start \u548c v_ \u662f\u6709\u6548\u7684\u8282\u70b9\uff08\u5047\u8bbe\u5b83\u4eec\u662f\u6574\u6570\uff09\n    if not isinstance(start, int):\n        raise ValueError(f\"Invalid value for 'start': {start}. It must be an integer.\")\n\n    if not isinstance(end, int):\n        raise ValueError(f\"Invalid value for 'end': {end}. It must be an integer.\")\n\n    # \u53c2\u6570\u68c0\u67e5\uff1a\u786e\u4fdd attribute_dict_ \u662f\u4e00\u4e2a\u5b57\u5178\n    if not isinstance(attribute_dict, dict):\n        raise ValueError(f\"Invalid value for 'attribute_dict': {attribute_dict}. It must be a dictionary.\")\n\n    # \u53c2\u6570\u68c0\u67e5\uff1a\u786e\u4fdd\u5b57\u5178\u4e3a\u7a7a\u65f6\u4e0d\u8981\u4f20\u5165\n    if not attribute_dict:\n        raise ValueError(\"The 'attribute_dict' cannot be an empty dictionary.\")\n\n    # \u5047\u8bbe self.graph \u662f\u4e00\u4e2a\u5df2\u5b9a\u4e49\u7684\u56fe\u5bf9\u8c61\n    self.graph.add_edge(start, end, attribute_dict)\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - add_edges: - \u52a0\u591a\u6761\u8fb9</p> <p>Parameters:</p> Name Type Description Default <code>edges</code> <code>list of tuple</code> <p>\u8981\u6dfb\u52a0\u7684\u8fb9\u5217\u8868\u3002\u6bcf\u6761\u8fb9\u90fd\u5e94\u8be5\u662f\u4e00\u4e2a\u5143\u7ec4\u3002</p> required <code>containing</code> <code>three elements</code> <ul> <li>start (int): \u8fb9\u7684\u8d77\u59cb\u8282\u70b9\u3002</li> <li>end (int): \u8fb9\u7684\u7ed3\u675f\u8282\u70b9\u3002</li> <li>attribute_dict_ (dict): \u4e00\u4e2a\u5305\u542b\u8fb9\u7f18\u5c5e\u6027\u7684\u5b57\u5178\uff0c\u4f8b\u5982\u6743\u91cd\u6216\u5176\u4ed6\u5c5e\u6027\u3002</li> </ul> required <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u201c\u8fb9\u201d\u4e0d\u662f\u5217\u8868\u3002</p> <code>ValueError</code> <p>\u5982\u679c'edges'\u4e2d\u7684\u4efb\u4f55\u5143\u7d20\u4e0d\u662f\u5143\u7ec4\u3002</p> <code>ValueError</code> <p>\u5982\u679c\u4efb\u4f55\u5143\u7ec4\u90fd\u6ca1\u67093\u4e2a\u5143\u7d20\u3002</p> <code>ValueError</code> <p>\u5982\u679c\u201cstart\u201d\u6216\u201cend\u201d\u4e0d\u662f\u6574\u6570\u3002</p> <code>ValueError</code> <p>\u5982\u679c\u201cattribute_dict_\u201d\u4e0d\u662f\u5b57\u5178\u3002</p> Example <p>edges = [     (1, 2, {\"weight\": 5}),     (2, 3, {\"weight\": 10}),     (3, 4, {\"weight\": 15}) ] graph_instance.add_edges(edges)</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def add_edges(self, edges):\n    \"\"\"**\u7c7b\u65b9\u6cd5 - add_edges:**&lt;br&gt;\n     - \u52a0\u591a\u6761\u8fb9\n\n     Args:\n         edges (list of tuple): \u8981\u6dfb\u52a0\u7684\u8fb9\u5217\u8868\u3002\u6bcf\u6761\u8fb9\u90fd\u5e94\u8be5\u662f\u4e00\u4e2a\u5143\u7ec4\u3002\n         containing three elements:\n             - start (int): \u8fb9\u7684\u8d77\u59cb\u8282\u70b9\u3002\n             - end (int): \u8fb9\u7684\u7ed3\u675f\u8282\u70b9\u3002\n             - attribute_dict_ (dict): \u4e00\u4e2a\u5305\u542b\u8fb9\u7f18\u5c5e\u6027\u7684\u5b57\u5178\uff0c\u4f8b\u5982\u6743\u91cd\u6216\u5176\u4ed6\u5c5e\u6027\u3002\n\n     Raises:\n         ValueError: \u5982\u679c\u201c\u8fb9\u201d\u4e0d\u662f\u5217\u8868\u3002\n         ValueError: \u5982\u679c'edges'\u4e2d\u7684\u4efb\u4f55\u5143\u7d20\u4e0d\u662f\u5143\u7ec4\u3002\n         ValueError: \u5982\u679c\u4efb\u4f55\u5143\u7ec4\u90fd\u6ca1\u67093\u4e2a\u5143\u7d20\u3002\n         ValueError: \u5982\u679c\u201cstart\u201d\u6216\u201cend\u201d\u4e0d\u662f\u6574\u6570\u3002\n         ValueError: \u5982\u679c\u201cattribute_dict_\u201d\u4e0d\u662f\u5b57\u5178\u3002\n\n     Example:\n         edges = [&lt;br&gt;\n             (1, 2, {\"weight\": 5}),&lt;br&gt;\n             (2, 3, {\"weight\": 10}),&lt;br&gt;\n             (3, 4, {\"weight\": 15})&lt;br&gt;\n         ]&lt;br&gt;\n         graph_instance.add_edges(edges)\n     \"\"\"\n    # \u786e\u4fdd edges \u662f\u4e00\u4e2a\u5217\u8868\n    if not isinstance(edges, list):\n        raise ValueError(f\"Expected 'edges' to be a list, but got {type(edges)}.\")\n\n    # \u904d\u5386\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u786e\u4fdd\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u5e76\u4e14\u6709\u4e09\u4e2a\u5143\u7d20\n    for edge in edges:\n        if not isinstance(edge, tuple):\n            raise ValueError(f\"Each element in 'edges' should be a tuple, but got {type(edge)}.\")\n\n        if len(edge) != 3:\n            raise ValueError(f\"Each tuple in 'edges' should have exactly 3 elements, but got {len(edge)}.\")\n\n        # \u68c0\u67e5 start \u548c end \u662f\u5426\u662f\u6709\u6548\u7684\u8282\u70b9\uff08\u4f8b\u5982\u6574\u6570\u6216\u5b57\u7b26\u4e32\uff09\n        start, end, attribute_dict_ = edge\n        if not isinstance(start, int):\n            raise ValueError(f\"Expected 'start' to be an integer, but got {type(start)}.\")\n        if not isinstance(end, int):\n            raise ValueError(f\"Expected 'end' to be an integer, but got {type(end)}.\")\n\n        # \u68c0\u67e5 attribute_dict_ \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u5178\n        if not isinstance(attribute_dict_, dict):\n            raise ValueError(f\"Expected 'attribute_dict_' to be a dictionary, but got {type(attribute_dict_)}.\")\n\n    # \u5982\u679c\u6240\u6709\u68c0\u67e5\u901a\u8fc7\uff0c\u8c03\u7528 graph.add_edges\n    self.graph.add_edges(edges)\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - remove_edge:  - \u79fb\u9664\u4e00\u6761\u8fb9</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>int</code> <p>\u8fb9\u7684\u8d77\u59cb\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <code>int</code> <code>end</code> <code>int</code> <p>\u8fb9\u7684\u7ed3\u675f\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <code>int</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u201cstart\u201d\u6216\u201cend\u201d\u4e0d\u662f\u6574\u6570\u3002</p> Example <p>Removing an edge between node 1 and node 2 graph.remove_edge(1, 2)</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def remove_edge(self, start=int, end=int):\n    \"\"\"**\u7c7b\u65b9\u6cd5 - remove_edge:**&lt;br&gt;\n     - \u79fb\u9664\u4e00\u6761\u8fb9\n\n    Args:\n        start (int): \u8fb9\u7684\u8d77\u59cb\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n        end (int): \u8fb9\u7684\u7ed3\u675f\u8282\u70b9\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Raises:\n        ValueError: \u5982\u679c\u201cstart\u201d\u6216\u201cend\u201d\u4e0d\u662f\u6574\u6570\u3002\n\n    Example:\n        Removing an edge between node 1 and node 2&lt;br&gt;\n        graph.remove_edge(1, 2)\n    \"\"\"\n    # \u53c2\u6570\u68c0\u67e5\uff1a\u786e\u4fdd start \u548c v_ \u662f\u6709\u6548\u7684\u8282\u70b9\uff08\u5047\u8bbe\u5b83\u4eec\u662f\u6574\u6570\uff09\n    if not isinstance(start, int):\n        raise ValueError(f\"Invalid value for 'start': {start}. It must be an integer.\")\n\n    if not isinstance(end, int):\n        raise ValueError(f\"Invalid value for 'end': {end}. It must be an integer.\")\n\n    self.graph.remove_edge(start, end)\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - remove_edges\uff1a  - \u79fb\u9664\u591a\u6761\u8fb9</p> <p>Parameters:</p> Name Type Description Default <code>edges</code> <code>list of tuples</code> <p>\u8981\u5220\u9664\u7684\u8fb9\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u6761\u8fb9\u8868\u793a\u4e3a\u4e24\u4e2a\u6574\u6570\u7684\u5143\u7ec4                     \uff08\u5f00\u59cb\u3001\u7ed3\u675f\uff09\u8868\u793a\u8fb9\u7684\u8282\u70b9\u3002</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u201cedges\u201d\u4e0d\u662f\u5217\u8868\u3002</p> <code>ValueError</code> <p>\u5982\u679c'edges'\u4e2d\u7684\u4efb\u4f55\u5143\u7d20\u4e0d\u662f\u5143\u7ec4\u6216\u4e0d\u5305\u542b\u6b63\u597d\u6709\u4e24\u4e2a\u5143\u7d20\u3002</p> Example <p>Removing multiple edges edges_to_remove = [(1, 2), (3, 4), (5, 6)] graph_instance.remove_edges(edges_to_remove)</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def remove_edges(self, edges):\n    \"\"\"**\u7c7b\u65b9\u6cd5 - remove_edges\uff1a**&lt;br&gt;\n     - \u79fb\u9664\u591a\u6761\u8fb9\n\n    Args:\n        edges (list of tuples): \u8981\u5220\u9664\u7684\u8fb9\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u6761\u8fb9\u8868\u793a\u4e3a\u4e24\u4e2a\u6574\u6570\u7684\u5143\u7ec4\n                                \uff08\u5f00\u59cb\u3001\u7ed3\u675f\uff09\u8868\u793a\u8fb9\u7684\u8282\u70b9\u3002\n\n    Raises:\n        ValueError: \u5982\u679c\u201cedges\u201d\u4e0d\u662f\u5217\u8868\u3002\n        ValueError: \u5982\u679c'edges'\u4e2d\u7684\u4efb\u4f55\u5143\u7d20\u4e0d\u662f\u5143\u7ec4\u6216\u4e0d\u5305\u542b\u6b63\u597d\u6709\u4e24\u4e2a\u5143\u7d20\u3002\n\n    Example:\n        Removing multiple edges&lt;br&gt;\n        edges_to_remove = [(1, 2), (3, 4), (5, 6)]&lt;br&gt;\n        graph_instance.remove_edges(edges_to_remove)\n    \"\"\"\n    # \u786e\u4fdd edges \u662f\u4e00\u4e2a\u5217\u8868\n    if not isinstance(edges, list):\n        raise ValueError(f\"Expected 'edges' to be a list, but got {type(edges)}.\")\n\n    # \u904d\u5386\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u786e\u4fdd\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u5e76\u4e14\u6709\u4e09\u4e2a\u5143\u7d20\n    for edge in edges:\n        if not isinstance(edge, tuple):\n            raise ValueError(f\"Each element in 'edges' should be a tuple, but got {type(edge)}.\")\n\n        if len(edge) != 2:\n            raise ValueError(f\"Each tuple in 'edges' should have exactly 2 elements, but got {len(edge)}.\")\n\n    self.graph.remove_edges(edges)\n</code></pre>"},{"location":"Fun%26API/GraphAlgorithms/","title":"GraphAlgorithms","text":"<p>\u7c7b\u65b9\u6cd5 - multi_source_cost\uff1a  - \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff1a\u8fd4\u56de\u82b1\u8d39</p> <p>Parameters:</p> Name Type Description Default <code>start_nodes</code> <code>list</code> <p>\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4e00\u4e2a\u8d77\u70b9\u8282\u70b9\u3002</p> <code>list</code> <code>method</code> <code>str</code> <p>\u7528\u4e8e\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u5b83\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a -\u201cDijkstra\u201d\uff1a\u6807\u51c6Dijkstra\u7b97\u6cd5\u3002 -\u201cA\u201d\uff1aA\u641c\u7d22\u7b97\u6cd5\uff08\u9700\u8981\u542f\u53d1\u5f0f\u51fd\u6570\uff09\u3002 -\u201cBellman Ford\u201d\uff1aBellman Ford\u7b97\u6cd5\uff08\u5904\u7406\u8d1f\u6743\u91cd\uff09\u3002 \u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>target</code> <code>int</code> <p>\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a-1\uff0c\u5219\u8868\u793a\u6ca1\u6709\u7279\u5b9a\u76ee\u6807\u3002</p> <code>-1</code> <code>cutoff</code> <code>float</code> <p>\u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\u9650\u5236\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u503c\u7684\u8def\u5f84\u90fd\u5c06\u88ab\u5ffd\u7565\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u56fe\u4e2d\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8fb9\u6743\u91cd\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a\u201c\u65e0\u201d\u3002</p> <code>'none'</code> <p>Returns:</p> Name Type Description <code>result</code> <p>\u8fd4\u56de\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u82b1\u8d39\u7ed3\u679c\uff0c\u4e00\u7ef4\u5217\u8868</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u8fdd\u53cd\u4e86\u4ee5\u4e0b\u4efb\u4f55\u4e00\u9879\uff1a -\u201cstart_nodes\u201d\u4e0d\u662f\u5217\u8868\u3002 -\u201cmethod\u201d\u4e0d\u662f\u6709\u6548\u7684\u7b97\u6cd5\u4e4b\u4e00\uff1a\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u3002 -\u201ctarget\u201d\u4e0d\u662f\u6574\u6570\u3002 -\u201ccutoff\u201d\u4e0d\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u4e0d\u662f\u5b57\u7b26\u4e32\u3002</p> Example <p>result = multi_source_cost(     start_nodes=[0, 1],     method=\"A*\",     target=5,     cutoff=100.0,     weight_name=\"distance\")</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def multi_source_cost(self,\n                      start_nodes=list,\n                      method=\"Dijkstra\",\n                      target=-1,\n                      cutoff=float('inf'),\n                      weight_name=\"none\"):\n    \"\"\"**\u7c7b\u65b9\u6cd5 - multi_source_cost\uff1a**&lt;br&gt;\n     - \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff1a\u8fd4\u56de\u82b1\u8d39\n\n    Args:\n        start_nodes (list): \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4e00\u4e2a\u8d77\u70b9\u8282\u70b9\u3002\n        method (str): \u7528\u4e8e\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u5b83\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a\n            -\u201cDijkstra\u201d\uff1a\u6807\u51c6Dijkstra\u7b97\u6cd5\u3002\n            -\u201cA*\u201d\uff1aA*\u641c\u7d22\u7b97\u6cd5\uff08\u9700\u8981\u542f\u53d1\u5f0f\u51fd\u6570\uff09\u3002\n            -\u201cBellman Ford\u201d\uff1aBellman Ford\u7b97\u6cd5\uff08\u5904\u7406\u8d1f\u6743\u91cd\uff09\u3002\n            \u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        target (int): \u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a-1\uff0c\u5219\u8868\u793a\u6ca1\u6709\u7279\u5b9a\u76ee\u6807\u3002\n        cutoff (float): \u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\u9650\u5236\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u503c\u7684\u8def\u5f84\u90fd\u5c06\u88ab\u5ffd\u7565\u3002\n        weight_name (str): \u56fe\u4e2d\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8fb9\u6743\u91cd\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a\u201c\u65e0\u201d\u3002\n\n    Returns:\n        result: \u8fd4\u56de\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u82b1\u8d39\u7ed3\u679c\uff0c\u4e00\u7ef4\u5217\u8868\n\n    Raises:\n        ValueError: \u5982\u679c\u8fdd\u53cd\u4e86\u4ee5\u4e0b\u4efb\u4f55\u4e00\u9879\uff1a&lt;br&gt;\n            -\u201cstart_nodes\u201d\u4e0d\u662f\u5217\u8868\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u4e0d\u662f\u6709\u6548\u7684\u7b97\u6cd5\u4e4b\u4e00\uff1a\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u3002&lt;br&gt;\n            -\u201ctarget\u201d\u4e0d\u662f\u6574\u6570\u3002&lt;br&gt;\n            -\u201ccutoff\u201d\u4e0d\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u4e0d\u662f\u5b57\u7b26\u4e32\u3002\n\n    Example:\n        result = multi_source_cost(&lt;br&gt;\n            start_nodes=[0, 1],&lt;br&gt;\n            method=\"A*\",&lt;br&gt;\n            target=5,&lt;br&gt;\n            cutoff=100.0,&lt;br&gt;\n            weight_name=\"distance\")\n    \"\"\"\n    # \u68c0\u67e5 list_o \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n    if not isinstance(start_nodes, list):\n        raise ValueError(f\"Invalid value for 'list_o': {start_nodes}. It must be a list.\")\n\n    # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n    valid_methods = [\"Dijkstra\", \"A*\", \"Bellman-Ford\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n    if method not in valid_methods:\n        raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n    # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\n    if not isinstance(target, int):\n        raise ValueError(f\"Invalid value for 'target': {target}. It must be a integer.\")\n\n    # \u68c0\u67e5 cutoff \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6d6e\u52a8\u6570\n    if not isinstance(cutoff, (int, float)) or cutoff &lt; 0:\n        raise ValueError(f\"Invalid value for 'cutoff': {cutoff}. It must be a non-negative number.\")\n\n    # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\n    if not isinstance(weight_name, str):\n        raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be a string.\")\n\n    result = self.graph.multi_source_cost(start_nodes, method, target, cutoff, weight_name)\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - multi_source_path\uff1a  - \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff1a\u8fd4\u56de\u8def\u5f84</p> <p>Parameters:</p> Name Type Description Default <code>start_nodes</code> <code>list</code> <p>\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4e00\u4e2a\u8d77\u70b9\u8282\u70b9\u3002</p> <code>list</code> <code>method</code> <code>str</code> <p>\u7528\u4e8e\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u5b83\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a -\u201cDijkstra\u201d\uff1a\u6807\u51c6Dijkstra\u7b97\u6cd5\u3002 -\u201cA\u201d\uff1aA\u641c\u7d22\u7b97\u6cd5\uff08\u9700\u8981\u542f\u53d1\u5f0f\u51fd\u6570\uff09\u3002 -\u201cBellman Ford\u201d\uff1aBellman Ford\u7b97\u6cd5\uff08\u5904\u7406\u8d1f\u6743\u91cd\uff09\u3002 \u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>target</code> <code>int</code> <p>\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a-1\uff0c\u5219\u8868\u793a\u6ca1\u6709\u7279\u5b9a\u76ee\u6807\u3002</p> <code>-1</code> <code>cutoff</code> <code>float</code> <p>\u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\u9650\u5236\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u503c\u7684\u8def\u5f84\u90fd\u5c06\u88ab\u5ffd\u7565\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u56fe\u4e2d\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8fb9\u6743\u91cd\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a\u201c\u65e0\u201d\u3002</p> <code>'none'</code> <p>Returns:</p> Name Type Description <code>result</code> <p>\u8fd4\u56de\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u4e00\u7ef4\u5b57\u5178</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u8fdd\u53cd\u4e86\u4ee5\u4e0b\u4efb\u4f55\u4e00\u9879\uff1a -\u201cstart_nodes\u201d\u4e0d\u662f\u5217\u8868\u3002 -\u201cmethod\u201d\u4e0d\u662f\u6709\u6548\u7684\u7b97\u6cd5\u4e4b\u4e00\uff1a\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u3002 -\u201ctarget\u201d\u4e0d\u662f\u6574\u6570\u3002 -\u201ccutoff\u201d\u4e0d\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u4e0d\u662f\u5b57\u7b26\u4e32\u3002</p> Example <p>result = multi_source_path(     start_nodes=[0, 1],     method=\"A*\",     target=5,     cutoff=100.0,     weight_name=\"distance\")</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def multi_source_path(self,\n                      start_nodes=list,\n                      method=\"Dijkstra\",\n                      target=-1,\n                      cutoff=float('inf'),\n                      weight_name=\"none\"):\n    \"\"\"**\u7c7b\u65b9\u6cd5 - multi_source_path\uff1a**&lt;br&gt;\n     - \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff1a\u8fd4\u56de\u8def\u5f84\n\n    Args:\n        start_nodes (list): \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4e00\u4e2a\u8d77\u70b9\u8282\u70b9\u3002\n        method (str): \u7528\u4e8e\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u5b83\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a\n            -\u201cDijkstra\u201d\uff1a\u6807\u51c6Dijkstra\u7b97\u6cd5\u3002\n            -\u201cA*\u201d\uff1aA*\u641c\u7d22\u7b97\u6cd5\uff08\u9700\u8981\u542f\u53d1\u5f0f\u51fd\u6570\uff09\u3002\n            -\u201cBellman Ford\u201d\uff1aBellman Ford\u7b97\u6cd5\uff08\u5904\u7406\u8d1f\u6743\u91cd\uff09\u3002\n            \u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        target (int): \u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a-1\uff0c\u5219\u8868\u793a\u6ca1\u6709\u7279\u5b9a\u76ee\u6807\u3002\n        cutoff (float): \u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\u9650\u5236\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u503c\u7684\u8def\u5f84\u90fd\u5c06\u88ab\u5ffd\u7565\u3002\n        weight_name (str): \u56fe\u4e2d\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8fb9\u6743\u91cd\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a\u201c\u65e0\u201d\u3002\n\n    Returns:\n        result: \u8fd4\u56de\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u4e00\u7ef4\u5b57\u5178\n\n    Raises:\n        ValueError: \u5982\u679c\u8fdd\u53cd\u4e86\u4ee5\u4e0b\u4efb\u4f55\u4e00\u9879\uff1a&lt;br&gt;\n            -\u201cstart_nodes\u201d\u4e0d\u662f\u5217\u8868\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u4e0d\u662f\u6709\u6548\u7684\u7b97\u6cd5\u4e4b\u4e00\uff1a\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u3002&lt;br&gt;\n            -\u201ctarget\u201d\u4e0d\u662f\u6574\u6570\u3002&lt;br&gt;\n            -\u201ccutoff\u201d\u4e0d\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u4e0d\u662f\u5b57\u7b26\u4e32\u3002\n\n    Example:\n        result = multi_source_path(&lt;br&gt;\n            start_nodes=[0, 1],&lt;br&gt;\n            method=\"A*\",&lt;br&gt;\n            target=5,&lt;br&gt;\n            cutoff=100.0,&lt;br&gt;\n            weight_name=\"distance\")\n    \"\"\"\n    # \u68c0\u67e5 list_o \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n    if not isinstance(start_nodes, list):\n        raise ValueError(f\"Invalid value for 'list_o': {start_nodes}. It must be a list.\")\n\n    # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n    valid_methods = [\"Dijkstra\", \"A*\", \"Bellman-Ford\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n    if method not in valid_methods:\n        raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n    # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\n    if not isinstance(target, int):\n        raise ValueError(f\"Invalid value for 'target': {target}. It must be a non-negative integer.\")\n\n    # \u68c0\u67e5 cutoff \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6d6e\u52a8\u6570\n    if not isinstance(cutoff, (int, float)) or cutoff &lt; 0:\n        raise ValueError(f\"Invalid value for 'cutoff': {cutoff}. It must be a number.\")\n\n    # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\n    if not isinstance(weight_name, str):\n        raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be a string.\")\n\n    result = self.graph.multi_source_path(start_nodes, method, target, cutoff, weight_name)\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - multi_source_all\uff1a  - \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff1a\u8fd4\u56de\u8def\u5f84\u548c\u82b1\u8d39</p> <p>Parameters:</p> Name Type Description Default <code>start_nodes</code> <code>list</code> <p>\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4e00\u4e2a\u8d77\u70b9\u8282\u70b9\u3002</p> <code>list</code> <code>method</code> <code>str</code> <p>\u7528\u4e8e\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u5b83\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a -\u201cDijkstra\u201d\uff1a\u6807\u51c6Dijkstra\u7b97\u6cd5\u3002 -\u201cA\u201d\uff1aA\u641c\u7d22\u7b97\u6cd5\uff08\u9700\u8981\u542f\u53d1\u5f0f\u51fd\u6570\uff09\u3002 -\u201cBellman Ford\u201d\uff1aBellman Ford\u7b97\u6cd5\uff08\u5904\u7406\u8d1f\u6743\u91cd\uff09\u3002 \u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>target</code> <code>int</code> <p>\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a-1\uff0c\u5219\u8868\u793a\u6ca1\u6709\u7279\u5b9a\u76ee\u6807\u3002</p> <code>-1</code> <code>cutoff</code> <code>float</code> <p>\u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\u9650\u5236\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u503c\u7684\u8def\u5f84\u90fd\u5c06\u88ab\u5ffd\u7565\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u56fe\u4e2d\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8fb9\u6743\u91cd\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a\u201c\u65e0\u201d\u3002</p> <code>'none'</code> <p>Returns:</p> Name Type Description <code>result</code> <p>\u8fd4\u56de\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u82b1\u8d39\u548c\u8def\u5f84\u7ed3\u679c\uff0c\u4e00\u4e2aresult\u7ed3\u6784\u4f53\uff0c\u5185\u6709{cost,paths}\u4e24\u4e2a\u5c5e\u6027</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u8fdd\u53cd\u4e86\u4ee5\u4e0b\u4efb\u4f55\u4e00\u9879\uff1a -\u201cstart_nodes\u201d\u4e0d\u662f\u5217\u8868\u3002 -\u201cmethod\u201d\u4e0d\u662f\u6709\u6548\u7684\u7b97\u6cd5\u4e4b\u4e00\uff1a\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u3002 -\u201ctarget\u201d\u4e0d\u662f\u6574\u6570\u3002 -\u201ccutoff\u201d\u4e0d\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u4e0d\u662f\u5b57\u7b26\u4e32\u3002</p> Example <p>result = multi_source_all(     start_nodes=[0, 1],     method=\"A*\",     target=5,     cutoff=100.0,     weight_name=\"distance\")</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def multi_source_all(self,\n                     start_nodes=list,\n                     method=\"Dijkstra\",\n                     target=-1,\n                     cutoff=float('inf'),\n                     weight_name=\"none\"):\n    \"\"\"**\u7c7b\u65b9\u6cd5 - multi_source_all\uff1a**&lt;br&gt;\n     - \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff1a\u8fd4\u56de\u8def\u5f84\u548c\u82b1\u8d39\n\n    Args:\n        start_nodes (list): \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4e00\u4e2a\u8d77\u70b9\u8282\u70b9\u3002\n        method (str): \u7528\u4e8e\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u5b83\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a\n            -\u201cDijkstra\u201d\uff1a\u6807\u51c6Dijkstra\u7b97\u6cd5\u3002\n            -\u201cA*\u201d\uff1aA*\u641c\u7d22\u7b97\u6cd5\uff08\u9700\u8981\u542f\u53d1\u5f0f\u51fd\u6570\uff09\u3002\n            -\u201cBellman Ford\u201d\uff1aBellman Ford\u7b97\u6cd5\uff08\u5904\u7406\u8d1f\u6743\u91cd\uff09\u3002\n            \u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        target (int): \u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a-1\uff0c\u5219\u8868\u793a\u6ca1\u6709\u7279\u5b9a\u76ee\u6807\u3002\n        cutoff (float): \u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\u9650\u5236\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u503c\u7684\u8def\u5f84\u90fd\u5c06\u88ab\u5ffd\u7565\u3002\n        weight_name (str): \u56fe\u4e2d\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8fb9\u6743\u91cd\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a\u201c\u65e0\u201d\u3002\n\n    Returns:\n        result: \u8fd4\u56de\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u82b1\u8d39\u548c\u8def\u5f84\u7ed3\u679c\uff0c\u4e00\u4e2aresult\u7ed3\u6784\u4f53\uff0c\u5185\u6709{cost,paths}\u4e24\u4e2a\u5c5e\u6027\n\n    Raises:\n        ValueError: \u5982\u679c\u8fdd\u53cd\u4e86\u4ee5\u4e0b\u4efb\u4f55\u4e00\u9879\uff1a&lt;br&gt;\n            -\u201cstart_nodes\u201d\u4e0d\u662f\u5217\u8868\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u4e0d\u662f\u6709\u6548\u7684\u7b97\u6cd5\u4e4b\u4e00\uff1a\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u3002&lt;br&gt;\n            -\u201ctarget\u201d\u4e0d\u662f\u6574\u6570\u3002&lt;br&gt;\n            -\u201ccutoff\u201d\u4e0d\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u4e0d\u662f\u5b57\u7b26\u4e32\u3002\n\n    Example:\n        result = multi_source_all(&lt;br&gt;\n            start_nodes=[0, 1],&lt;br&gt;\n            method=\"A*\",&lt;br&gt;\n            target=5,&lt;br&gt;\n            cutoff=100.0,&lt;br&gt;\n            weight_name=\"distance\")\n    \"\"\"\n    # \u68c0\u67e5 list_o \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n    if not isinstance(start_nodes, list):\n        raise ValueError(f\"Invalid value for 'list_o': {start_nodes}. It must be a list.\")\n\n    # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n    valid_methods = [\"Dijkstra\", \"A*\", \"Bellman-Ford\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n    if method not in valid_methods:\n        raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n    # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\n    if not isinstance(target, int):\n        raise ValueError(f\"Invalid value for 'target': {target}. It must be a integer.\")\n\n    # \u68c0\u67e5 cutoff \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6d6e\u52a8\u6570\n    if not isinstance(cutoff, (int, float)) or cutoff &lt; 0:\n        raise ValueError(f\"Invalid value for 'cutoff': {cutoff}. It must be a non-negative number.\")\n\n    # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\n    if not isinstance(weight_name, str):\n        raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be a string.\")\n\n    result = self.graph.multi_source_all(start_nodes, method, target, cutoff, weight_name)\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - single_source_cost\uff1a  - \u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff0c\u8fd4\u56de\u82b1\u8d39</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>int</code> <p>\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8d77\u59cb\u8282\u70b9\u3002</p> <code>int</code> <code>method</code> <code>str</code> <p>\u7528\u4e8e\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u5b83\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a -\u201cDijkstra\u201d\uff1a\u6807\u51c6Dijkstra\u7b97\u6cd5\u3002 -\u201cA\u201d\uff1aA\u641c\u7d22\u7b97\u6cd5\uff08\u9700\u8981\u542f\u53d1\u5f0f\u51fd\u6570\uff09\u3002 -\u201cBellman Ford\u201d\uff1aBellman Ford\u7b97\u6cd5\uff08\u5904\u7406\u8d1f\u6743\u91cd\uff09\u3002 \u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>target</code> <code>int</code> <p>\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a-1\uff0c\u5219\u8868\u793a\u6ca1\u6709\u7279\u5b9a\u76ee\u6807\u3002</p> <code>-1</code> <code>cutoff</code> <code>float</code> <p>\u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\u9650\u5236\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u503c\u7684\u8def\u5f84\u90fd\u5c06\u88ab\u5ffd\u7565\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u56fe\u4e2d\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8fb9\u6743\u91cd\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a\u201c\u65e0\u201d\u3002</p> <code>'none'</code> <p>Returns:</p> Name Type Description <code>result</code> <p>\u8fd4\u56de\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u82b1\u8d39\u7ed3\u679c\uff0c\u4e00\u7ef4\u5217\u8868</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u8fdd\u53cd\u4e86\u4ee5\u4e0b\u4efb\u4f55\u4e00\u9879\uff1a -\u201cstart\u201d\u4e0d\u662f\u6574\u6570\u3002 -\u201cmethod\u201d\u4e0d\u662f\u6709\u6548\u7684\u7b97\u6cd5\u4e4b\u4e00\uff1a\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u3002 -\u201ctarget\u201d\u4e0d\u662f\u6574\u6570\u3002 -\u201ccutoff\u201d\u4e0d\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u4e0d\u662f\u5b57\u7b26\u4e32\u3002</p> Example <p>result = single_source_cost(     start=1,     method=\"Bellman-Ford\",     target=5,     cutoff=100.0,     weight_name=\"distance\" )</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def single_source_cost(self,\n                      start=int,\n                      method=\"Dijkstra\",\n                      target=-1,\n                      cutoff=float('inf'),\n                      weight_name=\"none\"):\n    \"\"\"**\u7c7b\u65b9\u6cd5 - single_source_cost\uff1a**&lt;br&gt;\n     - \u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff0c\u8fd4\u56de\u82b1\u8d39\n\n    Args:\n        start (int): \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8d77\u59cb\u8282\u70b9\u3002\n        method (str): \u7528\u4e8e\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u5b83\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a\n            -\u201cDijkstra\u201d\uff1a\u6807\u51c6Dijkstra\u7b97\u6cd5\u3002\n            -\u201cA*\u201d\uff1aA*\u641c\u7d22\u7b97\u6cd5\uff08\u9700\u8981\u542f\u53d1\u5f0f\u51fd\u6570\uff09\u3002\n            -\u201cBellman Ford\u201d\uff1aBellman Ford\u7b97\u6cd5\uff08\u5904\u7406\u8d1f\u6743\u91cd\uff09\u3002\n            \u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        target (int): \u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a-1\uff0c\u5219\u8868\u793a\u6ca1\u6709\u7279\u5b9a\u76ee\u6807\u3002\n        cutoff (float): \u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\u9650\u5236\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u503c\u7684\u8def\u5f84\u90fd\u5c06\u88ab\u5ffd\u7565\u3002\n        weight_name (str): \u56fe\u4e2d\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8fb9\u6743\u91cd\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a\u201c\u65e0\u201d\u3002\n\n    Returns:\n        result: \u8fd4\u56de\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u82b1\u8d39\u7ed3\u679c\uff0c\u4e00\u7ef4\u5217\u8868\n\n    Raises:\n        ValueError: \u5982\u679c\u8fdd\u53cd\u4e86\u4ee5\u4e0b\u4efb\u4f55\u4e00\u9879\uff1a&lt;br&gt;\n            -\u201cstart\u201d\u4e0d\u662f\u6574\u6570\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u4e0d\u662f\u6709\u6548\u7684\u7b97\u6cd5\u4e4b\u4e00\uff1a\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u3002&lt;br&gt;\n            -\u201ctarget\u201d\u4e0d\u662f\u6574\u6570\u3002&lt;br&gt;\n            -\u201ccutoff\u201d\u4e0d\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u4e0d\u662f\u5b57\u7b26\u4e32\u3002\n\n    Example:\n        result = single_source_cost(&lt;br&gt;\n            start=1,&lt;br&gt;\n            method=\"Bellman-Ford\",&lt;br&gt;\n            target=5,&lt;br&gt;\n            cutoff=100.0,&lt;br&gt;\n            weight_name=\"distance\"\n        )\n    \"\"\"\n    # \u68c0\u67e5 start \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n    if not isinstance(start, int):\n        raise ValueError(f\"Invalid value for 'start': {start}. It must be a int.\")\n\n    # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n    valid_methods = [\"Dijkstra\", \"A*\", \"Bellman-Ford\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n    if method not in valid_methods:\n        raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n    # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\n    if not isinstance(target, int):\n        raise ValueError(f\"Invalid value for 'target': {target}. It must be a integer.\")\n\n    # \u68c0\u67e5 cutoff \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6d6e\u52a8\u6570\n    if not isinstance(cutoff, (int, float)) or cutoff &lt; 0:\n        raise ValueError(f\"Invalid value for 'cutoff': {cutoff}. It must be a non-negative number.\")\n\n    # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\n    if not isinstance(weight_name, str):\n        raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be a string.\")\n\n    result = self.graph.single_source_cost(start, method, target, cutoff, weight_name)\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - single_source_path\uff1a  - \u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff0c\u8fd4\u56de\u82b1\u8d39</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>int</code> <p>\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8d77\u59cb\u8282\u70b9\u3002</p> <code>int</code> <code>method</code> <code>str</code> <p>\u7528\u4e8e\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u5b83\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a -\u201cDijkstra\u201d\uff1a\u6807\u51c6Dijkstra\u7b97\u6cd5\u3002 -\u201cA\u201d\uff1aA\u641c\u7d22\u7b97\u6cd5\uff08\u9700\u8981\u542f\u53d1\u5f0f\u51fd\u6570\uff09\u3002 -\u201cBellman Ford\u201d\uff1aBellman Ford\u7b97\u6cd5\uff08\u5904\u7406\u8d1f\u6743\u91cd\uff09\u3002 \u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>target</code> <code>int</code> <p>\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a-1\uff0c\u5219\u8868\u793a\u6ca1\u6709\u7279\u5b9a\u76ee\u6807\u3002</p> <code>-1</code> <code>cutoff</code> <code>float</code> <p>\u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\u9650\u5236\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u503c\u7684\u8def\u5f84\u90fd\u5c06\u88ab\u5ffd\u7565\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u56fe\u4e2d\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8fb9\u6743\u91cd\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a\u201c\u65e0\u201d\u3002</p> <code>'none'</code> <p>Returns:</p> Name Type Description <code>result</code> <p>\u8fd4\u56de\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u4e00\u4e2aresult\u7ed3\u6784\u4f53\uff0c\u5185\u6709{cost,paths}\u4e24\u4e2a\u5c5e\u6027</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u8fdd\u53cd\u4e86\u4ee5\u4e0b\u4efb\u4f55\u4e00\u9879\uff1a -\u201cstart\u201d\u4e0d\u662f\u6574\u6570\u3002 -\u201cmethod\u201d\u4e0d\u662f\u6709\u6548\u7684\u7b97\u6cd5\u4e4b\u4e00\uff1a\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u3002 -\u201ctarget\u201d\u4e0d\u662f\u6574\u6570\u3002 -\u201ccutoff\u201d\u4e0d\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u4e0d\u662f\u5b57\u7b26\u4e32\u3002</p> Example <p>result = single_source_path(     start=1,     method=\"Bellman-Ford\",     target=5,     cutoff=100.0,     weight_name=\"distance\" )</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def single_source_path(self,\n                      start=int,\n                      method=\"Dijkstra\",\n                      target=-1,\n                      cutoff=float('inf'),\n                      weight_name=\"none\"):\n    \"\"\"**\u7c7b\u65b9\u6cd5 - single_source_path\uff1a**&lt;br&gt;\n     - \u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff0c\u8fd4\u56de\u82b1\u8d39\n\n    Args:\n        start (int): \u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8d77\u59cb\u8282\u70b9\u3002\n        method (str): \u7528\u4e8e\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u5b83\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a\n            -\u201cDijkstra\u201d\uff1a\u6807\u51c6Dijkstra\u7b97\u6cd5\u3002\n            -\u201cA*\u201d\uff1aA*\u641c\u7d22\u7b97\u6cd5\uff08\u9700\u8981\u542f\u53d1\u5f0f\u51fd\u6570\uff09\u3002\n            -\u201cBellman Ford\u201d\uff1aBellman Ford\u7b97\u6cd5\uff08\u5904\u7406\u8d1f\u6743\u91cd\uff09\u3002\n            \u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        target (int): \u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a-1\uff0c\u5219\u8868\u793a\u6ca1\u6709\u7279\u5b9a\u76ee\u6807\u3002\n        cutoff (float): \u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\u9650\u5236\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u503c\u7684\u8def\u5f84\u90fd\u5c06\u88ab\u5ffd\u7565\u3002\n        weight_name (str): \u56fe\u4e2d\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8fb9\u6743\u91cd\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a\u201c\u65e0\u201d\u3002\n\n    Returns:\n        result: \u8fd4\u56de\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u4e00\u4e2aresult\u7ed3\u6784\u4f53\uff0c\u5185\u6709{cost,paths}\u4e24\u4e2a\u5c5e\u6027\n\n    Raises:\n        ValueError: \u5982\u679c\u8fdd\u53cd\u4e86\u4ee5\u4e0b\u4efb\u4f55\u4e00\u9879\uff1a&lt;br&gt;\n            -\u201cstart\u201d\u4e0d\u662f\u6574\u6570\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u4e0d\u662f\u6709\u6548\u7684\u7b97\u6cd5\u4e4b\u4e00\uff1a\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u3002&lt;br&gt;\n            -\u201ctarget\u201d\u4e0d\u662f\u6574\u6570\u3002&lt;br&gt;\n            -\u201ccutoff\u201d\u4e0d\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u4e0d\u662f\u5b57\u7b26\u4e32\u3002\n\n    Example:\n        result = single_source_path(&lt;br&gt;\n            start=1,&lt;br&gt;\n            method=\"Bellman-Ford\",&lt;br&gt;\n            target=5,&lt;br&gt;\n            cutoff=100.0,&lt;br&gt;\n            weight_name=\"distance\"\n        )\n    \"\"\"\n    # \u68c0\u67e5 list_o \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n    if not isinstance(start, int):\n        raise ValueError(f\"Invalid value for 'start': {start}. It must be a int.\")\n\n    # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n    valid_methods = [\"Dijkstra\", \"A*\", \"Bellman-Ford\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n    if method not in valid_methods:\n        raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n    # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\n    if not isinstance(target, int):\n        raise ValueError(f\"Invalid value for 'target': {target}. It must be a non-negative integer.\")\n\n    # \u68c0\u67e5 cutoff \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6d6e\u52a8\u6570\n    if not isinstance(cutoff, (int, float)) or cutoff &lt; 0:\n        raise ValueError(f\"Invalid value for 'cutoff': {cutoff}. It must be a number.\")\n\n    # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\n    if not isinstance(weight_name, str):\n        raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be a string.\")\n\n    result = self.graph.single_source_path(start, method, target, cutoff, weight_name)\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - single_source_all\uff1a  - \u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff0c\u8fd4\u56de\u82b1\u8d39\u548c\u8def\u5f84</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>int</code> <p>\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8d77\u59cb\u8282\u70b9\u3002</p> <code>int</code> <code>method</code> <code>str</code> <p>\u7528\u4e8e\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u5b83\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a -\u201cDijkstra\u201d\uff1a\u6807\u51c6Dijkstra\u7b97\u6cd5\u3002 -\u201cA\u201d\uff1aA\u641c\u7d22\u7b97\u6cd5\uff08\u9700\u8981\u542f\u53d1\u5f0f\u51fd\u6570\uff09\u3002 -\u201cBellman Ford\u201d\uff1aBellman Ford\u7b97\u6cd5\uff08\u5904\u7406\u8d1f\u6743\u91cd\uff09\u3002 \u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>target</code> <code>int</code> <p>\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a-1\uff0c\u5219\u8868\u793a\u6ca1\u6709\u7279\u5b9a\u76ee\u6807\u3002</p> <code>-1</code> <code>cutoff</code> <code>float</code> <p>\u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\u9650\u5236\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u503c\u7684\u8def\u5f84\u90fd\u5c06\u88ab\u5ffd\u7565\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u56fe\u4e2d\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8fb9\u6743\u91cd\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a\u201c\u65e0\u201d\u3002</p> <code>'none'</code> <p>Returns:</p> Name Type Description <code>result</code> <p>\u8fd4\u56de\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u4e00\u7ef4\u5b57\u5178</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u8fdd\u53cd\u4e86\u4ee5\u4e0b\u4efb\u4f55\u4e00\u9879\uff1a -\u201cstart\u201d\u4e0d\u662f\u6574\u6570\u3002 -\u201cmethod\u201d\u4e0d\u662f\u6709\u6548\u7684\u7b97\u6cd5\u4e4b\u4e00\uff1a\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u3002 -\u201ctarget\u201d\u4e0d\u662f\u6574\u6570\u3002 -\u201ccutoff\u201d\u4e0d\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u4e0d\u662f\u5b57\u7b26\u4e32\u3002</p> Example <p>result = single_source_all(     start=1,     method=\"Bellman-Ford\",     target=5,     cutoff=100.0,     weight_name=\"distance\" )</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def single_source_all(self,\n                     start=int,\n                     method=\"Dijkstra\",\n                     target=-1,\n                     cutoff=float('inf'),\n                     weight_name=\"none\"):\n    \"\"\"**\u7c7b\u65b9\u6cd5 - single_source_all\uff1a**&lt;br&gt;\n     - \u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\uff0c\u8fd4\u56de\u82b1\u8d39\u548c\u8def\u5f84\n\n    Args:\n        start (int): \u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8d77\u59cb\u8282\u70b9\u3002\n        method (str): \u7528\u4e8e\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u5b83\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a\n            -\u201cDijkstra\u201d\uff1a\u6807\u51c6Dijkstra\u7b97\u6cd5\u3002\n            -\u201cA*\u201d\uff1aA*\u641c\u7d22\u7b97\u6cd5\uff08\u9700\u8981\u542f\u53d1\u5f0f\u51fd\u6570\uff09\u3002\n            -\u201cBellman Ford\u201d\uff1aBellman Ford\u7b97\u6cd5\uff08\u5904\u7406\u8d1f\u6743\u91cd\uff09\u3002\n            \u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        target (int): \u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a-1\uff0c\u5219\u8868\u793a\u6ca1\u6709\u7279\u5b9a\u76ee\u6807\u3002\n        cutoff (float): \u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u8ddd\u79bb\u9650\u5236\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u503c\u7684\u8def\u5f84\u90fd\u5c06\u88ab\u5ffd\u7565\u3002\n        weight_name (str): \u56fe\u4e2d\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8fb9\u6743\u91cd\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a\u201c\u65e0\u201d\u3002\n\n    Returns:\n        result: \u8fd4\u56de\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u4e00\u7ef4\u5b57\u5178\n\n    Raises:\n        ValueError: \u5982\u679c\u8fdd\u53cd\u4e86\u4ee5\u4e0b\u4efb\u4f55\u4e00\u9879\uff1a&lt;br&gt;\n            -\u201cstart\u201d\u4e0d\u662f\u6574\u6570\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u4e0d\u662f\u6709\u6548\u7684\u7b97\u6cd5\u4e4b\u4e00\uff1a\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u3002&lt;br&gt;\n            -\u201ctarget\u201d\u4e0d\u662f\u6574\u6570\u3002&lt;br&gt;\n            -\u201ccutoff\u201d\u4e0d\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u4e0d\u662f\u5b57\u7b26\u4e32\u3002\n\n    Example:\n        result = single_source_all(&lt;br&gt;\n            start=1,&lt;br&gt;\n            method=\"Bellman-Ford\",&lt;br&gt;\n            target=5,&lt;br&gt;\n            cutoff=100.0,&lt;br&gt;\n            weight_name=\"distance\"\n        )\n    \"\"\"\n    # \u68c0\u67e5 list_o \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n    if not isinstance(start, int):\n        raise ValueError(f\"Invalid value for 'start': {start}. It must be a int.\")\n\n    # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n    valid_methods = [\"Dijkstra\", \"A*\", \"Bellman-Ford\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n    if method not in valid_methods:\n        raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n    # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\n    if not isinstance(target, int):\n        raise ValueError(f\"Invalid value for 'target': {target}. It must be a integer.\")\n\n    # \u68c0\u67e5 cutoff \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6d6e\u52a8\u6570\n    if not isinstance(cutoff, (int, float)) or cutoff &lt; 0:\n        raise ValueError(f\"Invalid value for 'cutoff': {cutoff}. It must be a non-negative number.\")\n\n    # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\n    if not isinstance(weight_name, str):\n        raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be a string.\")\n\n    result = self.graph.single_source_all(start, method, target, cutoff, weight_name)\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - multi_single_source_cost\uff1a  - \u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u8fd4\u56de\u82b1\u8d39\u5217\u8868</p> <p>Parameters:</p> Name Type Description Default <code>start_nodes</code> <code>list</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u9879\u76ee\u5217\u8868\u4e2d\u7684\u503c\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <code>list</code> <code>method</code> <code>str</code> <p>\u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\uff0c\u201cA*\u201d\u548c\u201cBellman-Ford\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>target</code> <code>int</code> <p>\u8981\u5230\u8fbe\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c-1\uff0c\u5219\u67e5\u627e\u6240\u6709\u8282\u70b9\u7684\u8def\u5f84\u3002\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002</p> <code>-1</code> <code>cutoff</code> <code>float or int</code> <p>\u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u5982\u679c\u5176\u603b\u6743\u91cd\u8d85\u8fc7\u8be5\u503c,\u8def\u5f84\u88ab\u4e22\u5f03\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002</p> <code>'none'</code> <code>num_thread</code> <code>int</code> <p>\u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <code>1</code> <p>Returns:</p> Name Type Description <code>result</code> <p>\u8fd4\u56de\u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u4e8c\u7ef4\u5217\u8868\uff1a\u5143\u7d20\u662f\u6bcf\u4e2a\u6e90\u8282\u70b9\u7684\u5355\u6e90\u6700\u77ed\u8ba1\u7b97\u82b1\u8d39</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002 -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u4e4b\u4e00\u3002 -\u201ctarget\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002 -\u201ccutoff\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002 -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002</p> Example <p>result = multi_single_source_cost(     start_nodes=[1,2,3],     method=\"Dijkstra\",     target=10,     cutoff=100.0,     weight_name=\"distance\",     num_thread=10 )</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def multi_single_source_cost(self,\n                     start_nodes=list,\n                     method=\"Dijkstra\",\n                     target=-1,\n                     cutoff=float('inf'),\n                     weight_name=\"none\",\n                     num_thread=1):\n    \"\"\"**\u7c7b\u65b9\u6cd5 - multi_single_source_cost\uff1a**&lt;br&gt;\n     - \u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u8fd4\u56de\u82b1\u8d39\u5217\u8868\n\n    Args:\n        start_nodes (list): \u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u9879\u76ee\u5217\u8868\u4e2d\u7684\u503c\u5fc5\u987b\u662f\u6574\u6570\u3002\n        method (str): \u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\uff0c\u201cA*\u201d\u548c\u201cBellman-Ford\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        target (int): \u8981\u5230\u8fbe\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c-1\uff0c\u5219\u67e5\u627e\u6240\u6709\u8282\u70b9\u7684\u8def\u5f84\u3002\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002\n        cutoff (float or int): \u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u5982\u679c\u5176\u603b\u6743\u91cd\u8d85\u8fc7\u8be5\u503c,\u8def\u5f84\u88ab\u4e22\u5f03\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002\n        weight_name (str): \u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002\n        num_thread (int): \u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Returns:\n        result: \u8fd4\u56de\u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u4e8c\u7ef4\u5217\u8868\uff1a\u5143\u7d20\u662f\u6bcf\u4e2a\u6e90\u8282\u70b9\u7684\u5355\u6e90\u6700\u77ed\u8ba1\u7b97\u82b1\u8d39\n\n    Raises:\n        ValueError: \u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a&lt;br&gt;\n            -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u4e4b\u4e00\u3002&lt;br&gt;\n            -\u201ctarget\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002&lt;br&gt;\n            -\u201ccutoff\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002&lt;br&gt;\n            -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Example:\n        result = multi_single_source_cost(&lt;br&gt;\n            start_nodes=[1,2,3],&lt;br&gt;\n            method=\"Dijkstra\",&lt;br&gt;\n            target=10,&lt;br&gt;\n            cutoff=100.0,&lt;br&gt;\n            weight_name=\"distance\",&lt;br&gt;\n            num_thread=10\n        )\n    \"\"\"\n    # \u68c0\u67e5 list_o \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n    if not isinstance(start_nodes, list):\n        raise ValueError(f\"Invalid value for 'list_o': {start_nodes}. It must be a list.\")\n\n    # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n    valid_methods = [\"Dijkstra\", \"A*\", \"Bellman-Ford\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n    if method not in valid_methods:\n        raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n    # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n    if not isinstance(target, int):\n        raise ValueError(f\"Invalid value for 'target': {target}. It must be a integer.\")\n\n    # \u68c0\u67e5 cutoff \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6d6e\u52a8\u6570\n    if not isinstance(cutoff, (int, float)) or cutoff &lt; 0:\n        raise ValueError(f\"Invalid value for 'cutoff': {cutoff}. It must be a non-negative number.\")\n\n    # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\n    if not isinstance(weight_name, str):\n        raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be a string.\")\n\n    # \u68c0\u67e5 num_thread \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n    if not isinstance(num_thread, int):\n        raise ValueError(f\"Invalid value for 'num_thread': {num_thread}. It must be a integer.\")\n\n    result = self.graph.multi_single_source_cost(start_nodes, method, target, cutoff, weight_name, num_thread)\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - multi_single_source_path\uff1a  - \u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u8fd4\u56de\u8def\u5f84\u5217\u8868</p> <p>Parameters:</p> Name Type Description Default <code>start_nodes</code> <code>list</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u9879\u76ee\u5217\u8868\u4e2d\u7684\u503c\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <code>list</code> <code>method</code> <code>str</code> <p>\u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\uff0c\u201cA*\u201d\u548c\u201cBellman-Ford\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>target</code> <code>int</code> <p>\u8981\u5230\u8fbe\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c-1\uff0c\u5219\u67e5\u627e\u6240\u6709\u8282\u70b9\u7684\u8def\u5f84\u3002\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002</p> <code>-1</code> <code>cutoff</code> <code>float or int</code> <p>\u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u5982\u679c\u5176\u603b\u6743\u91cd\u8d85\u8fc7\u8be5\u503c,\u8def\u5f84\u88ab\u4e22\u5f03\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002</p> <code>'none'</code> <code>num_thread</code> <code>int</code> <p>\u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <code>1</code> <p>Returns:</p> Name Type Description <code>result</code> <p>\u8fd4\u56de\u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u4e8c\u7ef4\u5217\u8868\uff1a\u5143\u7d20\u662f\u6bcf\u4e2a\u6e90\u8282\u70b9\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002 -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u4e4b\u4e00\u3002 -\u201ctarget\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002 -\u201ccutoff\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002 -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002</p> Example <p>result = multi_single_source_path(     start_nodes=[1,2,3],     method=\"Dijkstra\",     target=10,     cutoff=100.0,     weight_name=\"distance\",     num_thread=10 )</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def multi_single_source_path(self,\n                     start_nodes=list,\n                     method=\"Dijkstra\",\n                     target=-1,\n                     cutoff=float('inf'),\n                     weight_name=\"none\",\n                     num_thread=1):\n    \"\"\"**\u7c7b\u65b9\u6cd5 - multi_single_source_path\uff1a**&lt;br&gt;\n     - \u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u8fd4\u56de\u8def\u5f84\u5217\u8868\n\n    Args:\n        start_nodes (list): \u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u9879\u76ee\u5217\u8868\u4e2d\u7684\u503c\u5fc5\u987b\u662f\u6574\u6570\u3002\n        method (str): \u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\uff0c\u201cA*\u201d\u548c\u201cBellman-Ford\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        target (int): \u8981\u5230\u8fbe\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c-1\uff0c\u5219\u67e5\u627e\u6240\u6709\u8282\u70b9\u7684\u8def\u5f84\u3002\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002\n        cutoff (float or int): \u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u5982\u679c\u5176\u603b\u6743\u91cd\u8d85\u8fc7\u8be5\u503c,\u8def\u5f84\u88ab\u4e22\u5f03\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002\n        weight_name (str): \u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002\n        num_thread (int): \u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Returns:\n        result: \u8fd4\u56de\u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u4e8c\u7ef4\u5217\u8868\uff1a\u5143\u7d20\u662f\u6bcf\u4e2a\u6e90\u8282\u70b9\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84\n\n    Raises:\n        ValueError: \u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a&lt;br&gt;\n            -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u4e4b\u4e00\u3002&lt;br&gt;\n            -\u201ctarget\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002&lt;br&gt;\n            -\u201ccutoff\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002&lt;br&gt;\n            -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Example:\n        result = multi_single_source_path(&lt;br&gt;\n            start_nodes=[1,2,3],&lt;br&gt;\n            method=\"Dijkstra\",&lt;br&gt;\n            target=10,&lt;br&gt;\n            cutoff=100.0,&lt;br&gt;\n            weight_name=\"distance\",&lt;br&gt;\n            num_thread=10\n        )\n    \"\"\"\n    # \u68c0\u67e5 list_o \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n    if not isinstance(start_nodes, list):\n        raise ValueError(f\"Invalid value for 'list_o': {start_nodes}. It must be a list.\")\n\n    # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n    valid_methods = [\"Dijkstra\", \"A*\", \"Bellman-Ford\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n    if method not in valid_methods:\n        raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n    # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n    if not isinstance(target, int):\n        raise ValueError(f\"Invalid value for 'target': {target}. It must be a integer.\")\n\n    # \u68c0\u67e5 cutoff \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6d6e\u52a8\u6570\n    if not isinstance(cutoff, (int, float)) or cutoff &lt; 0:\n        raise ValueError(f\"Invalid value for 'cutoff': {cutoff}. It must be a non-negative number.\")\n\n    # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\n    if not isinstance(weight_name, str):\n        raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be a string.\")\n\n    # \u68c0\u67e5 num_thread \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n    if not isinstance(num_thread, int):\n        raise ValueError(f\"Invalid value for 'num_thread': {num_thread}. It must be a integer.\")\n\n    result = self.graph.multi_single_source_path(start_nodes, method, target, cutoff, weight_name, num_thread)\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - multi_single_source_all\uff1a  - \u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u8fd4\u56de\u8def\u5f84\u5217\u8868\u548c\u82b1\u8d39</p> <p>Parameters:</p> Name Type Description Default <code>start_nodes</code> <code>list</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u9879\u76ee\u5217\u8868\u4e2d\u7684\u503c\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <code>list</code> <code>method</code> <code>str</code> <p>\u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\uff0c\u201cA*\u201d\u548c\u201cBellman-Ford\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>target</code> <code>int</code> <p>\u8981\u5230\u8fbe\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c-1\uff0c\u5219\u67e5\u627e\u6240\u6709\u8282\u70b9\u7684\u8def\u5f84\u3002\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002</p> <code>-1</code> <code>cutoff</code> <code>float or int</code> <p>\u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u5982\u679c\u5176\u603b\u6743\u91cd\u8d85\u8fc7\u8be5\u503c,\u8def\u5f84\u88ab\u4e22\u5f03\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002</p> <code>'none'</code> <code>num_thread</code> <code>int</code> <p>\u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <code>1</code> <p>Returns:</p> Name Type Description <code>result</code> <p>\u8fd4\u56de\u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u4e8c\u7ef4\u5217\u8868\uff1a\u5143\u7d20\u662f\u6bcf\u4e2a\u6e90\u8282\u70b9\u7684\u7ed3\u6784\u4f53result,\u6b64\u7ed3\u6784\u4f53\u5305\u542b\u4e24\u4e2a\u5c5e\u6027{cost,paths}</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002 -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u4e4b\u4e00\u3002 -\u201ctarget\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002 -\u201ccutoff\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002 -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002</p> Example <p>result = multi_single_source_all(     start_nodes=[1,2,3],     method=\"Dijkstra\",     target=10,     cutoff=100.0,     weight_name=\"distance\",     num_thread=10 )</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def multi_single_source_all(self,\n                     start_nodes=list,\n                     method=\"Dijkstra\",\n                     target=-1,\n                     cutoff=float('inf'),\n                     weight_name=\"none\",\n                     num_thread=1):\n    \"\"\"**\u7c7b\u65b9\u6cd5 - multi_single_source_all\uff1a**&lt;br&gt;\n     - \u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u8fd4\u56de\u8def\u5f84\u5217\u8868\u548c\u82b1\u8d39\n\n    Args:\n        start_nodes (list): \u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u9879\u76ee\u5217\u8868\u4e2d\u7684\u503c\u5fc5\u987b\u662f\u6574\u6570\u3002\n        method (str): \u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\uff0c\u201cA*\u201d\u548c\u201cBellman-Ford\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        target (int): \u8981\u5230\u8fbe\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c-1\uff0c\u5219\u67e5\u627e\u6240\u6709\u8282\u70b9\u7684\u8def\u5f84\u3002\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002\n        cutoff (float or int): \u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u5982\u679c\u5176\u603b\u6743\u91cd\u8d85\u8fc7\u8be5\u503c,\u8def\u5f84\u88ab\u4e22\u5f03\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002\n        weight_name (str): \u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002\n        num_thread (int): \u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Returns:\n        result: \u8fd4\u56de\u591a\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u4e8c\u7ef4\u5217\u8868\uff1a\u5143\u7d20\u662f\u6bcf\u4e2a\u6e90\u8282\u70b9\u7684\u7ed3\u6784\u4f53result,\u6b64\u7ed3\u6784\u4f53\u5305\u542b\u4e24\u4e2a\u5c5e\u6027{cost,paths}\n\n    Raises:\n        ValueError: \u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a&lt;br&gt;\n            -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u4e4b\u4e00\u3002&lt;br&gt;\n            -\u201ctarget\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002&lt;br&gt;\n            -\u201ccutoff\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002&lt;br&gt;\n            -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Example:\n        result = multi_single_source_all(&lt;br&gt;\n            start_nodes=[1,2,3],&lt;br&gt;\n            method=\"Dijkstra\",&lt;br&gt;\n            target=10,&lt;br&gt;\n            cutoff=100.0,&lt;br&gt;\n            weight_name=\"distance\",&lt;br&gt;\n            num_thread=10\n        )\n    \"\"\"\n    # \u68c0\u67e5 list_o \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n    if not isinstance(start_nodes, list):\n        raise ValueError(f\"Invalid value for 'list_o': {start_nodes}. It must be a list.\")\n\n    # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n    valid_methods = [\"Dijkstra\", \"A*\", \"Bellman-Ford\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n    if method not in valid_methods:\n        raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n    # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n    if not isinstance(target, int):\n        raise ValueError(f\"Invalid value for 'target': {target}. It must be a integer.\")\n\n    # \u68c0\u67e5 cutoff \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6d6e\u52a8\u6570\n    if not isinstance(cutoff, (int, float)) or cutoff &lt; 0:\n        raise ValueError(f\"Invalid value for 'cutoff': {cutoff}. It must be a non-negative number.\")\n\n    # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\n    if not isinstance(weight_name, str):\n        raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be a string.\")\n\n    # \u68c0\u67e5 num_thread \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n    if not isinstance(num_thread, int):\n        raise ValueError(f\"Invalid value for 'num_thread': {num_thread}. It must be a integer.\")\n\n    result = self.graph.multi_single_source_all(start_nodes, method, target, cutoff, weight_name, num_thread)\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - multi_multi_source_cost\uff1a  - \u591a\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u8fd4\u56de\u6700\u77ed\u8def\u5f84\u82b1\u8d39</p> <p>Parameters:</p> Name Type Description Default <code>start_nodes</code> <code>list</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u4e8c\u7ef4\u5217\u8868\u3002\u6bcf\u4e2a\u5217\u8868\u4e2d\u7684\u5217\u8868\u662f\u4e00\u4e2a\u591a\u6e90\u8282\u70b9\u5217\u8868\u3002</p> <code>list</code> <code>method</code> <code>str</code> <p>\u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\uff0c\u201cA*\u201d\u548c\u201cBellman-Ford\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>target</code> <code>int</code> <p>\u8981\u5230\u8fbe\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c-1\uff0c\u5219\u67e5\u627e\u6240\u6709\u8282\u70b9\u7684\u8def\u5f84\u3002\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002</p> <code>-1</code> <code>cutoff</code> <code>float or int</code> <p>\u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u5982\u679c\u5176\u603b\u6743\u91cd\u8d85\u8fc7\u8be5\u503c,\u8def\u5f84\u88ab\u4e22\u5f03\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002</p> <code>'none'</code> <code>num_thread</code> <code>int</code> <p>\u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <code>1</code> <p>Returns:</p> Name Type Description <code>result</code> <p>\u8fd4\u56de\u591a\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u4e8c\u7ef4\u5217\u8868\uff1a\u5143\u7d20\u662f\u6bcf\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u7684\u82b1\u8d39\u5217\u8868</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u4e8c\u7ef4\u6574\u6570\u5217\u8868\u3002 -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u4e4b\u4e00\u3002 -\u201ctarget\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002 -\u201ccutoff\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002 -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002</p> Example <p>result = multi_multi_source_cost(     start_nodes=[[1,2],[3,4],[5,6]],     method=\"Dijkstra\",     target=10,     cutoff=100.0,     weight_name=\"distance\",     num_thread=10 )</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def multi_multi_source_cost(self,\n                     start_nodes=list,\n                     method=\"Dijkstra\",\n                     target=-1,\n                     cutoff=float('inf'),\n                     weight_name=\"none\",\n                     num_thread=1):\n    \"\"\"**\u7c7b\u65b9\u6cd5 - multi_multi_source_cost\uff1a**&lt;br&gt;\n     - \u591a\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u8fd4\u56de\u6700\u77ed\u8def\u5f84\u82b1\u8d39\n\n    Args:\n        start_nodes (list): \u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u4e8c\u7ef4\u5217\u8868\u3002\u6bcf\u4e2a\u5217\u8868\u4e2d\u7684\u5217\u8868\u662f\u4e00\u4e2a\u591a\u6e90\u8282\u70b9\u5217\u8868\u3002\n        method (str): \u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\uff0c\u201cA*\u201d\u548c\u201cBellman-Ford\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        target (int): \u8981\u5230\u8fbe\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c-1\uff0c\u5219\u67e5\u627e\u6240\u6709\u8282\u70b9\u7684\u8def\u5f84\u3002\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002\n        cutoff (float or int): \u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u5982\u679c\u5176\u603b\u6743\u91cd\u8d85\u8fc7\u8be5\u503c,\u8def\u5f84\u88ab\u4e22\u5f03\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002\n        weight_name (str): \u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002\n        num_thread (int): \u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Returns:\n        result: \u8fd4\u56de\u591a\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u4e8c\u7ef4\u5217\u8868\uff1a\u5143\u7d20\u662f\u6bcf\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u7684\u82b1\u8d39\u5217\u8868\n\n    Raises:\n        ValueError: \u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a&lt;br&gt;\n            -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u4e8c\u7ef4\u6574\u6570\u5217\u8868\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u4e4b\u4e00\u3002&lt;br&gt;\n            -\u201ctarget\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002&lt;br&gt;\n            -\u201ccutoff\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002&lt;br&gt;\n            -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Example:\n        result = multi_multi_source_cost(&lt;br&gt;\n            start_nodes=[[1,2],[3,4],[5,6]],&lt;br&gt;\n            method=\"Dijkstra\",&lt;br&gt;\n            target=10,&lt;br&gt;\n            cutoff=100.0,&lt;br&gt;\n            weight_name=\"distance\",&lt;br&gt;\n            num_thread=10\n        )\n    \"\"\"\n    # \u68c0\u67e5 list_o \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n    if not isinstance(start_nodes, list):\n        raise ValueError(f\"Invalid value for 'list_o': {start_nodes}. It must be a list.\")\n\n    # \u68c0\u67e5 start_nodes \u662f\u5426\u662f\u4e8c\u7ef4\u5217\u8868\n    if not all(isinstance(node, list) for node in start_nodes):\n        raise ValueError(f\"Invalid value for 'start_nodes': {start_nodes}. It must be a list of lists.\")\n\n    # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n    valid_methods = [\"Dijkstra\", \"A*\", \"Bellman-Ford\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n    if method not in valid_methods:\n        raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n    # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n    if not isinstance(target, int):\n        raise ValueError(f\"Invalid value for 'target': {target}. It must be a integer.\")\n\n    # \u68c0\u67e5 cutoff \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6d6e\u52a8\u6570\n    if not isinstance(cutoff, (int, float)) or cutoff &lt; 0:\n        raise ValueError(f\"Invalid value for 'cutoff': {cutoff}. It must be a non-negative number.\")\n\n    # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\n    if not isinstance(weight_name, str):\n        raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be a string.\")\n\n    # \u68c0\u67e5 num_thread \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n    if not isinstance(num_thread, int):\n        raise ValueError(f\"Invalid value for 'num_thread': {num_thread}. It must be a integer.\")\n\n    result = self.graph.multi_multi_source_cost(start_nodes, method, target, cutoff, weight_name, num_thread)\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - multi_multi_source_path\uff1a  - \u591a\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u8fd4\u56de\u6700\u77ed\u8ba1\u7b97\u8def\u5f84</p> <p>Parameters:</p> Name Type Description Default <code>start_nodes</code> <code>list</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u4e8c\u7ef4\u5217\u8868\u3002\u6bcf\u4e2a\u5217\u8868\u4e2d\u7684\u5217\u8868\u662f\u4e00\u4e2a\u591a\u6e90\u8282\u70b9\u5217\u8868\u3002</p> <code>list</code> <code>method</code> <code>str</code> <p>\u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\uff0c\u201cA*\u201d\u548c\u201cBellman-Ford\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>target</code> <code>int</code> <p>\u8981\u5230\u8fbe\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c-1\uff0c\u5219\u67e5\u627e\u6240\u6709\u8282\u70b9\u7684\u8def\u5f84\u3002\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002</p> <code>-1</code> <code>cutoff</code> <code>float or int</code> <p>\u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u5982\u679c\u5176\u603b\u6743\u91cd\u8d85\u8fc7\u8be5\u503c,\u8def\u5f84\u88ab\u4e22\u5f03\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002</p> <code>'none'</code> <code>num_thread</code> <code>int</code> <p>\u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <code>1</code> <p>Returns:</p> Name Type Description <code>result</code> <p>\u8fd4\u56de\u591a\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u4e8c\u7ef4\u5217\u8868\uff1a\u5143\u7d20\u662f\u6bcf\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u7684\u82b1\u8d39\u5217\u8868</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u4e8c\u7ef4\u6574\u6570\u5217\u8868\u3002 -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u4e4b\u4e00\u3002 -\u201ctarget\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002 -\u201ccutoff\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002 -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002</p> Example <p>result = multi_multi_source_path(     start_nodes=[[1,2],[3,4],[5,6]],     method=\"Dijkstra\",     target=10,     cutoff=100.0,     weight_name=\"distance\",     num_thread=10 )</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def multi_multi_source_path(self,\n                     start_nodes=list,\n                     method=\"Dijkstra\",\n                     target=-1,\n                     cutoff=float('inf'),\n                     weight_name=\"none\",\n                     num_thread=1):\n    \"\"\"**\u7c7b\u65b9\u6cd5 - multi_multi_source_path\uff1a**&lt;br&gt;\n     - \u591a\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u8fd4\u56de\u6700\u77ed\u8ba1\u7b97\u8def\u5f84\n\n    Args:\n        start_nodes (list): \u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u4e8c\u7ef4\u5217\u8868\u3002\u6bcf\u4e2a\u5217\u8868\u4e2d\u7684\u5217\u8868\u662f\u4e00\u4e2a\u591a\u6e90\u8282\u70b9\u5217\u8868\u3002\n        method (str): \u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\uff0c\u201cA*\u201d\u548c\u201cBellman-Ford\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        target (int): \u8981\u5230\u8fbe\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c-1\uff0c\u5219\u67e5\u627e\u6240\u6709\u8282\u70b9\u7684\u8def\u5f84\u3002\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002\n        cutoff (float or int): \u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u5982\u679c\u5176\u603b\u6743\u91cd\u8d85\u8fc7\u8be5\u503c,\u8def\u5f84\u88ab\u4e22\u5f03\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002\n        weight_name (str): \u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002\n        num_thread (int): \u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Returns:\n        result: \u8fd4\u56de\u591a\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u4e8c\u7ef4\u5217\u8868\uff1a\u5143\u7d20\u662f\u6bcf\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u7684\u82b1\u8d39\u5217\u8868\n\n    Raises:\n        ValueError: \u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a&lt;br&gt;\n            -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u4e8c\u7ef4\u6574\u6570\u5217\u8868\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u4e4b\u4e00\u3002&lt;br&gt;\n            -\u201ctarget\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002&lt;br&gt;\n            -\u201ccutoff\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002&lt;br&gt;\n            -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Example:\n        result = multi_multi_source_path(&lt;br&gt;\n            start_nodes=[[1,2],[3,4],[5,6]],&lt;br&gt;\n            method=\"Dijkstra\",&lt;br&gt;\n            target=10,&lt;br&gt;\n            cutoff=100.0,&lt;br&gt;\n            weight_name=\"distance\",&lt;br&gt;\n            num_thread=10\n        )\n    \"\"\"\n    # \u68c0\u67e5 list_o \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n    if not isinstance(start_nodes, list):\n        raise ValueError(f\"Invalid value for 'list_o': {start_nodes}. It must be a list.\")\n\n    # \u68c0\u67e5 start_nodes \u662f\u5426\u662f\u4e8c\u7ef4\u5217\u8868\n    if not all(isinstance(node, list) for node in start_nodes):\n        raise ValueError(f\"Invalid value for 'start_nodes': {start_nodes}. It must be a list of lists.\")\n\n    # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n    valid_methods = [\"Dijkstra\", \"A*\", \"Bellman-Ford\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n    if method not in valid_methods:\n        raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n    # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n    if not isinstance(target, int):\n        raise ValueError(f\"Invalid value for 'target': {target}. It must be a integer.\")\n\n    # \u68c0\u67e5 cutoff \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6d6e\u52a8\u6570\n    if not isinstance(cutoff, (int, float)) or cutoff &lt; 0:\n        raise ValueError(f\"Invalid value for 'cutoff': {cutoff}. It must be a non-negative number.\")\n\n    # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\n    if not isinstance(weight_name, str):\n        raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be a string.\")\n\n    # \u68c0\u67e5 num_thread \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n    if not isinstance(num_thread, int):\n        raise ValueError(f\"Invalid value for 'num_thread': {num_thread}. It must be a integer.\")\n\n    result = self.graph.multi_multi_source_path(start_nodes, method, target, cutoff, weight_name, num_thread)\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - multi_multi_source_all\uff1a  - \u591a\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u8fd4\u56de\u6240\u6709\u6700\u77ed\u8ba1\u7b97\u8def\u5f84\u548c\u82b1\u8d39</p> <p>Parameters:</p> Name Type Description Default <code>start_nodes</code> <code>list</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u4e8c\u7ef4\u5217\u8868\u3002\u6bcf\u4e2a\u5217\u8868\u4e2d\u7684\u5217\u8868\u662f\u4e00\u4e2a\u591a\u6e90\u8282\u70b9\u5217\u8868\u3002</p> <code>list</code> <code>method</code> <code>str</code> <p>\u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\uff0c\u201cA*\u201d\u548c\u201cBellman-Ford\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>target</code> <code>int</code> <p>\u8981\u5230\u8fbe\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c-1\uff0c\u5219\u67e5\u627e\u6240\u6709\u8282\u70b9\u7684\u8def\u5f84\u3002\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002</p> <code>-1</code> <code>cutoff</code> <code>float or int</code> <p>\u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u5982\u679c\u5176\u603b\u6743\u91cd\u8d85\u8fc7\u8be5\u503c,\u8def\u5f84\u88ab\u4e22\u5f03\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002</p> <code>'none'</code> <code>num_thread</code> <code>int</code> <p>\u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <code>1</code> <p>Returns:</p> Name Type Description <code>result</code> <p>\u8fd4\u56de\u591a\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u4e8c\u7ef4\u5217\u8868\uff1a\u5143\u7d20\u662f\u6bcf\u4e2a\u591a\u6e90\u8def\u5f84\u8ba1\u7b97\u8fd4\u56de\u7684\u7ed3\u6784\u4f53result,\u6b64\u7ed3\u6784\u4f53\u5305\u542b\u4e24\u4e2a\u5c5e\u6027{cost,paths}</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u4e8c\u7ef4\u6574\u6570\u5217\u8868\u3002 -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u4e4b\u4e00\u3002 -\u201ctarget\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002 -\u201ccutoff\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002 -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002</p> Example <p>result = multi_multi_source_all(     start_nodes=[[1,2],[3,4],[5,6]],     method=\"Dijkstra\",     target=10,     cutoff=100.0,     weight_name=\"distance\",     num_thread=10 )</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def multi_multi_source_all(self,\n                     start_nodes=list,\n                     method=\"Dijkstra\",\n                     target=-1,\n                     cutoff=float('inf'),\n                     weight_name=\"none\",\n                     num_thread=1):\n    \"\"\"**\u7c7b\u65b9\u6cd5 - multi_multi_source_all\uff1a**&lt;br&gt;\n     - \u591a\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u8fd4\u56de\u6240\u6709\u6700\u77ed\u8ba1\u7b97\u8def\u5f84\u548c\u82b1\u8d39\n\n    Args:\n        start_nodes (list): \u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u4e8c\u7ef4\u5217\u8868\u3002\u6bcf\u4e2a\u5217\u8868\u4e2d\u7684\u5217\u8868\u662f\u4e00\u4e2a\u591a\u6e90\u8282\u70b9\u5217\u8868\u3002\n        method (str): \u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\uff0c\u201cA*\u201d\u548c\u201cBellman-Ford\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        target (int): \u8981\u5230\u8fbe\u7684\u76ee\u6807\u8282\u70b9\u3002\u5982\u679c-1\uff0c\u5219\u67e5\u627e\u6240\u6709\u8282\u70b9\u7684\u8def\u5f84\u3002\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002\n        cutoff (float or int): \u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u5982\u679c\u5176\u603b\u6743\u91cd\u8d85\u8fc7\u8be5\u503c,\u8def\u5f84\u88ab\u4e22\u5f03\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002\n        weight_name (str): \u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002\n        num_thread (int): \u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Returns:\n        result: \u8fd4\u56de\u591a\u4e2a\u591a\u6e90\u6700\u77ed\u8def\u5f84\u8ba1\u7b97\u7684\u8def\u5f84\u7ed3\u679c\uff0c\u4e8c\u7ef4\u5217\u8868\uff1a\u5143\u7d20\u662f\u6bcf\u4e2a\u591a\u6e90\u8def\u5f84\u8ba1\u7b97\u8fd4\u56de\u7684\u7ed3\u6784\u4f53result,\u6b64\u7ed3\u6784\u4f53\u5305\u542b\u4e24\u4e2a\u5c5e\u6027{cost,paths}\n\n    Raises:\n        ValueError: \u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a&lt;br&gt;\n            -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u4e8c\u7ef4\u6574\u6570\u5217\u8868\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u4e4b\u4e00\u3002&lt;br&gt;\n            -\u201ctarget\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6574\u6570\u3002&lt;br&gt;\n            -\u201ccutoff\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002&lt;br&gt;\n            -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Example:\n        result = multi_multi_source_all(&lt;br&gt;\n            start_nodes=[[1,2],[3,4],[5,6]],&lt;br&gt;\n            method=\"Dijkstra\",&lt;br&gt;\n            target=10,&lt;br&gt;\n            cutoff=100.0,&lt;br&gt;\n            weight_name=\"distance\",&lt;br&gt;\n            num_thread=10\n        )\n    \"\"\"\n    # \u68c0\u67e5 list_o \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n    if not isinstance(start_nodes, list):\n        raise ValueError(f\"Invalid value for 'list_o': {start_nodes}. It must be a list.\")\n\n    # \u68c0\u67e5 start_nodes \u662f\u5426\u662f\u4e8c\u7ef4\u5217\u8868\n    if not all(isinstance(node, list) for node in start_nodes):\n        raise ValueError(f\"Invalid value for 'start_nodes': {start_nodes}. It must be a list of lists.\")\n\n    # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n    valid_methods = [\"Dijkstra\", \"A*\", \"Bellman-Ford\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n    if method not in valid_methods:\n        raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n    # \u68c0\u67e5 target \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n    if not isinstance(target, int):\n        raise ValueError(f\"Invalid value for 'target': {target}. It must be a integer.\")\n\n    # \u68c0\u67e5 cutoff \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6d6e\u52a8\u6570\n    if not isinstance(cutoff, (int, float)) or cutoff &lt; 0:\n        raise ValueError(f\"Invalid value for 'cutoff': {cutoff}. It must be a non-negative number.\")\n\n    # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\n    if not isinstance(weight_name, str):\n        raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be a string.\")\n\n    # \u68c0\u67e5 num_thread \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n    if not isinstance(num_thread, int):\n        raise ValueError(f\"Invalid value for 'num_thread': {num_thread}. It must be a integer.\")\n\n    result = self.graph.multi_multi_source_all(start_nodes, method, target, cutoff, weight_name, num_thread)\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - cost_matrix_to_numpy\uff1a  - \u8f93\u5165\u8d77\u70b9\u5217\u8868\u548c\u7ec8\u70b9\u5217\u8868\uff0c\u8ba1\u7b97\u83b7\u5f97\u4e00\u4e2a\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u82b1\u8d39\u77e9\u9635</p> <p>Parameters:</p> Name Type Description Default <code>start_nodes</code> <code>list of ints</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u5e94\u8be5\u53ef\u4ee5\u662f\u8868\u793a\u5355\u4e2a\u8d77\u59cb\u8282\u70b9\u7684\u6574\u6570\u3002</p> <code>list</code> <code>end_nodes</code> <code>list of ints</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u7ed3\u675f\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u5e94\u8be5\u3002</p> <code>list</code> <code>method</code> <code>str</code> <p>\u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\uff0c\u201cA*\u201d\u548c\u201c\u8d1d\u5c14\u66fc\u00b7\u798f\u7279\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>cutoff</code> <code>float or int</code> <p>\u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u8def\u5f84\u88ab\u4e22\u5f03\u5982\u679c\u5176\u603b\u91cd\u91cf\u8d85\u8fc7\u8be5\u503c\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002</p> <code>'none'</code> <code>num_thread</code> <code>int</code> <p>\u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <code>1</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002 -\u201cend_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002 -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u4e4b\u4e00\u3002 -\u201ccutoff\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002 -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <p>Returns:</p> Type Description <p>numpy.ndarray: \u4e00\u4e2anumpy\u6570\u7ec4\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u6700\u77ed\u8def\u5f84\u6210\u672c \u57fa\u4e8e\u6307\u5b9a\u7684\u7b97\u6cd5\u5728\u5f00\u59cb\u8282\u70b9\u548c\u7ed3\u675f\u8282\u70b9\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u3002 \u6570\u7ec4\u7684\u7ef4\u5ea6\u5c06\u662flen\uff08start_nodes\uff09x len\uff08end_nodes\u201d\uff09\u3002</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def cost_matrix_to_numpy(self,\n                         start_nodes=list,\n                         end_nodes=list,\n                         method=\"Dijkstra\",\n                         cutoff=float('inf'),\n                         weight_name=\"none\",\n                         num_thread=1):\n    \"\"\"**\u7c7b\u65b9\u6cd5 - cost_matrix_to_numpy\uff1a**\n     - \u8f93\u5165\u8d77\u70b9\u5217\u8868\u548c\u7ec8\u70b9\u5217\u8868\uff0c\u8ba1\u7b97\u83b7\u5f97\u4e00\u4e2a\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u82b1\u8d39\u77e9\u9635\n\n    Args:\n        start_nodes (list of ints): \u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u5e94\u8be5\u53ef\u4ee5\u662f\u8868\u793a\u5355\u4e2a\u8d77\u59cb\u8282\u70b9\u7684\u6574\u6570\u3002\n        end_nodes (list of ints): \u8def\u5f84\u641c\u7d22\u7684\u7ed3\u675f\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u5e94\u8be5\u3002\n        method (str): \u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\uff0c\u201cA*\u201d\u548c\u201c\u8d1d\u5c14\u66fc\u00b7\u798f\u7279\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        cutoff (float or int): \u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u8def\u5f84\u88ab\u4e22\u5f03\u5982\u679c\u5176\u603b\u91cd\u91cf\u8d85\u8fc7\u8be5\u503c\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002\n        weight_name (str): \u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002\n        num_thread (int): \u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Raises:\n        ValueError: \u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a&lt;br&gt;\n            -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002&lt;br&gt;\n            -\u201cend_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u4e4b\u4e00\u3002&lt;br&gt;\n            -\u201ccutoff\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002&lt;br&gt;\n            -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Returns:\n        numpy.ndarray: \u4e00\u4e2anumpy\u6570\u7ec4\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u6700\u77ed\u8def\u5f84\u6210\u672c&lt;br&gt;\n            \u57fa\u4e8e\u6307\u5b9a\u7684\u7b97\u6cd5\u5728\u5f00\u59cb\u8282\u70b9\u548c\u7ed3\u675f\u8282\u70b9\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u3002&lt;br&gt;\n            \u6570\u7ec4\u7684\u7ef4\u5ea6\u5c06\u662flen\uff08start_nodes\uff09x len\uff08end_nodes\u201d\uff09\u3002\n    \"\"\"\n    # \u68c0\u67e5 start_nodes \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n    if not isinstance(start_nodes, list):\n        raise ValueError(f\"Invalid value for 'start_nodes': {start_nodes}. It must be a list.\")\n\n    # \u68c0\u67e5 end_nodes \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n    if not isinstance(end_nodes, list):\n        raise ValueError(f\"Invalid value for 'end_nodes': {end_nodes}. It must be a list.\")\n\n    # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n    valid_methods = [\"Dijkstra\", \"A*\", \"Bellman-Ford\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n    if method not in valid_methods:\n        raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n    # \u68c0\u67e5 cutoff \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6d6e\u52a8\u6570\n    if not isinstance(cutoff, (int, float)) or cutoff &lt; 0:\n        raise ValueError(f\"Invalid value for 'cutoff': {cutoff}. It must be a non-negative number.\")\n\n    # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\n    if not isinstance(weight_name, str):\n        raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be a string.\")\n\n    # \u68c0\u67e5 num_thread \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n    if not isinstance(num_thread, int):\n        raise ValueError(f\"Invalid value for 'num_thread': {num_thread}. It must be a integer.\")\n\n    result = self.graph.cost_matrix_to_numpy(start_nodes, end_nodes, method, cutoff, weight_name, num_thread)\n    return result\n</code></pre> <p> </p> <p>\u7c7b\u65b9\u6cd5 - path_list_to_numpy\uff1a  - - \u8f93\u5165\u8d77\u70b9\u5217\u8868\u548c\u7ec8\u70b9\u5217\u8868\uff0c\u8ba1\u7b97\u83b7\u5f97\u4e00\u4e2a\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u8def\u5f84\u5217\u8868</p> <p>Parameters:</p> Name Type Description Default <code>start_nodes</code> <code>list of ints</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u5e94\u8be5\u53ef\u4ee5\u662f\u8868\u793a\u5355\u4e2a\u8d77\u59cb\u8282\u70b9\u7684\u6574\u6570\u3002</p> <code>list</code> <code>end_nodes</code> <code>list of ints</code> <p>\u8def\u5f84\u641c\u7d22\u7684\u7ed3\u675f\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u5e94\u8be5\u3002</p> <code>list</code> <code>method</code> <code>str</code> <p>\u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\uff0c\u201cA*\u201d\u548c\u201c\u8d1d\u5c14\u66fc\u00b7\u798f\u7279\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002</p> <code>'Dijkstra'</code> <code>cutoff</code> <code>float or int</code> <p>\u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u8def\u5f84\u88ab\u4e22\u5f03\u5982\u679c\u5176\u603b\u91cd\u91cf\u8d85\u8fc7\u8be5\u503c\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002</p> <code>float('inf')</code> <code>weight_name</code> <code>str</code> <p>\u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002</p> <code>'none'</code> <code>num_thread</code> <code>int</code> <p>\u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <code>1</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002 -\u201cend_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002 -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u4e4b\u4e00\u3002 -\u201ccutoff\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002 -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002 -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002</p> <p>Returns:</p> Type Description <p>numpy.ndarray: NumPy\u6570\u7ec4\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u6700\u77ed\u8def\u5f84\uff08\u4f5c\u4e3a\u8282\u70b9\u5217\u8868\uff09\u4f8b\u5982\uff1a [1,3,[2,3], 1,4,[2,3,4]]</p> Source code in <code>src\\graphworkc.py</code> <pre><code>def path_list_to_numpy(self,\n                       start_nodes=list,\n                       end_nodes=list,\n                       method=\"Dijkstra\",\n                       cutoff=float('inf'),\n                       weight_name=\"none\",\n                       num_thread=1):\n    \"\"\"**\u7c7b\u65b9\u6cd5 - path_list_to_numpy\uff1a**\n     - - \u8f93\u5165\u8d77\u70b9\u5217\u8868\u548c\u7ec8\u70b9\u5217\u8868\uff0c\u8ba1\u7b97\u83b7\u5f97\u4e00\u4e2a\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u8def\u5f84\u5217\u8868\n\n    Args:\n        start_nodes (list of ints): \u8def\u5f84\u641c\u7d22\u7684\u8d77\u59cb\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u5e94\u8be5\u53ef\u4ee5\u662f\u8868\u793a\u5355\u4e2a\u8d77\u59cb\u8282\u70b9\u7684\u6574\u6570\u3002\n        end_nodes (list of ints): \u8def\u5f84\u641c\u7d22\u7684\u7ed3\u675f\u8282\u70b9\u5217\u8868\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u5e94\u8be5\u3002\n        method (str): \u7528\u4e8e\u5bfb\u8def\u7684\u7b97\u6cd5\u3002\u6709\u6548\u9009\u9879\u4e3a\u201cDijkstra\u201d\uff0c\u201cA*\u201d\u548c\u201c\u8d1d\u5c14\u66fc\u00b7\u798f\u7279\u201d\u3002\u9ed8\u8ba4\u4e3a\u201cDijkstra\u201d\u3002\n        cutoff (float or int): \u8981\u641c\u7d22\u7684\u6700\u5927\u8ddd\u79bb\u3002\u8def\u5f84\u88ab\u4e22\u5f03\u5982\u679c\u5176\u603b\u91cd\u91cf\u8d85\u8fc7\u8be5\u503c\u3002\u9ed8\u8ba4\u503c\u4e3a\u65e0\u7a77\u5927\u3002\n        weight_name (str): \u7528\u4f5c\u5bfb\u8def\u6743\u91cd\u7684\u8fb9\u5c5e\u6027\u7684\u540d\u79f0\u7b97\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a\u201c\u65e0\u201d\u3002\n        num_thread (int): \u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a1\u3002\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Raises:\n        ValueError: \u5982\u679c\u4efb\u4f55\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u6216\u503c\u65e0\u6548\uff1a&lt;br&gt;\n            -\u201cstart_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002&lt;br&gt;\n            -\u201cend_nodes\u201d\u5fc5\u987b\u662f\u6574\u6570\u5217\u8868\u3002&lt;br&gt;\n            -\u201cmethod\u201d\u5fc5\u987b\u662f\u201cDijkstra\u201d\u3001\u201cA*\u201d\u6216\u201cBellman Ford\u201d\u4e4b\u4e00\u3002&lt;br&gt;\n            -\u201ccutoff\u201d\u5fc5\u987b\u662f\u975e\u8d1f\u6570\u3002&lt;br&gt;\n            -\u201cweight_name\u201d\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002&lt;br&gt;\n            -\u201cnum_thread\u201d\u5fc5\u987b\u662f\u6574\u6570\u3002\n\n    Returns:\n        numpy.ndarray: NumPy\u6570\u7ec4\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u6700\u77ed\u8def\u5f84\uff08\u4f5c\u4e3a\u8282\u70b9\u5217\u8868\uff09\u4f8b\u5982\uff1a&lt;br&gt;\n            [1,3,[2,3],&lt;br&gt;\n            1,4,[2,3,4]]\n    \"\"\"\n    # \u68c0\u67e5 start_nodes \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n    if not isinstance(start_nodes, list):\n        raise ValueError(f\"Invalid value for 'start_nodes': {start_nodes}. It must be a list.\")\n\n    # \u68c0\u67e5 end_nodes \u662f\u5426\u662f\u4e00\u4e2a\u5217\u8868\n    if not isinstance(end_nodes, list):\n        raise ValueError(f\"Invalid value for 'end_nodes': {end_nodes}. It must be a list.\")\n\n    # \u68c0\u67e5 method \u662f\u5426\u662f\u6709\u6548\u7684\u5b57\u7b26\u4e32\n    valid_methods = [\"Dijkstra\", \"A*\", \"Bellman-Ford\"]  # \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\n    if method not in valid_methods:\n        raise ValueError(f\"Invalid value for 'method': {method}. It must be one of {valid_methods}.\")\n\n    # \u68c0\u67e5 cutoff \u662f\u5426\u662f\u4e00\u4e2a\u975e\u8d1f\u6d6e\u52a8\u6570\n    if not isinstance(cutoff, (int, float)) or cutoff &lt; 0:\n        raise ValueError(f\"Invalid value for 'cutoff': {cutoff}. It must be a non-negative number.\")\n\n    # \u68c0\u67e5 weight_name \u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\n    if not isinstance(weight_name, str):\n        raise ValueError(f\"Invalid value for 'weight_name': {weight_name}. It must be a string.\")\n\n    # \u68c0\u67e5 num_thread \u662f\u5426\u662f\u4e00\u4e2a\u6574\u6570\n    if not isinstance(num_thread, int):\n        raise ValueError(f\"Invalid value for 'num_thread': {num_thread}. It must be a integer.\")\n\n    result = self.graph.path_list_to_numpy(start_nodes, end_nodes, method, cutoff, weight_name, num_thread)\n    return result\n</code></pre>"}]}